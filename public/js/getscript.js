/*! qxmapyangming 2021-07-18 */(function () {
  const a = this; const b = a._; const c = {}; const d = Array.prototype; const e = Object.prototype; const f = Function.prototype; const g = d.push; const h = d.slice; const i = d.concat; const j = e.toString; const k = e.hasOwnProperty; const l = d.forEach; const m = d.map; const n = d.reduce; const o = d.reduceRight; const p = d.filter; const q = d.every; const r = d.some; const s = d.indexOf; const t = d.lastIndexOf; const u = Array.isArray; const v = Object.keys; const w = f.bind; var x = function (a) { return a instanceof x ? a : this instanceof x ? void (this._wrapped = a) : new x(a); }; typeof exports !== 'undefined' ? (typeof module !== 'undefined' && module.exports && (exports = module.exports = x), exports._ = x) : a._ = x, x.VERSION = '1.6.0'; const y = x.each = x.forEach = function (a, b, d) { if (a == null) return a; if (l && a.forEach === l)a.forEach(b, d); else if (a.length === +a.length) { for (var e = 0, f = a.length; f > e; e++) if (b.call(d, a[e], e, a) === c) return; } else for (var g = x.keys(a), e = 0, f = g.length; f > e; e++) if (b.call(d, a[g[e]], g[e], a) === c) return; return a; }; x.map = x.collect = function (a, b, c) { const d = []; return a == null ? d : m && a.map === m ? a.map(b, c) : (y(a, (a, e, f) => { d.push(b.call(c, a, e, f)); }), d); }; const z = 'Reduce of empty array with no initial value'; x.reduce = x.foldl = x.inject = function (a, b, c, d) { let e = arguments.length > 2; if (a == null && (a = []), n && a.reduce === n) return d && (b = x.bind(b, d)), e ? a.reduce(b, c) : a.reduce(b); if (y(a, (a, f, g) => { e ? c = b.call(d, c, a, f, g) : (c = a, e = !0); }), !e) throw new TypeError(z); return c; }, x.reduceRight = x.foldr = function (a, b, c, d) { let e = arguments.length > 2; if (a == null && (a = []), o && a.reduceRight === o) return d && (b = x.bind(b, d)), e ? a.reduceRight(b, c) : a.reduceRight(b); let f = a.length; if (f !== +f) { var g = x.keys(a); f = g.length; } if (y(a, (h, i, j) => { i = g ? g[--f] : --f, e ? c = b.call(d, c, a[i], i, j) : (c = a[i], e = !0); }), !e) throw new TypeError(z); return c; }, x.find = x.detect = function (a, b, c) { let d; return A(a, (a, e, f) => (b.call(c, a, e, f) ? (d = a, !0) : void 0)), d; }, x.filter = x.select = function (a, b, c) { const d = []; return a == null ? d : p && a.filter === p ? a.filter(b, c) : (y(a, (a, e, f) => { b.call(c, a, e, f) && d.push(a); }), d); }, x.reject = function (a, b, c) { return x.filter(a, (a, d, e) => !b.call(c, a, d, e), c); }, x.every = x.all = function (a, b, d) { b || (b = x.identity); let e = !0; return a == null ? e : q && a.every === q ? a.every(b, d) : (y(a, (a, f, g) => ((e = e && b.call(d, a, f, g)) ? void 0 : c)), !!e); }; var A = x.some = x.any = function (a, b, d) { b || (b = x.identity); let e = !1; return a == null ? e : r && a.some === r ? a.some(b, d) : (y(a, (a, f, g) => (e || (e = b.call(d, a, f, g)) ? c : void 0)), !!e); }; x.contains = x.include = function (a, b) { return a == null ? !1 : s && a.indexOf === s ? a.indexOf(b) != -1 : A(a, (a) => a === b); }, x.invoke = function (a, b) { const c = h.call(arguments, 2); const d = x.isFunction(b); return x.map(a, (a) => (d ? b : a[b]).apply(a, c)); }, x.pluck = function (a, b) { return x.map(a, x.property(b)); }, x.where = function (a, b) { return x.filter(a, x.matches(b)); }, x.findWhere = function (a, b) { return x.find(a, x.matches(b)); }, x.max = function (a, b, c) { if (!b && x.isArray(a) && a[0] === +a[0] && a.length < 65535) return Math.max.apply(Math, a); let d = -(1 / 0); let e = -(1 / 0); return y(a, (a, f, g) => { const h = b ? b.call(c, a, f, g) : a; h > e && (d = a, e = h); }), d; }, x.min = function (a, b, c) { if (!b && x.isArray(a) && a[0] === +a[0] && a.length < 65535) return Math.min.apply(Math, a); let d = 1 / 0; let e = 1 / 0; return y(a, (a, f, g) => { const h = b ? b.call(c, a, f, g) : a; e > h && (d = a, e = h); }), d; }, x.shuffle = function (a) { let b; let c = 0; const d = []; return y(a, (a) => { b = x.random(c++), d[c - 1] = d[b], d[b] = a; }), d; }, x.sample = function (a, b, c) { return b == null || c ? (a.length !== +a.length && (a = x.values(a)), a[x.random(a.length - 1)]) : x.shuffle(a).slice(0, Math.max(0, b)); }; const B = function (a) { return a == null ? x.identity : x.isFunction(a) ? a : x.property(a); }; x.sortBy = function (a, b, c) { return b = B(b), x.pluck(x.map(a, (a, d, e) => ({ value: a, index: d, criteria: b.call(c, a, d, e) })).sort((a, b) => { const c = a.criteria; const d = b.criteria; if (c !== d) { if (c > d || void 0 === c) return 1; if (d > c || void 0 === d) return -1; } return a.index - b.index; }), 'value'); }; const C = function (a) { return function (b, c, d) { const e = {}; return c = B(c), y(b, (f, g) => { const h = c.call(d, f, g, b); a(e, h, f); }), e; }; }; x.groupBy = C((a, b, c) => { x.has(a, b) ? a[b].push(c) : a[b] = [c]; }), x.indexBy = C((a, b, c) => { a[b] = c; }), x.countBy = C((a, b) => { x.has(a, b) ? a[b]++ : a[b] = 1; }), x.sortedIndex = function (a, b, c, d) { c = B(c); for (var e = c.call(d, b), f = 0, g = a.length; g > f;) { const h = f + g >>> 1; c.call(d, a[h]) < e ? f = h + 1 : g = h; } return f; }, x.toArray = function (a) { return a ? x.isArray(a) ? h.call(a) : a.length === +a.length ? x.map(a, x.identity) : x.values(a) : []; }, x.size = function (a) { return a == null ? 0 : a.length === +a.length ? a.length : x.keys(a).length; }, x.first = x.head = x.take = function (a, b, c) { return a == null ? void 0 : b == null || c ? a[0] : b < 0 ? [] : h.call(a, 0, b); }, x.initial = function (a, b, c) { return h.call(a, 0, a.length - (b == null || c ? 1 : b)); }, x.last = function (a, b, c) { return a == null ? void 0 : b == null || c ? a[a.length - 1] : h.call(a, Math.max(a.length - b, 0)); }, x.rest = x.tail = x.drop = function (a, b, c) { return h.call(a, b == null || c ? 1 : b); }, x.compact = function (a) { return x.filter(a, x.identity); }; var D = function (a, b, c) { return b && x.every(a, x.isArray) ? i.apply(c, a) : (y(a, (a) => { x.isArray(a) || x.isArguments(a) ? b ? g.apply(c, a) : D(a, b, c) : c.push(a); }), c); }; x.flatten = function (a, b) { return D(a, b, []); }, x.without = function (a) { return x.difference(a, h.call(arguments, 1)); }, x.partition = function (a, b, c) { b = B(b); const d = []; const e = []; return y(a, (a) => { (b.call(c, a) ? d : e).push(a); }), [d, e]; }, x.uniq = x.unique = function (a, b, c, d) { x.isFunction(b) && (d = c, c = b, b = !1); const e = c ? x.map(a, c, d) : a; const f = []; const g = []; return y(e, (c, d) => { (b ? d && g[g.length - 1] === c : x.contains(g, c)) || (g.push(c), f.push(a[d])); }), f; }, x.union = function () { return x.uniq(x.flatten(arguments, !0)); }, x.intersection = function (a) { const b = h.call(arguments, 1); return x.filter(x.uniq(a), (a) => x.every(b, (b) => x.contains(b, a))); }, x.difference = function (a) { const b = i.apply(d, h.call(arguments, 1)); return x.filter(a, (a) => !x.contains(b, a)); }, x.zip = function () { for (var a = x.max(x.pluck(arguments, 'length').concat(0)), b = new Array(a), c = 0; a > c; c++)b[c] = x.pluck(arguments, '' + c); return b; }, x.object = function (a, b) { if (a == null) return {}; for (var c = {}, d = 0, e = a.length; e > d; d++)b ? c[a[d]] = b[d] : c[a[d][0]] = a[d][1]; return c; }, x.indexOf = function (a, b, c) { if (a == null) return -1; let d = 0; const e = a.length; if (c) { if (typeof c !== 'number') return d = x.sortedIndex(a, b), a[d] === b ? d : -1; d = c < 0 ? Math.max(0, e + c) : c; } if (s && a.indexOf === s) return a.indexOf(b, c); for (;e > d; d++) if (a[d] === b) return d; return -1; }, x.lastIndexOf = function (a, b, c) { if (a == null) return -1; const d = c != null; if (t && a.lastIndexOf === t) return d ? a.lastIndexOf(b, c) : a.lastIndexOf(b); for (let e = d ? c : a.length; e--;) if (a[e] === b) return e; return -1; }, x.range = function (a, b, c) { arguments.length <= 1 && (b = a || 0, a = 0), c = arguments[2] || 1; for (var d = Math.max(Math.ceil((b - a) / c), 0), e = 0, f = new Array(d); d > e;)f[e++] = a, a += c; return f; }; const E = function () {}; x.bind = function (a, b) { let c; let d; if (w && a.bind === w) return w.apply(a, h.call(arguments, 1)); if (!x.isFunction(a)) throw new TypeError(); return c = h.call(arguments, 2), d = function () { if (!(this instanceof d)) return a.apply(b, c.concat(h.call(arguments))); E.prototype = a.prototype; const e = new E(); E.prototype = null; const f = a.apply(e, c.concat(h.call(arguments))); return Object(f) === f ? f : e; }; }, x.partial = function (a) { const b = h.call(arguments, 1); return function () { for (var c = 0, d = b.slice(), e = 0, f = d.length; f > e; e++)d[e] === x && (d[e] = arguments[c++]); for (;c < arguments.length;)d.push(arguments[c++]); return a.apply(this, d); }; }, x.bindAll = function (a) { const b = h.call(arguments, 1); if (b.length === 0) throw new Error('bindAll must be passed function names'); return y(b, (b) => { a[b] = x.bind(a[b], a); }), a; }, x.memoize = function (a, b) { const c = {}; return b || (b = x.identity), function () { const d = b.apply(this, arguments); return x.has(c, d) ? c[d] : c[d] = a.apply(this, arguments); }; }, x.delay = function (a, b) { const c = h.call(arguments, 2); return setTimeout(() => a.apply(null, c), b); }, x.defer = function (a) { return x.delay.apply(x, [a, 1].concat(h.call(arguments, 1))); }, x.throttle = function (a, b, c) { let d; let e; let f; let g = null; let h = 0; c || (c = {}); const i = function () { h = c.leading === !1 ? 0 : x.now(), g = null, f = a.apply(d, e), d = e = null; }; return function () { const j = x.now(); h || c.leading !== !1 || (h = j); const k = b - (j - h); return d = this, e = arguments, k <= 0 ? (clearTimeout(g), g = null, h = j, f = a.apply(d, e), d = e = null) : g || c.trailing === !1 || (g = setTimeout(i, k)), f; }; }, x.debounce = function (a, b, c) { let d; let e; let f; let g; let h; var i = function () { const j = x.now() - g; b > j ? d = setTimeout(i, b - j) : (d = null, c || (h = a.apply(f, e), f = e = null)); }; return function () { f = this, e = arguments, g = x.now(); const j = c && !d; return d || (d = setTimeout(i, b)), j && (h = a.apply(f, e), f = e = null), h; }; }, x.once = function (a) { let b; let c = !1; return function () { return c ? b : (c = !0, b = a.apply(this, arguments), a = null, b); }; }, x.wrap = function (a, b) { return x.partial(b, a); }, x.compose = function () { const a = arguments; return function () { for (var b = arguments, c = a.length - 1; c >= 0; c--)b = [a[c].apply(this, b)]; return b[0]; }; }, x.after = function (a, b) { return function () { return --a < 1 ? b.apply(this, arguments) : void 0; }; }, x.keys = function (a) { if (!x.isObject(a)) return []; if (v) return v(a); const b = []; for (const c in a)x.has(a, c) && b.push(c); return b; }, x.values = function (a) { for (var b = x.keys(a), c = b.length, d = new Array(c), e = 0; c > e; e++)d[e] = a[b[e]]; return d; }, x.pairs = function (a) { for (var b = x.keys(a), c = b.length, d = new Array(c), e = 0; c > e; e++)d[e] = [b[e], a[b[e]]]; return d; }, x.invert = function (a) { for (var b = {}, c = x.keys(a), d = 0, e = c.length; e > d; d++)b[a[c[d]]] = c[d]; return b; }, x.functions = x.methods = function (a) { const b = []; for (const c in a)x.isFunction(a[c]) && b.push(c); return b.sort(); }, x.extend = function (a) { return y(h.call(arguments, 1), (b) => { if (b) for (const c in b)a[c] = b[c]; }), a; }, x.pick = function (a) { const b = {}; const c = i.apply(d, h.call(arguments, 1)); return y(c, (c) => { c in a && (b[c] = a[c]); }), b; }, x.omit = function (a) { const b = {}; const c = i.apply(d, h.call(arguments, 1)); for (const e in a)x.contains(c, e) || (b[e] = a[e]); return b; }, x.defaults = function (a) { return y(h.call(arguments, 1), (b) => { if (b) for (const c in b) void 0 === a[c] && (a[c] = b[c]); }), a; }, x.clone = function (a) { return x.isObject(a) ? x.isArray(a) ? a.slice() : x.extend({}, a) : a; }, x.tap = function (a, b) { return b(a), a; }; var F = function (a, b, c, d) { if (a === b) return a !== 0 || 1 / a == 1 / b; if (a == null || b == null) return a === b; a instanceof x && (a = a._wrapped), b instanceof x && (b = b._wrapped); const e = j.call(a); if (e != j.call(b)) return !1; switch (e) { case '[object String]': return a == String(b); case '[object Number]': return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b; case '[object Date]': case '[object Boolean]': return +a == +b; case '[object RegExp]': return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase; } if (typeof a !== 'object' || typeof b !== 'object') return !1; for (let f = c.length; f--;) if (c[f] == a) return d[f] == b; const g = a.constructor; const h = b.constructor; if (g !== h && !(x.isFunction(g) && g instanceof g && x.isFunction(h) && h instanceof h) && 'constructor' in a && 'constructor' in b) return !1; c.push(a), d.push(b); let i = 0; let k = !0; if (e == '[object Array]') { if (i = a.length, k = i == b.length) for (;i-- && (k = F(a[i], b[i], c, d));); } else { for (var l in a) if (x.has(a, l) && (i++, !(k = x.has(b, l) && F(a[l], b[l], c, d)))) break; if (k) { for (l in b) if (x.has(b, l) && !i--) break; k = !i; } } return c.pop(), d.pop(), k; }; x.isEqual = function (a, b) { return F(a, b, [], []); }, x.isEmpty = function (a) { if (a == null) return !0; if (x.isArray(a) || x.isString(a)) return a.length === 0; for (const b in a) if (x.has(a, b)) return !1; return !0; }, x.isElement = function (a) { return !(!a || a.nodeType !== 1); }, x.isArray = u || function (a) { return j.call(a) == '[object Array]'; }, x.isObject = function (a) { return a === Object(a); }, y(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], (a) => { x['is' + a] = function (b) { return j.call(b) == '[object ' + a + ']'; }; }), x.isArguments(arguments) || (x.isArguments = function (a) { return !(!a || !x.has(a, 'callee')); }), typeof /./ !== 'function' && (x.isFunction = function (a) { return typeof a === 'function'; }), x.isFinite = function (a) { return isFinite(a) && !isNaN(parseFloat(a)); }, x.isNaN = function (a) { return x.isNumber(a) && a != +a; }, x.isBoolean = function (a) { return a === !0 || a === !1 || j.call(a) == '[object Boolean]'; }, x.isNull = function (a) { return a === null; }, x.isUndefined = function (a) { return void 0 === a; }, x.has = function (a, b) { return k.call(a, b); }, x.noConflict = function () { return a._ = b, this; }, x.identity = function (a) { return a; }, x.constant = function (a) { return function () { return a; }; }, x.property = function (a) { return function (b) { return b[a]; }; }, x.matches = function (a) { return function (b) { if (b === a) return !0; for (const c in a) if (a[c] !== b[c]) return !1; return !0; }; }, x.times = function (a, b, c) { for (var d = Array(Math.max(0, a)), e = 0; a > e; e++)d[e] = b.call(c, e); return d; }, x.random = function (a, b) { return b == null && (b = a, a = 0), a + Math.floor(Math.random() * (b - a + 1)); }, x.now = Date.now || function () { return (new Date()).getTime(); }; const G = {
    escape: {
      '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#x27;'
    }
  }; G.unescape = x.invert(G.escape); const H = { escape: new RegExp('[' + x.keys(G.escape).join('') + ']', 'g'), unescape: new RegExp('(' + x.keys(G.unescape).join('|') + ')', 'g') }; x.each(['escape', 'unescape'], (a) => { x[a] = function (b) { return b == null ? '' : ('' + b).replace(H[a], (b) => G[a][b]); }; }), x.result = function (a, b) { if (a == null) return void 0; const c = a[b]; return x.isFunction(c) ? c.call(a) : c; }, x.mixin = function (a) { y(x.functions(a), (b) => { const c = x[b] = a[b]; x.prototype[b] = function () { const a = [this._wrapped]; return g.apply(a, arguments), M.call(this, c.apply(x, a)); }; }); }; let I = 0; x.uniqueId = function (a) { const b = ++I + ''; return a ? a + b : b; }, x.templateSettings = { evaluate: /<%([\s\S]+?)%>/g, interpolate: /<%=([\s\S]+?)%>/g, escape: /<%-([\s\S]+?)%>/g }; const J = /(.)^/; const K = {
    "'": "'", '\\': '\\', '\r': 'r', '\n': 'n', '	': 't', '\u2028': 'u2028', '\u2029': 'u2029'
  }; const L = /\\|'|\r|\n|\t|\u2028|\u2029/g; x.template = function (a, b, c) { let d; c = x.defaults({}, c, x.templateSettings); const e = new RegExp([(c.escape || J).source, (c.interpolate || J).source, (c.evaluate || J).source].join('|') + '|$', 'g'); let f = 0; let g = "__p+='"; a.replace(e, (b, c, d, e, h) => (g += a.slice(f, h).replace(L, (a) => '\\' + K[a]), c && (g += "'+\n((__t=(" + c + "))==null?'':_.escape(__t))+\n'"), d && (g += "'+\n((__t=(" + d + "))==null?'':__t)+\n'"), e && (g += "';\n" + e + "\n__p+='"), f = h + b.length, b)), g += "';\n", c.variable || (g = 'with(obj||{}){\n' + g + '}\n'), g = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + g + 'return __p;\n'; try { d = new Function(c.variable || 'obj', '_', g); } catch (h) { throw h.source = g, h; } if (b) return d(b, x); const i = function (a) { return d.call(this, a, x); }; return i.source = 'function(' + (c.variable || 'obj') + '){\n' + g + '}', i; }, x.chain = function (a) { return x(a).chain(); }; var M = function (a) { return this._chain ? x(a).chain() : a; }; x.mixin(x), y(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], (a) => { const b = d[a]; x.prototype[a] = function () { const c = this._wrapped; return b.apply(c, arguments), a != 'shift' && a != 'splice' || c.length !== 0 || delete c[0], M.call(this, c); }; }), y(['concat', 'join', 'slice'], (a) => { const b = d[a]; x.prototype[a] = function () { return M.call(this, b.apply(this._wrapped, arguments)); }; }), x.extend(x.prototype, { chain() { return this._chain = !0, this; }, value() { return this._wrapped; } }), typeof define === 'function' && define.amd && define('underscore', [], () => x);
}).call(this), function () {
  let a; const b = this; const c = b.Backbone; const d = []; const e = (d.push, d.slice); d.splice; a = typeof exports !== 'undefined' ? exports : b.Backbone = {}, a.VERSION = '1.1.0'; let f = b._; f || typeof require === 'undefined' || (f = require('underscore')), a.$ = b.jQuery || b.Zepto || b.ender || b.$, a.noConflict = function () { return b.Backbone = c, this; }, a.emulateHTTP = !1, a.emulateJSON = !1; const g = a.Events = {
    on(a, b, c) { if (!i(this, 'on', a, [b, c]) || !b) return this; this._events || (this._events = {}); const d = this._events[a] || (this._events[a] = []); return d.push({ callback: b, context: c, ctx: c || this }), this; }, once(a, b, c) { if (!i(this, 'once', a, [b, c]) || !b) return this; const d = this; var e = f.once(function () { d.off(a, e), b.apply(this, arguments); }); return e._callback = b, this.on(a, e, c); }, off(a, b, c) { let d; let e; let g; let h; let j; let k; let l; let m; if (!this._events || !i(this, 'off', a, [b, c])) return this; if (!a && !b && !c) return this._events = {}, this; for (h = a ? [a] : f.keys(this._events), j = 0, k = h.length; k > j; j++) if (a = h[j], g = this._events[a]) { if (this._events[a] = d = [], b || c) for (l = 0, m = g.length; m > l; l++)e = g[l], (b && b !== e.callback && b !== e.callback._callback || c && c !== e.context) && d.push(e); d.length || delete this._events[a]; } return this; }, trigger(a) { if (!this._events) return this; const b = e.call(arguments, 1); if (!i(this, 'trigger', a, b)) return this; const c = this._events[a]; const d = this._events.all; return c && j(c, b), d && j(d, arguments), this; }, stopListening(a, b, c) { let d = this._listeningTo; if (!d) return this; const e = !b && !c; c || typeof b !== 'object' || (c = this), a && ((d = {})[a._listenId] = a); for (const g in d)a = d[g], a.off(b, c, this), (e || f.isEmpty(a._events)) && delete this._listeningTo[g]; return this; }
  }; const h = /\s+/; var i = function (a, b, c, d) { if (!c) return !0; if (typeof c === 'object') { for (const e in c)a[b].apply(a, [e, c[e]].concat(d)); return !1; } if (h.test(c)) { for (let f = c.split(h), g = 0, i = f.length; i > g; g++)a[b].apply(a, [f[g]].concat(d)); return !1; } return !0; }; var j = function (a, b) { let c; let d = -1; const e = a.length; const f = b[0]; const g = b[1]; const h = b[2]; switch (b.length) { case 0: for (;++d < e;)(c = a[d]).callback.call(c.ctx); return; case 1: for (;++d < e;)(c = a[d]).callback.call(c.ctx, f); return; case 2: for (;++d < e;)(c = a[d]).callback.call(c.ctx, f, g); return; case 3: for (;++d < e;)(c = a[d]).callback.call(c.ctx, f, g, h); return; default: for (;++d < e;)(c = a[d]).callback.apply(c.ctx, b); } }; const k = { listenTo: 'on', listenToOnce: 'once' }; f.each(k, (a, b) => { g[b] = function (b, c, d) { const e = this._listeningTo || (this._listeningTo = {}); const g = b._listenId || (b._listenId = f.uniqueId('l')); return e[g] = b, d || typeof c !== 'object' || (d = this), b[a](c, d, this), this; }; }), g.bind = g.on, g.unbind = g.off, f.extend(a, g); const l = a.Model = function (a, b) { let c = a || {}; b || (b = {}), this.cid = f.uniqueId('c'), this.attributes = {}, b.collection && (this.collection = b.collection), b.parse && (c = this.parse(c, b) || {}), c = f.defaults({}, c, f.result(this, 'defaults')), this.set(c, b), this.changed = {}, this.initialize.apply(this, arguments); }; f.extend(l.prototype, g, {
    changed: null, validationError: null, idAttribute: 'id', initialize() {}, toJSON(a) { return f.clone(this.attributes); }, sync() { return a.sync.apply(this, arguments); }, get(a) { return this.attributes[a]; }, escape(a) { return f.escape(this.get(a)); }, has(a) { return this.get(a) != null; }, set(a, b, c) { let d; let e; let g; let h; let i; let j; let k; let l; if (a == null) return this; if (typeof a === 'object' ? (e = a, c = b) : (e = {})[a] = b, c || (c = {}), !this._validate(e, c)) return !1; g = c.unset, i = c.silent, h = [], j = this._changing, this._changing = !0, j || (this._previousAttributes = f.clone(this.attributes), this.changed = {}), l = this.attributes, k = this._previousAttributes, this.idAttribute in e && (this.id = e[this.idAttribute]); for (d in e)b = e[d], f.isEqual(l[d], b) || h.push(d), f.isEqual(k[d], b) ? delete this.changed[d] : this.changed[d] = b, g ? delete l[d] : l[d] = b; if (!i) { h.length && (this._pending = !0); for (let m = 0, n = h.length; n > m; m++) this.trigger('change:' + h[m], this, l[h[m]], c); } if (j) return this; if (!i) for (;this._pending;) this._pending = !1, this.trigger('change', this, c); return this._pending = !1, this._changing = !1, this; }, unset(a, b) { return this.set(a, void 0, f.extend({}, b, { unset: !0 })); }, clear(a) { const b = {}; for (const c in this.attributes)b[c] = void 0; return this.set(b, f.extend({}, a, { unset: !0 })); }, hasChanged(a) { return a == null ? !f.isEmpty(this.changed) : f.has(this.changed, a); }, changedAttributes(a) { if (!a) return this.hasChanged() ? f.clone(this.changed) : !1; let b; let c = !1; const d = this._changing ? this._previousAttributes : this.attributes; for (const e in a)f.isEqual(d[e], b = a[e]) || ((c || (c = {}))[e] = b); return c; }, previous(a) { return a != null && this._previousAttributes ? this._previousAttributes[a] : null; }, previousAttributes() { return f.clone(this._previousAttributes); }, fetch(a) { a = a ? f.clone(a) : {}, void 0 === a.parse && (a.parse = !0); const b = this; const c = a.success; return a.success = function (d) { return b.set(b.parse(d, a), a) ? (c && c(b, d, a), void b.trigger('sync', b, d, a)) : !1; }, K(this, a), this.sync('read', this, a); }, save(a, b, c) { let d; let e; let g; const h = this.attributes; if (a == null || typeof a === 'object' ? (d = a, c = b) : (d = {})[a] = b, c = f.extend({ validate: !0 }, c), d && !c.wait) { if (!this.set(d, c)) return !1; } else if (!this._validate(d, c)) return !1; d && c.wait && (this.attributes = f.extend({}, h, d)), void 0 === c.parse && (c.parse = !0); const i = this; const j = c.success; return c.success = function (a) { i.attributes = h; let b = i.parse(a, c); return c.wait && (b = f.extend(d || {}, b)), f.isObject(b) && !i.set(b, c) ? !1 : (j && j(i, a, c), void i.trigger('sync', i, a, c)); }, K(this, c), e = this.isNew() ? 'create' : c.patch ? 'patch' : 'update', e === 'patch' && (c.attrs = d), g = this.sync(e, this, c), d && c.wait && (this.attributes = h), g; }, destroy(a) { a = a ? f.clone(a) : {}; const b = this; const c = a.success; const d = function () { b.trigger('destroy', b, b.collection, a); }; if (a.success = function (e) { (a.wait || b.isNew()) && d(), c && c(b, e, a), b.isNew() || b.trigger('sync', b, e, a); }, this.isNew()) return a.success(), !1; K(this, a); const e = this.sync('delete', this, a); return a.wait || d(), e; }, url() { const a = f.result(this, 'urlRoot') || f.result(this.collection, 'url') || J(); return this.isNew() ? a : a + (a.charAt(a.length - 1) === '/' ? '' : '/') + encodeURIComponent(this.id); }, parse(a, b) { return a; }, clone() { return new this.constructor(this.attributes); }, isNew() { return this.id == null; }, isValid(a) { return this._validate({}, f.extend(a || {}, { validate: !0 })); }, _validate(a, b) { if (!b.validate || !this.validate) return !0; a = f.extend({}, this.attributes, a); const c = this.validationError = this.validate(a, b) || null; return c ? (this.trigger('invalid', this, c, f.extend(b, { validationError: c })), !1) : !0; }
  }); const m = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit']; f.each(m, (a) => { l.prototype[a] = function () { const b = e.call(arguments); return b.unshift(this.attributes), f[a].apply(f, b); }; }); const n = a.Collection = function (a, b) { b || (b = {}), b.model && (this.model = b.model), void 0 !== b.comparator && (this.comparator = b.comparator), this._reset(), this.initialize.apply(this, arguments), a && this.reset(a, f.extend({ silent: !0 }, b)); }; const o = { add: !0, remove: !0, merge: !0 }; const p = { add: !0, remove: !1 }; f.extend(n.prototype, g, {
    model: l, initialize() {}, toJSON(a) { return this.map((b) => b.toJSON(a)); }, sync() { return a.sync.apply(this, arguments); }, add(a, b) { return this.set(a, f.extend({ merge: !1 }, b, p)); }, remove(a, b) { const c = !f.isArray(a); a = c ? [a] : f.clone(a), b || (b = {}); let d; let e; let g; let h; for (d = 0, e = a.length; e > d; d++)h = a[d] = this.get(a[d]), h && (delete this._byId[h.id], delete this._byId[h.cid], g = this.indexOf(h), this.models.splice(g, 1), this.length--, b.silent || (b.index = g, h.trigger('remove', h, this, b)), this._removeReference(h)); return c ? a[0] : a; }, set(a, b) { b = f.defaults({}, b, o), b.parse && (a = this.parse(a, b)); const c = !f.isArray(a); a = c ? a ? [a] : [] : f.clone(a); let d; let e; let g; let h; let i; let j; let k; const m = b.at; const n = this.model; const p = this.comparator && m == null && b.sort !== !1; const q = f.isString(this.comparator) ? this.comparator : null; const r = []; const s = []; const t = {}; const u = b.add; const v = b.merge; const w = b.remove; const x = !p && u && w ? [] : !1; for (d = 0, e = a.length; e > d; d++) { if (i = a[d], g = i instanceof l ? h = i : i[n.prototype.idAttribute], j = this.get(g))w && (t[j.cid] = !0), v && (i = i === h ? h.attributes : i, b.parse && (i = j.parse(i, b)), j.set(i, b), p && !k && j.hasChanged(q) && (k = !0)), a[d] = j; else if (u) { if (h = a[d] = this._prepareModel(i, b), !h) continue; r.push(h), h.on('all', this._onModelEvent, this), this._byId[h.cid] = h, h.id != null && (this._byId[h.id] = h); }x && x.push(j || h); } if (w) { for (d = 0, e = this.length; e > d; ++d)t[(h = this.models[d]).cid] || s.push(h); s.length && this.remove(s, b); } if (r.length || x && x.length) if (p && (k = !0), this.length += r.length, m != null) for (d = 0, e = r.length; e > d; d++) this.models.splice(m + d, 0, r[d]); else { x && (this.models.length = 0); const y = x || r; for (d = 0, e = y.length; e > d; d++) this.models.push(y[d]); } if (k && this.sort({ silent: !0 }), !b.silent) { for (d = 0, e = r.length; e > d; d++)(h = r[d]).trigger('add', h, this, b); (k || x && x.length) && this.trigger('sort', this, b); } return c ? a[0] : a; }, reset(a, b) { b || (b = {}); for (let c = 0, d = this.models.length; d > c; c++) this._removeReference(this.models[c]); return b.previousModels = this.models, this._reset(), a = this.add(a, f.extend({ silent: !0 }, b)), b.silent || this.trigger('reset', this, b), a; }, push(a, b) { return this.add(a, f.extend({ at: this.length }, b)); }, pop(a) { const b = this.at(this.length - 1); return this.remove(b, a), b; }, unshift(a, b) { return this.add(a, f.extend({ at: 0 }, b)); }, shift(a) { const b = this.at(0); return this.remove(b, a), b; }, slice() { return e.apply(this.models, arguments); }, get(a) { return a == null ? void 0 : this._byId[a.id] || this._byId[a.cid] || this._byId[a]; }, at(a) { return this.models[a]; }, where(a, b) { return f.isEmpty(a) ? b ? void 0 : [] : this[b ? 'find' : 'filter']((b) => { for (const c in a) if (a[c] !== b.get(c)) return !1; return !0; }); }, findWhere(a) { return this.where(a, !0); }, sort(a) { if (!this.comparator) throw new Error('Cannot sort a set without a comparator'); return a || (a = {}), f.isString(this.comparator) || this.comparator.length === 1 ? this.models = this.sortBy(this.comparator, this) : this.models.sort(f.bind(this.comparator, this)), a.silent || this.trigger('sort', this, a), this; }, pluck(a) { return f.invoke(this.models, 'get', a); }, fetch(a) { a = a ? f.clone(a) : {}, void 0 === a.parse && (a.parse = !0); const b = a.success; const c = this; return a.success = function (d) { const e = a.reset ? 'reset' : 'set'; c[e](d, a), b && b(c, d, a), c.trigger('sync', c, d, a); }, K(this, a), this.sync('read', this, a); }, create(a, b) { if (b = b ? f.clone(b) : {}, !(a = this._prepareModel(a, b))) return !1; b.wait || this.add(a, b); const c = this; const d = b.success; return b.success = function (a, b, e) { e.wait && c.add(a, e), d && d(a, b, e); }, a.save(null, b), a; }, parse(a, b) { return a; }, clone() { return new this.constructor(this.models); }, _reset() { this.length = 0, this.models = [], this._byId = {}; }, _prepareModel(a, b) { if (a instanceof l) return a.collection || (a.collection = this), a; b = b ? f.clone(b) : {}, b.collection = this; const c = new this.model(a, b); return c.validationError ? (this.trigger('invalid', this, c.validationError, b), !1) : c; }, _removeReference(a) { this === a.collection && delete a.collection, a.off('all', this._onModelEvent, this); }, _onModelEvent(a, b, c, d) { (a !== 'add' && a !== 'remove' || c === this) && (a === 'destroy' && this.remove(b, d), b && a === 'change:' + b.idAttribute && (delete this._byId[b.previous(b.idAttribute)], b.id != null && (this._byId[b.id] = b)), this.trigger.apply(this, arguments)); }
  }); const q = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl', 'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select', 'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke', 'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest', 'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle', 'lastIndexOf', 'isEmpty', 'chain']; f.each(q, (a) => { n.prototype[a] = function () { const b = e.call(arguments); return b.unshift(this.models), f[a].apply(f, b); }; }); const r = ['groupBy', 'countBy', 'sortBy']; f.each(r, (a) => { n.prototype[a] = function (b, c) { const d = f.isFunction(b) ? b : function (a) { return a.get(b); }; return f[a](this.models, d, c); }; }); const s = a.View = function (a) { this.cid = f.uniqueId('view'), a || (a = {}), f.extend(this, f.pick(a, u)), this._ensureElement(), this.initialize.apply(this, arguments), this.delegateEvents(); }; const t = /^(\S+)\s*(.*)$/; var u = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events']; f.extend(s.prototype, g, {
    tagName: 'div', $(a) { return this.$el.find(a); }, initialize() {}, render() { return this; }, remove() { return this.$el.remove(), this.stopListening(), this; }, setElement(b, c) { return this.$el && this.undelegateEvents(), this.$el = b instanceof a.$ ? b : a.$(b), this.el = this.$el[0], c !== !1 && this.delegateEvents(), this; }, delegateEvents(a) { if (!a && !(a = f.result(this, 'events'))) return this; this.undelegateEvents(); for (const b in a) { let c = a[b]; if (f.isFunction(c) || (c = this[a[b]]), c) { const d = b.match(t); let e = d[1]; const g = d[2]; c = f.bind(c, this), e += '.delegateEvents' + this.cid, g === '' ? this.$el.on(e, c) : this.$el.on(e, g, c); } } return this; }, undelegateEvents() { return this.$el.off('.delegateEvents' + this.cid), this; }, _ensureElement() { if (this.el) this.setElement(f.result(this, 'el'), !1); else { const b = f.extend({}, f.result(this, 'attributes')); this.id && (b.id = f.result(this, 'id')), this.className && (b.class = f.result(this, 'className')); const c = a.$('<' + f.result(this, 'tagName') + '>').attr(b); this.setElement(c, !1); } }
  }), a.sync = function (b, c, d) { const e = w[b]; f.defaults(d || (d = {}), { emulateHTTP: a.emulateHTTP, emulateJSON: a.emulateJSON }); const g = { type: e, dataType: 'json' }; if (d.url || (g.url = f.result(c, 'url') || J()), d.data != null || !c || b !== 'create' && b !== 'update' && b !== 'patch' || (g.contentType = 'application/json', g.data = JSON.stringify(d.attrs || c.toJSON(d))), d.emulateJSON && (g.contentType = 'application/x-www-form-urlencoded', g.data = g.data ? { model: g.data } : {}), d.emulateHTTP && (e === 'PUT' || e === 'DELETE' || e === 'PATCH')) { g.type = 'POST', d.emulateJSON && (g.data._method = e); const h = d.beforeSend; d.beforeSend = function (a) { return a.setRequestHeader('X-HTTP-Method-Override', e), h ? h.apply(this, arguments) : void 0; }; }g.type === 'GET' || d.emulateJSON || (g.processData = !1), g.type === 'PATCH' && v && (g.xhr = function () { return new ActiveXObject('Microsoft.XMLHTTP'); }); const i = d.xhr = a.ajax(f.extend(g, d)); return c.trigger('request', c, i, d), i; }; var v = !(typeof window === 'undefined' || !window.ActiveXObject || window.XMLHttpRequest && (new XMLHttpRequest()).dispatchEvent); var w = {
    create: 'POST', update: 'PUT', patch: 'PATCH', delete: 'DELETE', read: 'GET'
  }; a.ajax = function () { return a.$.ajax.apply(a.$, arguments); }; const x = a.Router = function (a) { a || (a = {}), a.routes && (this.routes = a.routes), this._bindRoutes(), this.initialize.apply(this, arguments); }; const y = /\((.*?)\)/g; const z = /(\(\?)?:\w+/g; const A = /\*\w+/g; const B = /[\-{}\[\]+?.,\\\^$|#\s]/g; f.extend(x.prototype, g, {
    initialize() {}, route(b, c, d) { f.isRegExp(b) || (b = this._routeToRegExp(b)), f.isFunction(c) && (d = c, c = ''), d || (d = this[c]); const e = this; return a.history.route(b, (f) => { const g = e._extractParameters(b, f); d && d.apply(e, g), e.trigger.apply(e, ['route:' + c].concat(g)), e.trigger('route', c, g), a.history.trigger('route', e, c, g); }), this; }, navigate(b, c) { return a.history.navigate(b, c), this; }, _bindRoutes() { if (this.routes) { this.routes = f.result(this, 'routes'); for (var a, b = f.keys(this.routes); (a = b.pop()) != null;) this.route(a, this.routes[a]); } }, _routeToRegExp(a) { return a = a.replace(B, '\\$&').replace(y, '(?:$1)?').replace(z, (a, b) => (b ? a : '([^/]+)')).replace(A, '(.*?)'), new RegExp('^' + a + '$'); }, _extractParameters(a, b) { const c = a.exec(b).slice(1); return f.map(c, (a) => (a ? decodeURIComponent(a) : null)); }
  }); const C = a.History = function () { this.handlers = [], f.bindAll(this, 'checkUrl'), typeof window !== 'undefined' && (this.location = window.location, this.history = window.history); }; const D = /^[#\/]|\s+$/g; const E = /^\/+|\/+$/g; const F = /msie [\w.]+/; const G = /\/$/; const H = /[?#].*$/; C.started = !1, f.extend(C.prototype, g, {
    interval: 50, getHash(a) { const b = (a || this).location.href.match(/#(.*)$/); return b ? b[1] : ''; }, getFragment(a, b) { if (a == null) if (this._hasPushState || !this._wantsHashChange || b) { a = this.location.pathname; const c = this.root.replace(G, ''); a.indexOf(c) || (a = a.slice(c.length)); } else a = this.getHash(); return a.replace(D, ''); }, start(b) { if (C.started) throw new Error('Backbone.history has already been started'); C.started = !0, this.options = f.extend({ root: '/' }, this.options, b), this.root = this.options.root, this._wantsHashChange = this.options.hashChange !== !1, this._wantsPushState = !!this.options.pushState, this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState); const c = this.getFragment(); const d = document.documentMode; const e = F.exec(navigator.userAgent.toLowerCase()) && (!d || d <= 7); this.root = ('/' + this.root + '/').replace(E, '/'), e && this._wantsHashChange && (this.iframe = a.$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo('body')[0].contentWindow, this.navigate(c)), this._hasPushState ? a.$(window).on('popstate', this.checkUrl) : this._wantsHashChange && 'onhashchange' in window && !e ? a.$(window).on('hashchange', this.checkUrl) : this._wantsHashChange && (this._checkUrlInterval = setInterval(this.checkUrl, this.interval)), this.fragment = c; const g = this.location; const h = g.pathname.replace(/[^\/]$/, '$&/') === this.root; if (this._wantsHashChange && this._wantsPushState) { if (!this._hasPushState && !h) return this.fragment = this.getFragment(null, !0), this.location.replace(this.root + this.location.search + '#' + this.fragment), !0; this._hasPushState && h && g.hash && (this.fragment = this.getHash().replace(D, ''), this.history.replaceState({}, document.title, this.root + this.fragment + g.search)); } return this.options.silent ? void 0 : this.loadUrl(); }, stop() { a.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl), clearInterval(this._checkUrlInterval), C.started = !1; }, route(a, b) { this.handlers.unshift({ route: a, callback: b }); }, checkUrl(a) { let b = this.getFragment(); return b === this.fragment && this.iframe && (b = this.getFragment(this.getHash(this.iframe))), b === this.fragment ? !1 : (this.iframe && this.navigate(b), void this.loadUrl()); }, loadUrl(a) { return a = this.fragment = this.getFragment(a), f.any(this.handlers, (b) => (b.route.test(a) ? (b.callback(a), !0) : void 0)); }, navigate(a, b) { if (!C.started) return !1; b && b !== !0 || (b = { trigger: !!b }); let c = this.root + (a = this.getFragment(a || '')); if (a = a.replace(H, ''), this.fragment !== a) { if (this.fragment = a, a === '' && c !== '/' && (c = c.slice(0, -1)), this._hasPushState) this.history[b.replace ? 'replaceState' : 'pushState']({}, document.title, c); else { if (!this._wantsHashChange) return this.location.assign(c); this._updateHash(this.location, a, b.replace), this.iframe && a !== this.getFragment(this.getHash(this.iframe)) && (b.replace || this.iframe.document.open().close(), this._updateHash(this.iframe.location, a, b.replace)); } return b.trigger ? this.loadUrl(a) : void 0; } }, _updateHash(a, b, c) { if (c) { const d = a.href.replace(/(javascript:|#).*$/, ''); a.replace(d + '#' + b); } else a.hash = '#' + b; }
  }), a.history = new C(); const I = function (a, b) { let c; const d = this; c = a && f.has(a, 'constructor') ? a.constructor : function () { return d.apply(this, arguments); }, f.extend(c, d, b); const e = function () { this.constructor = c; }; return e.prototype = d.prototype, c.prototype = new e(), a && f.extend(c.prototype, a), c.__super__ = d.prototype, c; }; l.extend = n.extend = x.extend = s.extend = C.extend = I; var J = function () {}; var K = function (a, b) { const c = b.error; b.error = function (d) { c && c(a, d, b), a.trigger('error', a, d, b); }; };
}.call(this); var µ = (function () {
  function a(a) { return !!a; } function b(a) { return a !== null && void 0 !== a; } function c(a, c) { return b(a) ? a : c; } function d(a, b) { const c = a - b * Math.floor(a / b); return c === b ? 0 : c; } function e(a, b) { const c = b[0] - a[0]; const d = b[1] - a[1]; return Math.sqrt(c * c + d * d); } function f(a, b, c) { return Math.max(b, Math.min(a, c)); } function g(a, b, c) { return (µ.clamp(a, b, c) - b) / (c - b); } function h(a, b, c) { return a * (c - b) + b; } function i(a, b) { const c = a.toString(); const d = Math.max(b - c.length, 0); return new Array(d + 1).join('0') + c; } function j(a) { return a.length === 0 ? a : a.charAt(0).toUpperCase() + a.substr(1); } function k() { return /firefox/i.test(navigator.userAgent); } function l() { return /android|blackberry|iemobile|ipad|iphone|ipod|opera mini|webos/i.test(navigator.userAgent); } function m() { return window != window.top; } function n(a) { return a.getUTCFullYear() + '-' + i(a.getUTCMonth() + 1, 2) + '-' + i(a.getUTCDate(), 2) + ' ' + i(a.getUTCHours(), 2) + ':00'; } function o(a) { return a.getFullYear() + '-' + i(a.getMonth() + 1, 2) + '-' + i(a.getDate(), 2) + ' ' + i(a.getHours(), 2) + ':00'; } function p(a, b, c) { if (!b) return a.substr(0, 4) + c + a.substr(4, 2) + c + a.substr(6, 2); const d = a.substr(0, 10).split(b); return [d[0], d[1], d[2]].join(c); } function q(a, b) { return p(a.toISOString(), '-', b || ''); } function r(a) { return { date: µ.dateToUTCymd(a, '/'), hour: µ.zeroPad(a.getUTCHours(), 2) + '00' }; } function s() {
    function a(a) { return a && a.stack ? a + '\n' + a.stack : a; } return {
      debug(b) { console && console.log && console.log(a(b)); }, info(b) { console && console.info && console.info(a(b)); }, error(b) { console && console.error && console.error(a(b)); }, time(b) { console && console.time && console.time(a(b)); }, timeEnd(b) { console && console.timeEnd && console.timeEnd(a(b)); }
    };
  } function t() { const a = window; const b = document && document.documentElement; const c = document && document.getElementsByTagName('body')[0]; const d = a.innerWidth || b.clientWidth || c.clientWidth; const e = a.innerHeight || b.clientHeight || c.clientHeight; return { width: d, height: e }; } function u(a) { for (;a.firstChild;)a.removeChild(a.firstChild); } function v(a) { return a.getContext('2d').clearRect(0, 0, a.width, a.height), a; } function w(a, b) { const c = a[0]; const d = a[1]; const e = a[2]; const f = b[0] - c; const g = b[1] - d; const h = b[2] - e; return function (a, b) { return [Math.floor(c + a * f), Math.floor(d + a * g), Math.floor(e + a * h), b]; }; } function x(a, b) { let c = a * M * 5 / 6; c *= 0.75; const d = Math.sin(c); const e = Math.cos(c); const f = Math.floor(255 * Math.max(0, -e)); const g = Math.floor(255 * Math.max(d, 0)); const h = Math.floor(255 * Math.max(e, 0, -d)); return [f, g, h, b]; } function y(a, b) { return Q >= a ? x(a / Q, b) : R((a - Q) / (1 - Q), b); } function z(a, b, c, d) { return 'rgba(' + a + ', ' + b + ', ' + c + ', ' + d + ')'; } function A(a, b) { for (var c = [], d = 85; d <= 255; d += a)c.push(z(d, d, d, 1)); return c.indexFor = function (a) { return Math.floor(Math.min(a, b) / b * (c.length - 1)); }, c; } function B(a, b, c, d) { const e = new C(a, b, c); return e[d]; } function C(a, b, c) { startRGB = this.colorRgb(a), startR = startRGB[0], startG = startRGB[1], startB = startRGB[2], endRGB = this.colorRgb(b), endR = endRGB[0], endG = endRGB[1], endB = endRGB[2], sR = (endR - startR) / c, sG = (endG - startG) / c, sB = (endB - startB) / c; for (var d = [], e = 0; c > e; e++) { const f = this.colorHex('rgb(' + parseInt(sR * e + startR) + ',' + parseInt(sG * e + startG) + ',' + parseInt(sB * e + startB) + ')'); d.push(f); } return d; } function D(a) { for (var b = [], c = [], d = [], e = 0; e < a.length - 1; e++)b.push(a[e + 1][0]), c.push(w(a[e][1], a[e + 1][1])), d.push([a[e][0], a[e + 1][0]]); return function (a, e) { let f; for (f = 0; f < b.length - 1 && !(a <= b[f]); f++);const g = d[f]; return c[f](µ.proportion(a, g[0], g[1]), e); }; } function E(a, b) { return Math.abs(b).toFixed(2) + '° ' + (b >= 0 ? 'N' : 'S') + ', ' + Math.abs(a).toFixed(2) + '° ' + (a >= 0 ? 'E' : 'W'); } function F(a, b) { return b.conversion(a).toFixed(b.precision); } function G(a, b) { const c = Math.atan2(-a[0], -a[1]) / M * 360; const d = 5 * Math.round((c + 360) % 360 / 5); return d.toFixed(0) + '° @ ' + F(a[2], b); } function H(a) { const b = when.defer(); return d3.json(a, (c, d) => (c ? c.status ? b.reject({ status: c.status, message: c.statusText, resource: a }) : b.reject({ status: -1, message: 'Cannot load resource: ' + a, resource: a }) : b.resolve(d))), b.promise; } function I(a, b, c, d, e) { const f = b < 0 ? N : -N; const g = c < 0 ? N : -N; const h = a([b + f, c]); const i = a([b, c + g]); const j = Math.cos(c / 360 * M); return [(h[0] - d) / f / j, (h[1] - e) / f / j, (i[0] - d) / g, (i[1] - e) / g]; } function J(a) { function b() { return function a() { return a.requested = !0, f; }; } function c(a, b) { function c(b) { return a.requested ? null : _.isFunction(i) ? i.apply(f, b) : i; } function e(b) { a.requested || (d = b, f.trigger('update', b, f)); } function g(b) { a.requested || f.trigger('reject', b, f); } function h(a) { f.trigger('fail', a, f); } try { var i = b[0]; when.all(_.rest(b)).then(c).then(e, g).done(void 0, h), f.trigger('submit', f); } catch (j) { h(j); } } var d = a; const e = _.debounce(c, 0); var f = { value() { return d; }, cancel: b(), submit(a, c, d, f) { return this.cancel(), e(this.cancel = b(), arguments), this; } }; return _.extend(f, Backbone.Events); } function K(a, d, e) {
    let f; let g = {}; const h = /^(current|(\d{4})\/(\d{1,2})\/(\d{1,2})\/(\d{3,4})Z)\/(\w+)\/(\w+)\/(\w+)([\/].+)?/.exec(a); if (h) {
      const j = h[1] === 'current' ? 'current' : h[2] + '/' + i(h[3], 2) + '/' + i(h[4], 2); const k = b(h[5]) ? i(h[5], 4) : ''; g = {
        date: j, hour: k, param: h[6], surface: h[7], level: h[8], projection: 'orthographic', orientation: '', topology: P, overlayType: 'default', showGridPoints: !1
      }, c(h[9], '').split('/').forEach((a) => { (f = /^(\w+)(=([\d\-.,]*))?$/.exec(a)) ? d.has(f[1]) && (g.projection = f[1], g.orientation = c(f[3], '')) : (f = /^overlay=(\w+)$/.exec(a)) ? (e.has(f[1]) || f[1] === 'default') && (g.overlayType = f[1]) : (f = /^grid=(\w+)$/.exec(a)) && f[1] === 'on' && (g.showGridPoints = !0); });
    } return g;
  } function L(a, b) { const c = new S(); return c._projectionNames = a, c._overlayTypes = b, c; } var M = 2 * Math.PI; var N = 36e-6; const O = 'current/wind/surface/level/orthographic'; var P = l() ? 'data/earth-topo-mobile.json?v2' : 'data/earth-topo.json?v2'; var Q = 0.45; var R = w(x(1, 0), [255, 255, 255]); C.prototype.colorRgb = function (a) { const b = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/; var a = a.toLowerCase(); if (a && b.test(a)) { if (a.length === 4) { for (var c = '#', d = 1; d < 4; d += 1)c += a.slice(d, d + 1).concat(a.slice(d, d + 1)); a = c; } for (var e = [], d = 1; d < 7; d += 2)e.push(parseInt('0x' + a.slice(d, d + 2))); return e; } return a; }, C.prototype.colorHex = function (a) { const b = a; const c = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/; if (/^(rgb|RGB)/.test(b)) { for (var d = b.replace(/(?:(|)|rgb|RGB)*/g, '').split(','), e = '#', f = 0; f < d.length; f++) { let g = Number(d[f]).toString(16); g = g < 10 ? '0' + g : g, g === '0' && (g += g), e += g; } return e.length !== 7 && (e = b), e; } if (!c.test(b)) return b; const h = b.replace(/#/, '').split(''); if (h.length === 6) return b; if (h.length === 3) { for (var i = '#', f = 0; f < h.length; f += 1)i += h[f] + h[f]; return i; } }; var S = Backbone.Model.extend({
    id: 0, _ignoreNextHashChangeEvent: !1, _projectionNames: null, _overlayTypes: null, toHash() { const c = this.attributes; const d = c.date === 'current' ? 'current' : c.date + '/' + c.hour + 'Z'; const e = [c.projection, c.orientation].filter(a).join('='); const f = b(c.overlayType) && c.overlayType !== 'default' ? 'overlay=' + c.overlayType : ''; const g = c.showGridPoints ? 'grid=on' : ''; return [d, c.param, c.surface, c.level, f, e, g].filter(a).join('/'); }, sync(a, b, c) { switch (a) { case 'read': if (c.trigger === 'hashchange' && b._ignoreNextHashChangeEvent) return void (b._ignoreNextHashChangeEvent = !1); b.set(K(window.location.hash.substr(1) || O, b._projectionNames, b._overlayTypes)); break; case 'update': b._ignoreNextHashChangeEvent = !0, window.location.hash = b.toHash(); } }
  }); return {
    isTruthy: a, isValue: b, coalesce: c, floorMod: d, distance: e, clamp: f, proportion: g, spread: h, zeroPad: i, capitalize: j, isFF: k, isMobile: l, isEmbeddedInIFrame: m, toUTCISO: n, toLocalISO: o, ymdRedelimit: p, dateToUTCymd: q, dateToConfig: r, log: s, view: t, removeChildren: u, clearCanvas: v, sinebowColor: x, extendedSinebowColor: y, windIntensityColorScale: A, segmentedColorScale: D, formatCoordinates: E, formatScalar: F, formatVector: G, loadJson: H, distortion: I, newAgent: J, parse: K, buildConfiguration: L, getGradientColor: B
  };
}()); window.rooturl = 'http://www.qxjcfw.cn', window.qxmapRegionid = {
  330000000: '浙江省_浙江省', 330600000: '浙江省_绍兴市', 331100000: '浙江省_丽水市', 330100000: '浙江省_杭州市', 330200000: '浙江省_宁波市', 330300000: '浙江省_温州市', 330400000: '浙江省_嘉兴市', 330500000: '浙江省_湖州市', 330700000: '浙江省_金华市', 330800000: '浙江省_衢州市', 330900000: '浙江省_舟山市', 331000000: '浙江省_台州市', 330602000: '绍兴市_越城区', 330603000: '绍兴市_柯桥区', 330604000: '绍兴市_上虞区', 330624000: '绍兴市_新昌县', 330681000: '绍兴市_诸暨市', 330683000: '绍兴市_嵊州市', 331102000: '丽水市_莲都区', 331121000: '丽水市_青田县', 331122000: '丽水市_缙云县', 331123000: '丽水市_遂昌县', 331124000: '丽水市_松阳县', 331125000: '丽水市_云和县', 331126000: '丽水市_庆元县', 331127000: '丽水市_景宁畲族自治县', 331181000: '丽水市_龙泉市', 330102000: '杭州市_上城区', 330114000: '杭州市_钱塘区', 330113000: '杭州市_临平区', 330105000: '杭州市_拱墅区', 330106000: '杭州市_西湖区', 330108000: '杭州市_滨江区', 330109000: '杭州市_萧山区', 330110000: '杭州市_余杭区', 330122000: '杭州市_桐庐县', 330127000: '杭州市_淳安县', 330182000: '杭州市_建德市', 330111000: '杭州市_富阳区', 330112000: '杭州市_临安区', 330203000: '宁波市_海曙区', 330205000: '宁波市_江北区', 330206000: '宁波市_北仑区', 330211000: '宁波市_镇海区', 330212000: '宁波市_鄞州区', 330225000: '宁波市_象山县', 330226000: '宁波市_宁海县', 330281000: '宁波市_余姚市', 330282000: '宁波市_慈溪市', 330283000: '宁波市_奉化区', 330302000: '温州市_鹿城区', 330303000: '温州市_龙湾区', 330304000: '温州市_瓯海区', 330322000: '温州市_洞头区', 330324000: '温州市_永嘉县', 330326000: '温州市_平阳县', 330327000: '温州市_苍南县', 330328000: '温州市_文成县', 330329000: '温州市_泰顺县', 330381000: '温州市_瑞安市', 330382000: '温州市_乐清市', 330402000: '嘉兴市_南湖区', 330411000: '嘉兴市_秀洲区', 330421000: '嘉兴市_嘉善县', 330424000: '嘉兴市_海盐县', 330481000: '嘉兴市_海宁市', 330482000: '嘉兴市_平湖市', 330483000: '嘉兴市_桐乡市', 330502000: '湖州市_吴兴区', 330503000: '湖州市_南浔区', 330521000: '湖州市_德清县', 330522000: '湖州市_长兴县', 330523000: '湖州市_安吉县', 330702000: '金华市_婺城区', 330703000: '金华市_金东区', 330723000: '金华市_武义县', 330726000: '金华市_浦江县', 330727000: '金华市_磐安县', 330781000: '金华市_兰溪市', 330782000: '金华市_义乌市', 330783000: '金华市_东阳市', 330784000: '金华市_永康市', 330802000: '衢州市_柯城区', 330803000: '衢州市_衢江区', 330822000: '衢州市_常山县', 330824000: '衢州市_开化县', 330825000: '衢州市_龙游县', 330881000: '衢州市_江山市', 330902000: '舟山市_定海区', 330903000: '舟山市_普陀区', 330921000: '舟山市_岱山县', 330922000: '舟山市_嵊泗县', 331002000: '台州市_椒江区', 331003000: '台州市_黄岩区', 331004000: '台州市_路桥区', 331021000: '台州市_玉环市', 331022000: '台州市_三门县', 331023000: '台州市_天台县', 331024000: '台州市_仙居县', 331081000: '台州市_温岭市', 331082000: '台州市_临海市'
}, window.citys = [['杭州', 30.23, 120.17], ['宁波', 29.87, 121.57], ['温州', 27.8, 120.67], ['台州', 28.85, 121.13], ['舟山', 30.03, 122.1], ['象山', 29.47, 121.87], ['嘉兴', 30.73, 120.77], ['衢州', 29, 118.9], ['绍兴', 30.07, 120.5], ['温岭', 28.37, 121.37], ['玉环', 28.08, 121.27], ['石浦', 29.2, 121.95], ['平阳', 27.68, 120.57], ['苍南', 27.47, 120.45]], window.qxmapallJson = [['AF0000001', '新安江安徽段'], ['330000000', '浙江省'], ['330600000', '绍兴市'], ['330481110', '盐官镇'], ['330481103', '长安镇'], ['330481108', '黄湾镇'], ['330481112', '袁花镇'], ['330424105', '澉浦镇'], ['330424004', '秦山街道'], ['330421112', '天凝镇'], ['330402100', '凤桥镇'], ['330411104', '新塍镇'], ['330411103', '油车港镇'], ['330421001', '魏塘街道'], ['330411101', '王江泾镇'], ['330421002', '罗星街道'], ['330402014', '长水街道'], ['330402012', '城南街道'], ['330402010', '南湖街道'], ['330411005', '高照街道'], ['330402008', '解放街道'], ['330402013', '东栅街道'], ['330411002', '新城街道'], ['330411003', '嘉北街道'], ['330411004', '塘汇街道'], ['330411105', '王店镇'], ['330402101', '余新镇'], ['330402105', '大桥镇'], ['330402011', '新兴街道'], ['330402007', '建设街道'], ['330402009', '新嘉街道'], ['330482001', '当湖街道'], ['330482002', '钟埭街道'], ['330482107', '林埭镇'], ['330482108', '独山港镇'], ['330482106', '广陈镇'], ['330482103', '新仓镇'], ['330482102', '新埭镇'], ['330482101', '乍浦镇'], ['330421107', '陶庄镇'], ['330421103', '西塘镇'], ['330421111', '姚庄镇'], ['330421105', '干窑镇'], ['330421003', '惠民街道'], ['330424103', '于城镇'], ['330424101', '沈荡镇'], ['330402103', '新丰镇'], ['330424106', '通元镇'], ['330424001', '武原街道'], ['330424003', '元通街道'], ['330424002', '西塘桥街道'], ['330482003', '曹桥街道'], ['330481105', '周王庙镇'], ['330481106', '丁桥镇'], ['330481004', '马桥街道'], ['330481002', '海洲街道'], ['330481107', '斜桥镇'], ['330481001', '硖石街道'], ['330481003', '海昌街道'], ['330483102', '屠甸镇'], ['330424102', '百步镇'], ['330483108', '高桥街道'], ['330421102', '大云镇'], ['330822211', '同弓乡'], ['330822003', '金川街道'], ['330803206', '周家乡'], ['330802210', '九华乡'], ['330802211', '沟溪乡'], ['330822221', '东案乡'], ['330803202', '太真乡'], ['330803113', '湖南镇'], ['330803219', '黄坛口乡'], ['330803111', '后溪镇'], ['330803112', '廿里镇'], ['330802006', '府山街道'], ['330802008', '信安街道'], ['330802009', '白云街道'], ['330802213', '姜家山乡'], ['330802101', '航埠镇'], ['330803002', '浮石街道'], ['330802214', '万田乡'], ['330881203', '碗窑乡'], ['330802212', '华墅乡'], ['330881002', '虎山街道'], ['330881116', '上余镇'], ['330881001', '双塔街道'], ['330881201', '大陈乡'], ['330881102', '四都镇'], ['330881109', '新塘边镇'], ['330822200', '何家乡'], ['330824106', '桐村镇'], ['330824107', '杨林镇'], ['330824216', '林山乡'], ['330824108', '苏庄镇'], ['330824208', '何田乡'], ['330822219', '新昌乡'], ['330824218', '大溪边乡'], ['330802205', '黄家街道'], ['330802215', '石室乡'], ['330825111', '塔石镇'], ['330825002', '东华街道'], ['330825110', '横山镇'], ['330802010', '双港街道'], ['330802005', '新新街道'], ['330802007', '荷花街道'], ['330802011', '花园街道'], ['330825101', '湖镇镇'], ['330825213', '模环乡'], ['330802013', '衢化街道'], ['330803203', '双桥乡'], ['330825001', '龙洲街道'], ['330726101', '黄宅镇'], ['330726202', '前吴乡'], ['330726203', '花桥乡'], ['330723102', '桐琴镇'], ['330784002', '西城街道'], ['330723101', '履坦镇'], ['330723001', '白洋街道'], ['330702101', '雅畈镇'], ['330723107', '茭道镇'], ['330784114', '花街镇'], ['330703105', '岭下镇'], ['330703106', '江东镇'], ['330703001', '多湖街道'], ['330703104', '澧浦镇'], ['330703002', '东孝街道'], ['330782101', '赤岸镇'], ['330703107', '塘雅镇'], ['330702208', '莘畈乡'], ['330781006', '女埠街道'], ['330703103', '曹宅镇'], ['330703101', '孝顺镇'], ['330782102', '义亭镇'], ['330703102', '傅村镇'], ['330782003', '稠江街道'], ['330703200', '源东乡'], ['330782004', '北苑街道'], ['330781108', '香溪镇'], ['330782006', '城西街道'], ['330782005', '后宅街道'], ['330726001', '浦南街道'], ['330723202', '俞源乡'], ['330702207', '岭上乡'], ['330702104', '琅琊镇'], ['330702203', '长山乡'], ['330702209', '苏孟乡'], ['330702008', '秋滨街道'], ['330702006', '三江街道'], ['330702007', '西关街道'], ['330702005', '江南街道'], ['330702003', '城西街道'], ['330702002', '城中街道'], ['330702105', '蒋堂镇'], ['330702001', '城东街道'], ['330702004', '城北街道'], ['330723201', '白姆乡'], ['330723002', '壶山街道'], ['330702102', '安地镇'], ['330702103', '白龙桥镇'], ['330702107', '罗埠镇'], ['330702201', '乾西乡'], ['330702009', '新狮街道'], ['330781007', '上华街道'], ['330702202', '竹马乡'], ['330781005', '赤溪街道'], ['330781001', '兰江街道'], ['330781200', '灵洞乡'], ['330781002', '云山街道'], ['330781104', '诸葛镇'], ['330723206', '大溪口乡'], ['330781203', '水亭畲族乡'], ['330781102', '游埠镇'], ['330702106', '汤溪镇'], ['330702108', '洋埠镇'], ['330723205', '三港乡'], ['330783107', '虎鹿镇'], ['330783001', '吴宁街道'], ['330783006', '城东街道'], ['330783004', '白云街道'], ['330782002', '江东街道'], ['330783005', '江北街道'], ['330783007', '六石街道'], ['330782007', '廿三里街道'], ['330782105', '苏溪镇'], ['330784105', '石柱镇'], ['330727207', '高二乡'], ['330784109', '方岩镇'], ['330784115', '芝英镇'], ['330727101', '新渥镇'], ['330784108', '古山镇'], ['330784111', '西溪镇'], ['330784110', '龙山镇'], ['330783116', '千祥镇'], ['330784113', '唐先镇'], ['330727206', '盘峰乡'], ['330727201', '双峰乡'], ['330727208', '维新乡'], ['330727200', '深泽乡'], ['330727100', '安文镇'], ['330783123', '横店镇'], ['330783122', '画水镇'], ['330782100', '佛堂镇'], ['330727205', '窈川乡'], ['330726002', '仙华街道'], ['330726107', '杭坪镇'], ['330726104', '郑宅镇'], ['330726105', '岩头镇'], ['330726204', '虞宅乡'], ['330726200', '大畈乡'], ['330726201', '中余乡'], ['330726106', '檀溪镇'], ['330782008', '福田街道'], ['330726003', '浦阳街道'], ['330784001', '东城街道'], ['330784112', '象珠镇'], ['330782001', '稠城街道'], ['330781209', '柏社乡'], ['330727211', '九和乡'], ['330727107', '尚湖镇'], ['330727103', '仁川镇'], ['330727108', '冷水镇'], ['330784107', '舟山镇'], ['330784106', '前仓镇'], ['330784003', '江南街道'], ['330723003', '熟溪街道'], ['330723103', '泉溪镇'], ['330723104', '新宅镇'], ['330723200', '大田乡'], ['330723105', '王宅镇'], ['330723203', '坦洪乡'], ['330723106', '桃溪镇'], ['330723100', '柳城畲族镇'], ['330723204', '西联乡'], ['330702205', '沙畈乡'], ['330702204', '箬阳乡'], ['330702206', '塔石乡'], ['330825209', '社阳乡'], ['330825201', '罗家乡'], ['330825109', '溪口镇'], ['330825203', '庙下乡'], ['330825212', '沐尘畲族乡'], ['330825211', '大街乡'], ['330803213', '举村乡'], ['330803218', '岭洋乡'], ['330881213', '塘源口乡'], ['330881214', '张村乡'], ['330881112', '廿八都镇'], ['330881207', '保安乡'], ['330881119', '峡口镇'], ['330881118', '凤林镇'], ['330881120', '石门镇'], ['330881121', '贺村镇'], ['330881104', '清湖镇'], ['330881113', '长台镇'], ['330881106', '大桥镇'], ['330881105', '坛石镇'], ['330822109', '青石镇'], ['330822002', '紫港街道'], ['330822115', '辉埠镇'], ['330822213', '大桥头乡'], ['330822108', '招贤镇'], ['330822116', '芳村镇'], ['330802209', '七里乡'], ['330802100', '石梁镇'], ['330803207', '云溪乡'], ['330803001', '樟潭街道'], ['330803109', '全旺镇'], ['330803110', '大洲镇'], ['330825106', '詹家镇'], ['330825102', '小南海镇'], ['330803115', '杜泽镇'], ['330824115', '华埠镇'], ['330824117', '池淮镇'], ['330824109', '齐溪镇'], ['330824116', '马金镇'], ['330824113', '村头镇'], ['330824217', '音坑乡'], ['330824202', '中村乡'], ['330825207', '石佛乡'], ['330781106', '黄店镇'], ['330781004', '永昌街道'], ['330781109', '马涧镇'], ['330781111', '梅江镇'], ['330781112', '横溪镇'], ['330782104', '上溪镇'], ['330703108', '赤松镇'], ['330702100', '罗店镇'], ['330726102', '白马镇'], ['330782106', '大陈镇'], ['330726103', '郑家坞镇'], ['330783106', '巍山镇'], ['330783109', '佐村镇'], ['330783108', '歌山镇'], ['330783110', '东阳江镇'], ['330783112', '湖溪镇'], ['330783114', '马宅镇'], ['330727203', '双溪乡'], ['330727104', '大盘镇'], ['330727105', '方前镇'], ['330727210', '万苍乡'], ['330727102', '尖山镇'], ['330727106', '玉山镇'], ['330783201', '三单乡'], ['330727209', '胡宅乡'], ['330483104', '河山镇'], ['330483001', '梧桐街道'], ['330483103', '石门镇'], ['330483003', '凤鸣街道'], ['330483107', '崇福镇'], ['330483106', '大麻镇'], ['330483105', '洲泉镇'], ['330411106', '洪合镇'], ['330481101', '许村镇'], ['330822104', '白石镇'], ['330822111', '球川镇'], ['330824205', '长虹乡'], ['330822001', '天马街道'], ['330402104', '七星街道'], ['330127110', '大墅镇'], ['330182109', '寿昌镇'], ['330127111', '枫树岭镇'], ['330182003', '更楼街道'], ['330182110', '航头镇'], ['330127216', '安阳乡'], ['330182113', '李家镇'], ['330105022', '武林街道'], ['330110013', '余杭街道'], ['330110109', '径山镇'], ['330122204', '新合乡'], ['330122005', '凤川街道'], ['330111205', '湖源乡'], ['330122113', '江南镇'], ['330111111', '常安镇'], ['330111201', '上官乡'], ['330111110', '场口镇'], ['330111200', '新桐乡'], ['330111204', '环山乡'], ['330111117', '大源镇'], ['330127214', '界首乡'], ['330127211', '鸠坑乡'], ['330127210', '宋村乡'], ['330127104', '威坪镇'], ['330127208', '王阜乡'], ['330127202', '富文乡'], ['330127201', '金峰乡'], ['330127101', '文昌镇'], ['330127203', '左口乡'], ['330122112', '百江镇'], ['330127103', '临岐镇'], ['330127205', '屏门乡'], ['330182101', '莲花镇'], ['330182105', '杨村桥镇'], ['330182202', '钦堂乡'], ['330182102', '乾潭镇'], ['330122202', '钟山乡'], ['330122102', '横村镇'], ['330122110', '瑶琳镇'], ['330122101', '富春江镇'], ['330122002', '旧县街道'], ['330122201', '莪山畲族乡'], ['330122004', '城南街道'], ['330122003', '桐君街道'], ['330111103', '渌渚镇'], ['330127107', '梓桐镇'], ['330111112', '龙门镇'], ['330127100', '千岛湖镇'], ['330106011', '蒋村街道'], ['330110005', '五常街道'], ['330106109', '三墩镇'], ['330110112', '百丈镇'], ['330109101', '河上镇'], ['330109103', '浦阳镇'], ['330109102', '戴村镇'], ['330109104', '进化镇'], ['330109105', '临浦镇'], ['330109106', '义桥镇'], ['330109107', '所前镇'], ['330109108', '衙前镇'], ['330109003', '蜀山街道'], ['330109012', '闻堰街道'], ['330109001', '城厢街道'], ['330109004', '新塘街道'], ['330108001', '西兴街道'], ['330109006', '南阳街道'], ['330114010', '临江街道'], ['330109501', '萧山区围垦区'], ['330114007', '义蓬街道'], ['330114008', '河庄街道'], ['330109005', '靖江街道'], ['330109113', '瓜沥镇'], ['330113001', '临平街道'], ['330113102', '塘栖镇'], ['330113008', '崇贤街道'], ['330109002', '北干街道'], ['330108002', '长河街道'], ['330102008', '南星街道'], ['330108003', '浦沿街道'], ['330102009', '紫阳街道'], ['330102001', '清波街道'], ['330113004', '星桥街道'], ['330102010', '望江街道'], ['330102006', '采荷街道'], ['330102024', '小营街道'], ['330102003', '湖滨街道'], ['330106012', '灵隐街道'], ['330106002', '北山街道'], ['330111004', '鹿山街道'], ['330111115', '新登镇'], ['330110012', '仓前街道'], ['330111002', '春江街道'], ['330111108', '里山镇'], ['330111001', '富春街道'], ['330111206', '春建乡'], ['330111006', '银湖街道'], ['330112115', '板桥镇'], ['330110014', '中泰街道'], ['330110011', '闲林街道'], ['330112008', '青山湖街道'], ['330112104', '於潜镇'], ['330112106', '太阳镇'], ['330112116', '天目山镇'], ['330112102', '高虹镇'], ['330112103', '太湖源镇'], ['330110111', '鸬鸟镇'], ['330110113', '黄湖镇'], ['330127206', '瑶山乡'], ['330112111', '湍口镇'], ['330112109', '河桥镇'], ['330112112', '清凉峰镇'], ['330112108', '昌化镇'], ['330112117', '龙岗镇'], ['330112113', '岛石镇'], ['330122210', '合村乡'], ['330122109', '分水镇'], ['330111101', '洞桥镇'], ['330112107', '潜川镇'], ['330111100', '万市镇'], ['330111116', '胥口镇'], ['330111105', '永昌镇'], ['330112005', '锦南街道'], ['330112002', '玲珑街道'], ['330112006', '锦城街道'], ['330112007', '锦北街道'], ['330113003', '东湖街道'], ['330106010', '转塘街道'], ['330106008', '西湖街道'], ['330106007', '古荡街道'], ['330106013', '文新街道'], ['330105023', '天水街道'], ['330105001', '长庆街道'], ['330102005', '凯旋街道'], ['330105015', '潮鸣街道'], ['330102018', '四季青街道'], ['330105009', '祥符街道'], ['330106009', '留下街道'], ['330105021', '米市巷街道'], ['330106004', '西溪街道'], ['330106005', '翠苑街道'], ['330105006', '朝晖街道'], ['330102007', '闸弄口街道'], ['330105018', '上塘街道'], ['330105002', '湖墅街道'], ['330114011', '前进街道'], ['330114009', '新湾街道'], ['330109120', '党湾镇'], ['330109115', '益农镇'], ['330105007', '文晖街道'], ['330105017', '大关街道'], ['330105003', '小河街道'], ['330105004', '和睦街道'], ['330105008', '东新街道'], ['330105005', '拱宸桥街道'], ['330102014', '九堡街道'], ['330102012', '笕桥街道'], ['330105019', '石桥街道'], ['330105010', '康桥街道'], ['330102013', '丁兰街道'], ['330127102', '石林镇'], ['330182001', '新安江街道'], ['330127212', '浪川乡'], ['330127106', '姜家镇'], ['330182106', '下涯镇'], ['330182002', '洋溪街道'], ['330113006', '乔司街道'], ['330105011', '半山街道'], ['330127200', '里商乡'], ['330182108', '三都镇'], ['330182104', '梅城镇'], ['330111207', '渔山乡'], ['330111118', '灵桥镇'], ['330111005', '东洲街道'], ['330106110', '双浦镇'], ['330110009', '仁和街道'], ['330111109', '常绿镇'], ['330109100', '楼塔镇'], ['330127109', '中洲镇'], ['330127108', '汾口镇'], ['330182112', '大同镇'], ['330182111', '大慈岩镇'], ['330182107', '大洋镇'], ['330110110', '瓶窑镇'], ['330110010', '良渚街道'], ['330113007', '运河街道'], ['330113002', '南苑街道'], ['330114013', '白杨街道'], ['330102102', '彭埠街道'], ['330109600', '萧山区顺坝垦区'], ['330109013', '宁围街道'], ['330109014', '新街街道'], ['330114012', '下沙街道'], ['331002101', '大陈镇'], ['331100000', '丽水市'], ['331022105', '健跳镇'], ['331022107', '浦坝港镇'], ['331022108', '花桥镇'], ['331082114', '桃渚镇'], ['331082113', '上盘镇'], ['330100000', '杭州市'], ['330200000', '宁波市'], ['331004107', '蓬街镇'], ['331004106', '金清镇'], ['331081400', '东部新区'], ['331081102', '松门镇'], ['331081105', '石塘镇'], ['331081108', '城南镇'], ['331021105', '沙门镇'], ['331021103', '干江镇'], ['331021001', '玉城街道'], ['331021002', '坎门街道'], ['331021201', '鸡山乡'], ['331021003', '大麦屿街道'], ['331021202', '海山乡'], ['330300000', '温州市'], ['331081110', '坞根镇'], ['331022003', '沙柳街道'], ['331022106', '横渡镇'], ['331002007', '前所街道'], ['331002001', '海门街道'], ['331002005', '三甲街道'], ['331081106', '滨海镇'], ['331081107', '温峤镇'], ['331021101', '清港镇'], ['331021106', '芦浦镇'], ['331081109', '石桥头镇'], ['331081103', '箬横镇'], ['331023203', '龙溪乡'], ['331024102', '埠头镇'], ['331024105', '官路镇'], ['331024001', '安洲街道'], ['331024207', '广度乡'], ['331023001', '赤城街道'], ['331023002', '始丰街道'], ['331023204', '雷峰乡'], ['331023207', '南屏乡'], ['331023003', '福溪街道'], ['331023106', '坦头镇'], ['331023209', '泳溪乡'], ['331023107', '三合镇'], ['331023108', '洪畴镇'], ['331022102', '珠岙镇'], ['331022001', '海游街道'], ['331022103', '亭旁镇'], ['331082103', '汇溪镇'], ['331082105', '河头镇'], ['331082108', '永丰镇'], ['331082004', '大田街道'], ['331082101', '东塍镇'], ['331082104', '小芝镇'], ['331082005', '邵家渡街道'], ['331082002', '大洋街道'], ['331082001', '古城街道'], ['331024003', '福应街道'], ['331024002', '南峰街道'], ['331024103', '白塔镇'], ['331024204', '皤滩乡'], ['331024104', '田市镇'], ['331024206', '步路乡'], ['331024107', '朱溪镇'], ['331003200', '屿头乡'], ['331082109', '尤溪镇'], ['331024209', '大战乡'], ['331082003', '江南街道'], ['331082100', '汛桥镇'], ['331082111', '沿江镇'], ['331003204', '上垟乡'], ['331081001', '太平街道'], ['331081003', '城西街道'], ['331081002', '城东街道'], ['331081005', '横峰街道'], ['331081004', '城北街道'], ['331081100', '泽国镇'], ['331004004', '螺洋街道'], ['331003002', '南城街道'], ['331003008', '高桥街道'], ['331003006', '澄江街道'], ['331003103', '头陀镇'], ['331003005', '新前街道'], ['331003004', '北城街道'], ['331003003', '西城街道'], ['331003001', '东城街道'], ['331003007', '江口街道'], ['331002003', '葭沚街道'], ['331002002', '白云街道'], ['331002006', '下陈街道'], ['331002004', '洪家街道'], ['331004005', '桐屿街道'], ['331004003', '路北街道'], ['331004002', '路桥街道'], ['331004001', '路南街道'], ['331004006', '峰江街道'], ['331004103', '新桥镇'], ['331004104', '横街镇'], ['331081104', '新河镇'], ['331021102', '楚门镇'], ['331021107', '龙溪镇'], ['331082110', '涌泉镇'], ['331002008', '章安街道'], ['331082112', '杜桥镇'], ['331003107', '院桥镇'], ['331081101', '大溪镇'], ['331003108', '沙埠镇'], ['331003203', '茅畲乡'], ['331003205', '平田乡'], ['331003202', '富山乡'], ['331003101', '宁溪镇'], ['331003201', '上郑乡'], ['331024203', '淡竹乡'], ['331024205', '上张乡'], ['331024200', '安岭乡'], ['331024201', '溪港乡'], ['331024202', '湫山乡'], ['331024101', '横溪镇'], ['331082106', '白水洋镇'], ['331024106', '下各镇'], ['331024210', '双庙乡'], ['331082107', '括苍镇'], ['331023104', '街头镇'], ['331023105', '平桥镇'], ['331023200', '三州乡'], ['331023101', '白鹤镇'], ['331023102', '石梁镇'], ['331022002', '海润街道'], ['331003102', '北洋镇'], ['330803200', '灰坪乡'], ['330803100', '上方镇'], ['330803103', '莲花镇'], ['330803101', '峡川镇'], ['330803114', '高家镇'], ['331125206', '赤石乡'], ['331125107', '紧水滩镇'], ['331125004', '凤凰山街道'], ['331125001', '浮云街道'], ['331125106', '石塘镇'], ['331125003', '白龙山街道'], ['331125202', '安溪畲族乡'], ['331125201', '雾溪畲族乡'], ['331124003', '望松街道'], ['331124101', '古市镇'], ['331124206', '赤寿乡'], ['331124001', '西屏街道'], ['331124213', '裕溪乡'], ['331124103', '象溪镇'], ['331124208', '樟溪乡'], ['331124202', '斋坛乡'], ['331124201', '叶村乡'], ['331124204', '竹源乡'], ['331124002', '水南街道'], ['331124102', '玉岩镇'], ['331124211', '枫坪乡'], ['331124214', '安民乡'], ['331124104', '大东坝镇'], ['331124105', '新兴镇'], ['331122001', '五云街道'], ['331122203', '七里乡'], ['331122207', '三溪乡'], ['331122107', '东方镇'], ['331122003', '仙都街道'], ['331122103', '舒洪镇'], ['331122208', '溶江乡'], ['331122211', '方溪乡'], ['331122210', '胡源乡'], ['331122212', '石笕乡'], ['331102202', '峰源乡'], ['331102003', '万象街道'], ['331102102', '大港头镇'], ['331102008', '南明山街道'], ['331102001', '紫金街道'], ['331102206', '黄村乡'], ['331102100', '碧湖镇'], ['331123102', '新路湾镇'], ['331123001', '妙高街道'], ['331123201', '濂竹乡'], ['331123200', '三仁畲族乡'], ['331123106', '石练镇'], ['331123210', '垵口乡'], ['331123107', '王村口镇'], ['331123206', '焦滩乡'], ['331123108', '黄沙腰镇'], ['331123207', '龙洋乡'], ['331123208', '柘岱口乡'], ['331123205', '蔡源乡'], ['331127210', '雁溪乡'], ['331127218', '家地乡'], ['331127201', '大均乡'], ['331127202', '澄照乡'], ['331127219', '九龙乡'], ['331127208', '大漈乡'], ['331127214', '标溪乡'], ['331127213', '梧桐乡'], ['331127103', '英川镇'], ['331127212', '鸬鹚乡'], ['331127216', '秋炉乡'], ['331126107', '百山祖镇'], ['331126201', '五大堡乡'], ['331126001', '松源街道'], ['331126101', '黄田镇'], ['331126200', '岭头乡'], ['331126209', '龙溪乡'], ['331126206', '举水乡'], ['331126003', '屏都街道'], ['331126202', '淤上乡'], ['331126205', '隆宫乡'], ['331126104', '荷地镇'], ['331126106', '贤良镇'], ['331126204', '张村乡'], ['331126207', '江根乡'], ['331126105', '左溪镇'], ['331126211', '官塘乡'], ['331181202', '宝溪乡'], ['331181101', '上垟镇'], ['331181203', '竹垟畲族乡'], ['331181106', '住龙镇'], ['331181002', '西街街道'], ['331181206', '城北乡'], ['331181001', '龙渊街道'], ['331181204', '道太乡'], ['331181104', '安仁镇'], ['331181107', '屏南镇'], ['331181004', '塔石街道'], ['331181003', '剑池街道'], ['331181102', '小梅镇'], ['331181103', '查田镇'], ['331127215', '毛垟乡'], ['331127104', '沙湾镇'], ['331127217', '大地乡'], ['331126203', '安南乡'], ['331126002', '濛洲街道'], ['331126102', '竹口镇'], ['331181105', '锦溪镇'], ['331181205', '岩樟乡'], ['331121206', '祯旺乡'], ['331121205', '章村乡'], ['331121106', '腊口镇'], ['331121207', '祯埠乡'], ['331121105', '海口镇'], ['331121208', '舒桥乡'], ['331121204', '海溪乡'], ['331121103', '高湖镇'], ['331121202', '季宅乡'], ['331121104', '船寮镇'], ['331121220', '石溪乡'], ['331121214', '贵岙乡'], ['331121001', '鹤城街道'], ['331125002', '元和街道'], ['331127209', '景南乡'], ['331127102', '东坑镇'], ['331127203', '梅岐乡'], ['331127101', '渤海镇'], ['331127205', '郑坑乡'], ['331121211', '万阜乡'], ['331121109', '仁庄镇'], ['331121213', '汤垟乡'], ['331121212', '方山乡'], ['331121003', '油竹街道'], ['331121101', '温溪镇'], ['331121216', '吴坑乡'], ['331121215', '小舟山乡'], ['331121201', '黄垟乡'], ['331121200', '万山乡'], ['331121102', '东源镇'], ['331122105', '大洋镇'], ['331123103', '北界镇'], ['331123202', '应村乡'], ['331123203', '高坪乡'], ['331123204', '湖山乡'], ['330282104', '掌起镇'], ['330282107', '观海卫镇'], ['330282108', '附海镇'], ['330282109', '桥头镇'], ['330282110', '匡堰镇'], ['330282114', '横河镇'], ['330282004', '浒山街道'], ['330282005', '白沙路街道'], ['330282111', '逍林镇'], ['330282006', '古塘街道'], ['330282002', '宗汉街道'], ['330282112', '新浦镇'], ['330282113', '胜山镇'], ['330282003', '坎墩街道'], ['330282116', '崇寿镇'], ['330282120', '长河镇'], ['330281002', '凤山街道'], ['330281109', '丈亭镇'], ['330281113', '陆埠镇'], ['330281101', '黄家埠镇'], ['330281004', '阳明街道'], ['330281003', '兰江街道'], ['330281108', '牟山镇'], ['330281106', '马渚镇'], ['330281116', '四明山镇'], ['330281115', '大岚镇'], ['330281114', '梁弄镇'], ['330282600', '慈溪市围垦区'], ['330281102', '小曹娥镇'], ['330282118', '庵东镇'], ['330281006', '朗霞街道'], ['330282121', '周巷镇'], ['330281005', '低塘街道'], ['330211002', '蛟川街道'], ['330281110', '三七市镇'], ['330281111', '河姆渡镇'], ['330281112', '大隐镇'], ['330203008', '望春街道'], ['330203003', '西门街道'], ['330203005', '鼓楼街道'], ['330205001', '中马街道'], ['330212009', '东胜街道'], ['330212008', '百丈街道'], ['330212011', '白鹤街道'], ['330212013', '东郊街道'], ['330203007', '段塘街道'], ['330203006', '白云街道'], ['330203001', '南门街道'], ['330203004', '月湖街道'], ['330203002', '江厦街道'], ['330212012', '东柳街道'], ['330206201', '梅山街道'], ['330206006', '柴桥街道'], ['330206001', '大榭街道'], ['330206005', '霞浦街道'], ['330206002', '新碶街道'], ['330206007', '戚家山街道'], ['330206003', '小港街道'], ['330211001', '招宝山街道'], ['330226102', '力洋镇'], ['330226104', '一市镇'], ['330226202', '越溪乡'], ['330226101', '长街镇'], ['330226201', '茶院乡'], ['330226110', '强蛟镇'], ['330226111', '西店镇'], ['330226112', '深甽镇'], ['330226200', '胡陈乡'], ['330225110', '新桥镇'], ['330225106', '泗洲头镇'], ['330225107', '定塘镇'], ['330225200', '东陈乡'], ['330225101', '石浦镇'], ['330225201', '晓塘乡'], ['330225108', '涂茨镇'], ['330225003', '爵溪街道'], ['330225104', '贤庠镇'], ['330225202', '黄避岙乡'], ['330225203', '茅洋乡'], ['330225109', '大徐镇'], ['330225103', '鹤浦镇'], ['330225204', '高塘岛乡'], ['330225105', '墙头镇'], ['330225001', '丹东街道'], ['330212103', '东钱湖镇'], ['330212007', '潘火街道'], ['330212006', '首南街道'], ['330212001', '下应街道'], ['330212005', '中河街道'], ['330212002', '钟公庙街道'], ['330203009', '石碶街道'], ['330212106', '邱隘镇'], ['330212110', '姜山镇'], ['330212109', '横溪镇'], ['330212108', '云龙镇'], ['330212102', '塘溪镇'], ['330203105', '鄞江镇'], ['330203101', '横街镇'], ['330203104', '洞桥镇'], ['330203200', '龙观乡'], ['330203106', '章水镇'], ['330203103', '古林镇'], ['330283104', '莼湖镇'], ['330283003', '江口街道'], ['330283100', '溪口镇'], ['330283005', '萧王庙街道'], ['330283106', '裘村镇'], ['330283108', '松岙镇'], ['330283004', '西坞街道'], ['330283002', '岳林街道'], ['330283001', '锦屏街道'], ['330212101', '咸祥镇'], ['330205007', '洪塘街道'], ['330283103', '尚田镇'], ['330226002', '桃源街道'], ['330226109', '大佳何镇'], ['330225002', '丹西街道'], ['330211005', '贵驷街道'], ['330205006', '庄桥街道'], ['330205004', '文教街道'], ['330205002', '白沙街道'], ['330205003', '孔浦街道'], ['330212015', '新明街道'], ['330212010', '明楼街道'], ['330212014', '福明街道'], ['330225102', '西周镇'], ['330283107', '大堰镇'], ['330226003', '梅林街道'], ['330226108', '黄坛镇'], ['330226106', '前童镇'], ['330226105', '岔路镇'], ['330226107', '桑洲镇'], ['330205103', '慈城镇'], ['330211101', '九龙湖镇'], ['330226004', '桥头胡街道'], ['330226001', '跃龙街道'], ['330604107', '永和镇'], ['330604106', '丰惠镇'], ['330604109', '驿亭镇'], ['330681104', '店口镇'], ['330604101', '长塘镇'], ['330604112', '盖北镇'], ['330604108', '梁湖街道'], ['330604001', '百官街道'], ['330604110', '小越街道'], ['330604111', '谢塘镇'], ['330604600', '上虞区围垦区'], ['330681001', '暨阳街道'], ['330681107', '江藻镇'], ['330681101', '大唐镇'], ['330681103', '次坞镇'], ['330681110', '赵家镇'], ['330681002', '浣东街道'], ['330681108', '山下湖镇'], ['330681109', '枫桥镇'], ['330681105', '阮市镇'], ['330604200', '岭南乡'], ['330683104', '三界镇'], ['330604105', '下管镇'], ['330604104', '章镇镇'], ['330604103', '汤浦镇'], ['330604202', '丁宅乡'], ['330604102', '上浦镇'], ['330604201', '陈溪乡'], ['330604100', '道墟街道'], ['330603111', '漓渚镇'], ['330602106', '斗门街道'], ['330603110', '杨汛桥镇'], ['330603101', '钱清镇'], ['330603114', '夏履镇'], ['330602108', '富盛镇'], ['330602006', '稽山街道'], ['330602104', '皋埠镇'], ['330602007', '迪荡街道'], ['330602100', '东湖街道'], ['330602107', '孙端镇'], ['330602105', '马山镇'], ['330603109', '稽东镇'], ['330603107', '王坛镇'], ['330603108', '兰亭街道'], ['330603105', '平水镇'], ['330602103', '鉴湖街道'], ['330602005', '城南街道'], ['330602001', '塔山街道'], ['330602002', '府山街道'], ['330603103', '福全街道'], ['330602004', '北海街道'], ['330602003', '蕺山街道'], ['330602102', '东浦街道'], ['330602101', '灵芝街道'], ['330603106', '安昌街道'], ['330603600', '柯桥区围垦区'], ['330603104', '马鞍镇'], ['330603100', '齐贤街道'], ['330681124', '东白湖镇'], ['330683202', '竹溪乡'], ['330681201', '东和乡'], ['330683106', '谷来镇'], ['330681114', '王家井镇'], ['330681122', '浬浦镇'], ['330681118', '街亭镇'], ['330681113', '草塔镇'], ['330683004', '浦口街道'], ['330683107', '仙岩镇'], ['330683110', '下王镇'], ['330683109', '北漳镇'], ['330681121', '岭北镇'], ['330681120', '陈宅镇'], ['330683205', '通源乡'], ['330683203', '雅璜乡'], ['330683105', '石璜镇'], ['330683204', '王院乡'], ['330683102', '崇仁镇'], ['330681115', '牌头镇'], ['330683101', '长乐镇'], ['330683108', '金庭镇'], ['330683003', '鹿山街道'], ['330683001', '剡湖街道'], ['330624205', '新林乡'], ['330681112', '五泄镇'], ['330681111', '马剑镇'], ['330681116', '同山镇'], ['330683103', '黄泽镇'], ['330603001', '柯桥街道'], ['330683002', '三江街道'], ['330683400', '嵊州经济开发区'], ['330602109', '陶堰镇'], ['330604003', '东关街道'], ['330604002', '曹娥街道'], ['330604114', '沥海镇'], ['330604113', '崧厦镇'], ['330681102', '应店街镇'], ['330681106', '直埠镇'], ['330681003', '陶朱街道'], ['330681117', '安华镇'], ['330681119', '璜山镇'], ['330624104', '回山镇'], ['330683201', '里南乡'], ['330683100', '甘霖镇'], ['330683200', '贵门乡'], ['330624109', '镜岭镇'], ['330624101', '澄潭镇'], ['330624201', '东茗乡'], ['330624102', '梅渚镇'], ['330624003', '七星街道'], ['330624001', '羽林街道'], ['330624002', '南明街道'], ['330624106', '大市聚镇'], ['330624110', '儒岙镇'], ['330624200', '城南乡'], ['330624203', '双彩乡'], ['330624107', '小将镇'], ['330624206', '巧英乡'], ['330603003', '华舍街道'], ['330603002', '柯岩街道'], ['330603004', '湖塘街道'], ['330326109', '南雁镇'], ['330326116', '南麂镇'], ['330326119', '海西镇'], ['330327119', '大渔镇'], ['330327107', '金乡镇'], ['330327103', '宜山镇'], ['330327110', '沿浦镇'], ['330327109', '霞关镇'], ['330327218', '岱岭畲族乡'], ['330327118', '马站镇'], ['330327117', '赤溪镇'], ['330327105', '炎亭镇'], ['330327101', '龙港镇'], ['330381007', '莘塍街道'], ['330381008', '汀田街道'], ['330381101', '塘下镇'], ['330381004', '东山街道'], ['330382104', '雁荡镇'], ['330382101', '大荆镇'], ['330302025', '南汇街道'], ['330303008', '沙城街道'], ['330303009', '天河街道'], ['330324106', '碧莲镇'], ['330324108', '岩头镇'], ['330324105', '大若岩镇'], ['330324109', '枫林镇'], ['330324111', '沙头镇'], ['330324002', '北城街道'], ['330324001', '东城街道'], ['330382111', '淡溪镇'], ['330324003', '南城街道'], ['330302028', '仰义街道'], ['330304009', '郭溪街道'], ['330302029', '丰门街道'], ['330324009', '瓯北街道'], ['330324007', '黄田街道'], ['330382002', '乐成街道'], ['330382007', '石帆街道'], ['330382001', '城东街道'], ['330382003', '城南街道'], ['330382004', '盐盆街道'], ['330382005', '翁垟街道'], ['330304008', '瞿溪街道'], ['330302027', '双屿街道'], ['330302014', '广化街道'], ['330302026', '松台街道'], ['330302006', '五马街道'], ['330304010', '潘桥街道'], ['330304005', '娄桥街道'], ['330304006', '新桥街道'], ['330304001', '景山街道'], ['330302031', '大南街道'], ['330302007', '蒲鞋市街道'], ['330302202', '南郊街道'], ['330304002', '梧田街道'], ['330303002', '蒲州街道'], ['330304007', '三垟街道'], ['330329100', '罗阳镇'], ['330328104', '黄坦镇'], ['330328217', '周山畲族乡'], ['330328106', '巨屿镇'], ['330326108', '顺溪镇'], ['330326214', '青街畲族乡'], ['330327216', '凤阳畲族乡'], ['330327100', '灵溪镇'], ['330327112', '藻溪镇'], ['330326105', '腾蛟镇'], ['330326100', '昆阳镇'], ['330381010', '仙降街道'], ['330381011', '南滨街道'], ['330381005', '上望街道'], ['330381002', '玉海街道'], ['330381001', '安阳街道'], ['330303005', '海城街道'], ['330303011', '星海街道'], ['330304012', '仙岩街道'], ['330304011', '丽岙街道'], ['330304003', '南白象街道'], ['330303004', '永兴街道'], ['330329105', '彭溪镇'], ['330329204', '竹里畲族乡'], ['330328102', '南田镇'], ['330328107', '玉壶镇'], ['330304108', '泽雅镇'], ['330324102', '桥头镇'], ['330322004', '霓屿街道'], ['330322101', '大门镇'], ['330322202', '鹿西乡'], ['330322003', '元觉街道'], ['330322001', '北岙街道'], ['330322002', '东屏街道'], ['330329101', '司前畲族镇'], ['330381201', '北麂乡'], ['330382118', '南岳镇'], ['330382119', '南塘镇'], ['330324006', '三江街道'], ['330324008', '乌牛街道'], ['330382006', '白石街道'], ['330382117', '蒲岐镇'], ['330382008', '天成街道'], ['330382114', '柳市镇'], ['330322005', '灵昆街道'], ['330302024', '滨江街道'], ['330302023', '七都街道'], ['330303006', '状元街道'], ['330304004', '茶山街道'], ['330303001', '永中街道'], ['330303007', '瑶溪街道'], ['330303003', '海滨街道'], ['330382115', '北白象镇'], ['330382116', '磐石镇'], ['330382108', '虹桥镇'], ['330382106', '清江镇'], ['330382210', '岭底乡'], ['330382105', '芙蓉镇'], ['330382120', '湖雾镇'], ['330382212', '智仁乡'], ['330382211', '龙西乡'], ['330382102', '仙溪镇'], ['330381003', '锦湖街道'], ['330381013', '潘岱街道'], ['330381012', '云周街道'], ['330381009', '飞云街道'], ['330381128', '桐浦镇'], ['330381120', '陶山镇'], ['330381126', '曹村镇'], ['330381116', '马屿镇'], ['330381200', '芳庄乡'], ['330381129', '林川镇'], ['330381122', '湖岭镇'], ['330381127', '平阳坑镇'], ['330381125', '高楼镇'], ['330302103', '山福镇'], ['330302102', '藤桥镇'], ['330328109', '周壤镇'], ['330328100', '大峃镇'], ['330328103', '西坑畲族镇'], ['330328111', '铜铃山镇'], ['330328110', '二源镇'], ['330328101', '百丈漈镇'], ['330328221', '桂山乡'], ['330328105', '珊溪镇'], ['330328222', '双桂乡'], ['330328223', '公阳乡'], ['330328224', '平和乡'], ['330328108', '峃口镇'], ['330324207', '溪下乡'], ['330324110', '岩坦镇'], ['330324208', '界坑乡'], ['330324107', '巽宅镇'], ['330324227', '云岭乡'], ['330324112', '鹤盛镇'], ['330324226', '茗岙乡'], ['330324113', '金溪镇'], ['330324104', '桥下镇'], ['330326107', '山门镇'], ['330326118', '怀溪镇'], ['330326110', '凤卧镇'], ['330326211', '闹村乡'], ['330326102', '水头镇'], ['330326103', '萧江镇'], ['330326104', '麻步镇'], ['330326101', '鳌江镇'], ['330326117', '万全镇'], ['330327120', '莒溪镇'], ['330327113', '桥墩镇'], ['330327106', '望里镇'], ['330327104', '钱库镇'], ['330327108', '南宋镇'], ['330327116', '矾山镇'], ['330327230', '苍南县所辖乡镇'], ['330922202', '枸杞乡'], ['330922203', '花鸟乡'], ['330922101', '嵊山镇'], ['330921106', '衢山镇'], ['330922102', '洋山镇'], ['330922200', '五龙乡'], ['330922100', '菜园镇'], ['330922201', '黄龙乡'], ['330903104', '桃花镇'], ['330903001', '沈家门街道'], ['330903003', '东港街道'], ['330903004', '朱家尖街道'], ['330903105', '东极镇'], ['330903106', '普陀山镇'], ['330903102', '虾峙镇'], ['330903100', '六横镇'], ['330921200', '秀山乡'], ['330921100', '高亭镇'], ['330921102', '岱东镇'], ['330921103', '岱西镇'], ['330921101', '东沙镇'], ['330921105', '长涂镇'], ['330902010', '小沙街道'], ['330903005', '展茅街道'], ['330902105', '干�V镇'], ['330902008', '马岙街道'], ['330902003', '环南街道'], ['330902007', '岑港街道'], ['330902002', '昌国街道'], ['330902004', '城东街道'], ['330902009', '双桥街道'], ['330902007', '千岛街道'], ['330902005', '盐仓街道'], ['330902104', '白泉镇'], ['330902006', '临城街道'], ['330902100', '金塘镇'], ['330523001', '递铺街道'], ['330523111', '天子湖镇'], ['330523105', '孝丰镇'], ['330523103', '鄣吴镇'], ['330523004', '孝源街道'], ['330523104', '杭垓镇'], ['330523107', '章村镇'], ['330523106', '报福镇'], ['330523206', '山川乡'], ['330523205', '上墅乡'], ['330523108', '天荒坪镇'], ['330523002', '昌硕街道'], ['330523201', '溪龙乡'], ['330523003', '灵峰街道'], ['330522103', '夹浦镇'], ['330522108', '小浦镇'], ['330522104', '林城镇'], ['330522004', '龙山街道'], ['330521101', '乾元镇'], ['330521110', '雷甸镇'], ['330521114', '新安镇'], ['330503101', '双林镇'], ['330503100', '南浔镇'], ['330522109', '煤山镇'], ['330521103', '洛舍镇'], ['330522003', '太湖街道'], ['330522001', '雉城街道'], ['330522106', '虹星桥镇'], ['330522202', '吕山乡'], ['330522110', '和平镇'], ['330502008', '仁皇山街道'], ['330502006', '凤凰街道'], ['330502005', '龙泉街道'], ['330502003', '爱山街道'], ['330502002', '朝阳街道'], ['330502100', '织里镇'], ['330503104', '旧馆镇'], ['330503105', '菱湖镇'], ['330502105', '东林镇'], ['330503107', '千金镇'], ['330521102', '新市镇'], ['330521105', '莫干山镇'], ['330521001', '武康街道'], ['330522002', '画溪街道'], ['330522111', '泗安镇'], ['330521113', '禹越镇'], ['330521002', '舞阳街道'], ['330503103', '善琏镇'], ['330503108', '石淙镇'], ['330503102', '练市镇'], ['330502104', '埭溪镇'], ['330502009', '滨湖街道'], ['330523110', '梅溪镇'], ['330502011', '杨家埠街道'], ['330502102', '妙西镇'], ['330502007', '康山街道'], ['330502012', '环渚街道'], ['330502200', '道场乡'], ['330502001', '月河街道'], ['330502004', '飞英街道'], ['330502101', '八里店镇'], ['330503106', '和孚镇'], ['330521104', '钟管镇'], ['330522102', '李家巷镇'], ['330522101', '洪桥镇'], ['330502010', '龙溪街道'], ['331125105', '崇头镇'], ['331124203', '三都乡'], ['331124212', '板桥畲族乡'], ['331102204', '丽新畲族乡'], ['331102201', '仙渡乡'], ['331102200', '太平乡'], ['331102103', '老竹畲族镇'], ['331123104', '金竹镇'], ['331123105', '大柘镇'], ['331127001', '红星街道'], ['331127002', '鹤溪街道'], ['331181207', '龙南乡'], ['331181200', '兰巨乡'], ['331181100', '八都镇'], ['331121218', '章旦乡'], ['331121203', '高市乡'], ['331121209', '巨浦乡'], ['331121217', '仁宫乡'], ['331122206', '前路乡'], ['331121107', '北山镇'], ['331121219', '阜山乡'], ['331102007', '联城街道'], ['331102004', '白云街道'], ['331102002', '岩泉街道'], ['331121002', '瓯南街道'], ['331121108', '山口镇'], ['331122106', '东渡镇'], ['331123209', '西畈乡'], ['331102104', '雅溪镇'], ['331122102', '新建镇'], ['331122101', '壶镇镇'], ['331124205', '四都乡'], ['331122108', '大源镇'], ['331122002', '新碧街道'], ['331123002', '云峰街道'], ['331122209', '双溪口乡'], ['330624108', '沙溪镇'], ['330282123', '龙山镇'], ['330211100', '澥浦镇'], ['330206107', '春晓街道'], ['330212105', '五乡镇'], ['330206004', '大碶街道'], ['330211003', '骆驼街道'], ['330211004', '庄市街道'], ['330206008', '郭巨街道'], ['330206105', '白峰街道'], ['330206105', '梅山街道'], ['330212100', '瞻岐镇'], ['330205005', '甬江街道'], ['330212004', '梅墟街道'], ['330212104', '东吴镇'], ['330281100', '临山镇'], ['330281001', '梨洲街道'], ['330281103', '泗门镇'], ['330281600', '余姚市围垦区'], ['330203100', '高桥镇'], ['330203102', '集士港镇'], ['330281201', '鹿亭乡'], ['330522200', '水口乡'], ['331022205', '蛇蟠乡'], ['330329205', '包垟乡'], ['330329102', '百丈镇'], ['330329121', '南浦溪镇'], ['330329103', '筱村镇'], ['330329208', '凤垟乡'], ['330329210', '东溪乡'], ['330329209', '柳峰乡'], ['330329106', '雅阳镇'], ['330329207', '雪溪乡'], ['330329119', '龟湖镇'], ['330329107', '仕阳镇'], ['330329206', '大安乡'], ['330329109', '三魁镇'], ['330329120', '西旸镇'], ['330329104', '泗溪镇'], ['330483100', '乌镇镇'], ['330483101', '濮院镇'], ['330783118', '南马镇'], ['330783003', '南市街道'], ['330521003', '阜溪街道'], ['330521004', '下渚湖街道'], ['330400000', '嘉兴市'], ['330500000', '湖州市'], ['330700000', '金华市'], ['330800000', '衢州市'], ['330900000', '舟山市'], ['331000000', '台州市'], ['330102000', '上城区'], ['330105000', '拱墅区'], ['330106000', '西湖区'], ['330108000', '滨江区'], ['330109000', '萧山区'], ['330110000', '余杭区'], ['330113000', '临平区'], ['330114000', '钱塘区'], ['330122000', '桐庐县'], ['330127000', '淳安县'], ['330182000', '建德市'], ['330111000', '富阳区'], ['330112000', '临安区'], ['330203000', '海曙区'], ['330205000', '江北区'], ['330206000', '北仑区'], ['330211000', '镇海区'], ['330212000', '鄞州区'], ['330225000', '象山县'], ['330226000', '宁海县'], ['330281000', '余姚市'], ['330282000', '慈溪市'], ['330283000', '奉化区'], ['330302000', '鹿城区'], ['330303000', '龙湾区'], ['330304000', '瓯海区'], ['330322000', '洞头区'], ['330324000', '永嘉县'], ['330326000', '平阳县'], ['330327000', '苍南县'], ['330328000', '文成县'], ['330329000', '泰顺县'], ['330381000', '瑞安市'], ['330382000', '乐清市'], ['330402000', '南湖区'], ['330411000', '秀洲区'], ['330421000', '嘉善县'], ['330424000', '海盐县'], ['330481000', '海宁市'], ['330482000', '平湖市'], ['330483000', '桐乡市'], ['330502000', '吴兴区'], ['330503000', '南浔区'], ['330521000', '德清县'], ['330522000', '长兴县'], ['330523000', '安吉县'], ['330602000', '越城区'], ['330603000', '柯桥区'], ['330604000', '上虞区'], ['330624000', '新昌县'], ['330681000', '诸暨市'], ['330683000', '嵊州市'], ['330702000', '婺城区'], ['330703000', '金东区'], ['330723000', '武义县'], ['330726000', '浦江县'], ['330727000', '磐安县'], ['330781000', '兰溪市'], ['330782000', '义乌市'], ['330783000', '东阳市'], ['330784000', '永康市'], ['330802000', '柯城区'], ['330803000', '衢江区'], ['330822000', '常山县'], ['330824000', '开化县'], ['330825000', '龙游县'], ['330881000', '江山市'], ['330902000', '定海区'], ['330903000', '普陀区'], ['330921000', '岱山县'], ['330922000', '嵊泗县'], ['331002000', '椒江区'], ['331003000', '黄岩区'], ['331004000', '路桥区'], ['331021000', '玉环市'], ['331022000', '三门县'], ['331023000', '天台县'], ['331024000', '仙居县'], ['331081000', '温岭市'], ['331082000', '临海市'], ['331102000', '莲都区'], ['331121000', '青田县'], ['331122000', '缙云县'], ['331123000', '遂昌县'], ['331124000', '松阳县'], ['331125000', '云和县'], ['331126000', '庆元县'], ['331127000', '景宁畲族自治县'], ['331181000', '龙泉市']], window.qxmapzjson = { name: '浙江', city: [{ name: '杭州', area: ['杭州市', '拱墅区', '西湖区', '上城区', '临平区', '钱塘区', '滨江区', '余杭区', '萧山区', '建德市', '富阳区', '临安区', '桐庐县', '淳安县'] }, { name: '宁波', area: ['宁波市', '海曙区', '江东区', '江北区', '镇海区', '北仑区', '鄞州区', '余姚市', '慈溪市', '奉化市', '宁海县', '象山县'] }, { name: '温州', area: ['温州市', '鹿城区', '龙湾区', '瓯海区', '瑞安市', '乐清市', '永嘉县', '洞头县', '平阳县', '苍南县', '文成县', '泰顺县'] }, { name: '嘉兴', area: ['嘉兴市', '秀洲区', '海宁市', '平湖市', '桐乡市', '嘉善县', '海盐县'] }, { name: '湖州', area: ['湖州市', '吴兴区', '南浔区', '长兴县', '德清县', '安吉县'] }, { name: '绍兴', area: ['绍兴市', '越城区', '诸暨市', '上虞区', '嵊州市', '新昌县', '柯桥区'] }, { name: '金华', area: ['金华市', '婺城区', '金东区', '兰溪市', '义乌市', '东阳市', '永康市', '武义县', '浦江县', '磐安县'] }, { name: '衢州', area: ['衢州市', '柯城区', '衢江区', '江山市', '龙游县', '常山县', '开化县'] }, { name: '舟山', area: ['舟山市', '定海区', '普陀区', '岱山县', '嵊泗县'] }, { name: '台州', area: ['台州市', '椒江区', '黄岩区', '路桥区', '临海市', '温岭市', '玉环县', '天台县', '仙居县', '三门县'] }, { name: '丽水', area: ['丽水市', '莲都区', '龙泉市', '缙云县', '青田县', '云和县', '遂昌县', '松阳县', '庆元县', '景宁畲族自治县'] }] }, window.qxmapallJson = {
  330000000: '浙江省', 330600000: '绍兴市', 330481110: '盐官镇', 330481103: '长安镇', 330481108: '黄湾镇', 330481112: '袁花镇', 330424105: '澉浦镇', 330424004: '秦山街道', 330421112: '天凝镇', 330402100: '凤桥镇', 330411104: '新塍镇', 330411103: '油车港镇', 330421001: '魏塘街道', 330411101: '王江泾镇', 330421002: '罗星街道', 330402014: '长水街道', 330402012: '城南街道', 330402010: '南湖街道', 330411005: '高照街道', 330402008: '解放街道', 330402013: '东栅街道', 330411002: '新城街道', 330411003: '嘉北街道', 330411004: '塘汇街道', 330411105: '王店镇', 330402101: '余新镇', 330402105: '大桥镇', 330402011: '新兴街道', 330402007: '建设街道', 330402009: '新嘉街道', 330482001: '当湖街道', 330482002: '钟埭街道', 330482107: '林埭镇', 330482108: '独山港镇', 330482106: '广陈镇', 330482103: '新仓镇', 330482102: '新埭镇', 330482101: '乍浦镇', 330421107: '陶庄镇', 330421103: '西塘镇', 330421111: '姚庄镇', 330421105: '干窑镇', 330421003: '惠民街道', 330424103: '于城镇', 330424101: '沈荡镇', 330402103: '新丰镇', 330424106: '通元镇', 330424001: '武原街道', 330424003: '元通街道', 330424002: '西塘桥街道', 330482003: '曹桥街道', 330481105: '周王庙镇', 330481106: '丁桥镇', 330481004: '马桥街道', 330481002: '海洲街道', 330481107: '斜桥镇', 330481001: '硖石街道', 330481003: '海昌街道', 330483102: '屠甸镇', 330424102: '百步镇', 330483108: '高桥街道', 330421102: '大云镇', 330822211: '同弓乡', 330822003: '金川街道', 330803206: '周家乡', 330802210: '九华乡', 330802211: '沟溪乡', 330822221: '东案乡', 330803202: '太真乡', 330803113: '湖南镇', 330803219: '黄坛口乡', 330803111: '后溪镇', 330803112: '廿里镇', 330802006: '府山街道', 330802008: '信安街道', 330802009: '白云街道', 330802213: '姜家山乡', 330802101: '航埠镇', 330803002: '浮石街道', 330802214: '万田乡', 330881203: '碗窑乡', 330802212: '华墅乡', 330881002: '虎山街道', 330881116: '上余镇', 330881001: '双塔街道', 330881201: '大陈乡', 330881102: '四都镇', 330881109: '新塘边镇', 330822200: '何家乡', 330824106: '桐村镇', 330824107: '杨林镇', 330824216: '林山乡', 330824108: '苏庄镇', 330824208: '何田乡', 330822219: '新昌乡', 330824218: '大溪边乡', 330802205: '黄家街道', 330802215: '石室乡', 330825111: '塔石镇', 330825002: '东华街道', 330825110: '横山镇', 330802010: '双港街道', 330802005: '新新街道', 330802007: '荷花街道', 330802011: '花园街道', 330825101: '湖镇镇', 330825213: '模环乡', 330802013: '衢化街道', 330803203: '双桥乡', 330825001: '龙洲街道', 330726101: '黄宅镇', 330726202: '前吴乡', 330726203: '花桥乡', 330723102: '桐琴镇', 330784002: '西城街道', 330723101: '履坦镇', 330723001: '白洋街道', 330702101: '雅畈镇', 330723107: '茭道镇', 330784114: '花街镇', 330703105: '岭下镇', 330703106: '江东镇', 330703001: '多湖街道', 330703104: '澧浦镇', 330703002: '东孝街道', 330782101: '赤岸镇', 330703107: '塘雅镇', 330702208: '莘畈乡', 330781006: '女埠街道', 330703103: '曹宅镇', 330703101: '孝顺镇', 330782102: '义亭镇', 330703102: '傅村镇', 330782003: '稠江街道', 330703200: '源东乡', 330782004: '北苑街道', 330781108: '香溪镇', 330782006: '城西街道', 330782005: '后宅街道', 330726001: '浦南街道', 330723202: '俞源乡', 330702207: '岭上乡', 330702104: '琅琊镇', 330702203: '长山乡', 330702209: '苏孟乡', 330702008: '秋滨街道', 330702006: '三江街道', 330702007: '西关街道', 330702005: '江南街道', 330702003: '城西街道', 330702002: '城中街道', 330702105: '蒋堂镇', 330702001: '城东街道', 330702004: '城北街道', 330723201: '白姆乡', 330723002: '壶山街道', 330702102: '安地镇', 330702103: '白龙桥镇', 330702107: '罗埠镇', 330702201: '乾西乡', 330702009: '新狮街道', 330781007: '上华街道', 330702202: '竹马乡', 330781005: '赤溪街道', 330781001: '兰江街道', 330781200: '灵洞乡', 330781002: '云山街道', 330781104: '诸葛镇', 330723206: '大溪口乡', 330781203: '水亭畲族乡', 330781102: '游埠镇', 330702106: '汤溪镇', 330702108: '洋埠镇', 330723205: '三港乡', 330783107: '虎鹿镇', 330783001: '吴宁街道', 330783006: '城东街道', 330783004: '白云街道', 330782002: '江东街道', 330783005: '江北街道', 330783007: '六石街道', 330782007: '廿三里街道', 330782105: '苏溪镇', 330784105: '石柱镇', 330727207: '高二乡', 330784109: '方岩镇', 330784115: '芝英镇', 330727101: '新渥镇', 330784108: '古山镇', 330784111: '西溪镇', 330784110: '龙山镇', 330783116: '千祥镇', 330784113: '唐先镇', 330727206: '盘峰乡', 330727201: '双峰乡', 330727208: '维新乡', 330727200: '深泽乡', 330727100: '安文镇', 330783123: '横店镇', 330783122: '画水镇', 330782100: '佛堂镇', 330727205: '窈川乡', 330726002: '仙华街道', 330726107: '杭坪镇', 330726104: '郑宅镇', 330726105: '岩头镇', 330726204: '虞宅乡', 330726200: '大畈乡', 330726201: '中余乡', 330726106: '檀溪镇', 330782008: '福田街道', 330726003: '浦阳街道', 330784001: '东城街道', 330784112: '象珠镇', 330782001: '稠城街道', 330781209: '柏社乡', 330727211: '九和乡', 330727107: '尚湖镇', 330727103: '仁川镇', 330727108: '冷水镇', 330784107: '舟山镇', 330784106: '前仓镇', 330784003: '江南街道', 330723003: '熟溪街道', 330723103: '泉溪镇', 330723104: '新宅镇', 330723200: '大田乡', 330723105: '王宅镇', 330723203: '坦洪乡', 330723106: '桃溪镇', 330723100: '柳城畲族镇', 330723204: '西联乡', 330702205: '沙畈乡', 330702204: '箬阳乡', 330702206: '塔石乡', 330825209: '社阳乡', 330825201: '罗家乡', 330825109: '溪口镇', 330825203: '庙下乡', 330825212: '沐尘畲族乡', 330825211: '大街乡', 330803213: '举村乡', 330803218: '岭洋乡', 330881213: '塘源口乡', 330881214: '张村乡', 330881112: '廿八都镇', 330881207: '保安乡', 330881119: '峡口镇', 330881118: '凤林镇', 330881120: '石门镇', 330881121: '贺村镇', 330881104: '清湖镇', 330881113: '长台镇', 330881106: '大桥镇', 330881105: '坛石镇', 330822109: '青石镇', 330822002: '紫港街道', 330822115: '辉埠镇', 330822213: '大桥头乡', 330822108: '招贤镇', 330822116: '芳村镇', 330802209: '七里乡', 330802100: '石梁镇', 330803207: '云溪乡', 330803001: '樟潭街道', 330803109: '全旺镇', 330803110: '大洲镇', 330825106: '詹家镇', 330825102: '小南海镇', 330803115: '杜泽镇', 330824115: '华埠镇', 330824117: '池淮镇', 330824109: '齐溪镇', 330824116: '马金镇', 330824113: '村头镇', 330824217: '音坑乡', 330824202: '中村乡', 330825207: '石佛乡', 330781106: '黄店镇', 330781004: '永昌街道', 330781109: '马涧镇', 330781111: '梅江镇', 330781112: '横溪镇', 330782104: '上溪镇', 330703108: '赤松镇', 330702100: '罗店镇', 330726102: '白马镇', 330782106: '大陈镇', 330726103: '郑家坞镇', 330783106: '巍山镇', 330783109: '佐村镇', 330783108: '歌山镇', 330783110: '东阳江镇', 330783112: '湖溪镇', 330783114: '马宅镇', 330727203: '双溪乡', 330727104: '大盘镇', 330727105: '方前镇', 330727210: '万苍乡', 330727102: '尖山镇', 330727106: '玉山镇', 330783201: '三单乡', 330727209: '胡宅乡', 330483104: '河山镇', 330483001: '梧桐街道', 330483103: '石门镇', 330483003: '凤鸣街道', 330483107: '崇福镇', 330483106: '大麻镇', 330483105: '洲泉镇', 330411106: '洪合镇', 330481101: '许村镇', 330822104: '白石镇', 330822111: '球川镇', 330824205: '长虹乡', 330822001: '天马街道', 330402104: '七星街道', 330127110: '大墅镇', 330182109: '寿昌镇', 330127111: '枫树岭镇', 330182003: '更楼街道', 330182110: '航头镇', 330127216: '安阳乡', 330182113: '李家镇', 330105022: '武林街道', 330110013: '余杭街道', 330110109: '径山镇', 330122204: '新合乡', 330122005: '凤川街道', 330111205: '湖源乡', 330122113: '江南镇', 330111111: '常安镇', 330111201: '上官乡', 330111110: '场口镇', 330111200: '新桐乡', 330111204: '环山乡', 330111117: '大源镇', 330127214: '界首乡', 330127211: '鸠坑乡', 330127210: '宋村乡', 330127104: '威坪镇', 330127208: '王阜乡', 330127202: '富文乡', 330127201: '金峰乡', 330127101: '文昌镇', 330127203: '左口乡', 330122112: '百江镇', 330127103: '临岐镇', 330127205: '屏门乡', 330182101: '莲花镇', 330182105: '杨村桥镇', 330182202: '钦堂乡', 330182102: '乾潭镇', 330122202: '钟山乡', 330122102: '横村镇', 330122110: '瑶琳镇', 330122101: '富春江镇', 330122002: '旧县街道', 330122201: '莪山畲族乡', 330122004: '城南街道', 330122003: '桐君街道', 330111103: '渌渚镇', 330127107: '梓桐镇', 330111112: '龙门镇', 330127100: '千岛湖镇', 330106011: '蒋村街道', 330110005: '五常街道', 330106109: '三墩镇', 330110112: '百丈镇', 330109101: '河上镇', 330109103: '浦阳镇', 330109102: '戴村镇', 330109104: '进化镇', 330109105: '临浦镇', 330109106: '义桥镇', 330109107: '所前镇', 330109108: '衙前镇', 330109003: '蜀山街道', 330109012: '闻堰街道', 330109001: '城厢街道', 330109004: '新塘街道', 330108001: '西兴街道', 330109006: '南阳街道', 330114010: '临江街道', 330109501: '萧山区围垦区', 330114007: '义蓬街道', 330114008: '河庄街道', 330109005: '靖江街道', 330109113: '瓜沥镇', 330113001: '临平街道', 330113102: '塘栖镇', 330113008: '崇贤街道', 330109002: '北干街道', 330108002: '长河街道', 330102008: '南星街道', 330108003: '浦沿街道', 330102009: '紫阳街道', 330102001: '清波街道', 330113004: '星桥街道', 330102010: '望江街道', 330102006: '采荷街道', 330102024: '小营街道', 330102003: '湖滨街道', 330106012: '灵隐街道', 330106002: '北山街道', 330111004: '鹿山街道', 330111115: '新登镇', 330110012: '仓前街道', 330111002: '春江街道', 330111108: '里山镇', 330111001: '富春街道', 330111206: '春建乡', 330111006: '银湖街道', 330112115: '板桥镇', 330110014: '中泰街道', 330110011: '闲林街道', 330112008: '青山湖街道', 330112104: '於潜镇', 330112106: '太阳镇', 330112116: '天目山镇', 330112102: '高虹镇', 330112103: '太湖源镇', 330110111: '鸬鸟镇', 330110113: '黄湖镇', 330127206: '瑶山乡', 330112111: '湍口镇', 330112109: '河桥镇', 330112112: '清凉峰镇', 330112108: '昌化镇', 330112117: '龙岗镇', 330112113: '岛石镇', 330122210: '合村乡', 330122109: '分水镇', 330111101: '洞桥镇', 330112107: '潜川镇', 330111100: '万市镇', 330111116: '胥口镇', 330111105: '永昌镇', 330112005: '锦南街道', 330112002: '玲珑街道', 330112006: '锦城街道', 330112007: '锦北街道', 330113003: '东湖街道', 330106010: '转塘街道', 330106008: '西湖街道', 330106007: '古荡街道', 330106013: '文新街道', 330105023: '天水街道', 330105001: '长庆街道', 330102005: '凯旋街道', 330105015: '潮鸣街道', 330102018: '四季青街道', 330105009: '祥符街道', 330106009: '留下街道', 330105021: '米市巷街道', 330106004: '西溪街道', 330106005: '翠苑街道', 330105006: '朝晖街道', 330102007: '闸弄口街道', 330105018: '上塘街道', 330105002: '湖墅街道', 330114011: '前进街道', 330114009: '新湾街道', 330109120: '党湾镇', 330109115: '益农镇', 330105007: '文晖街道', 330105017: '大关街道', 330105003: '小河街道', 330105004: '和睦街道', 330105008: '东新街道', 330105005: '拱宸桥街道', 330102014: '九堡街道', 330102012: '笕桥街道', 330105019: '石桥街道', 330105010: '康桥街道', 330102013: '丁兰街道', 330127102: '石林镇', 330182001: '新安江街道', 330127212: '浪川乡', 330127106: '姜家镇', 330182106: '下涯镇', 330182002: '洋溪街道', 330113006: '乔司街道', 330105011: '半山街道', 330127200: '里商乡', 330182108: '三都镇', 330182104: '梅城镇', 330111207: '渔山乡', 330111118: '灵桥镇', 330111005: '东洲街道', 330106110: '双浦镇', 330110009: '仁和街道', 330111109: '常绿镇', 330109100: '楼塔镇', 330127109: '中洲镇', 330127108: '汾口镇', 330182112: '大同镇', 330182111: '大慈岩镇', 330182107: '大洋镇', 330110110: '瓶窑镇', 330110010: '良渚街道', 330113007: '运河街道', 330113002: '南苑街道', 330114013: '白杨街道', 330102102: '彭埠街道', 330109600: '萧山区顺坝垦区', 330109013: '宁围街道', 330109014: '新街街道', 330114012: '下沙街道', 331002101: '大陈镇', 331100000: '丽水市', 331022105: '健跳镇', 331022107: '浦坝港镇', 331022108: '花桥镇', 331082114: '桃渚镇', 331082113: '上盘镇', 330100000: '杭州市', 330200000: '宁波市', 331004107: '蓬街镇', 331004106: '金清镇', 331081400: '东部新区', 331081102: '松门镇', 331081105: '石塘镇', 331081108: '城南镇', 331021105: '沙门镇', 331021103: '干江镇', 331021001: '玉城街道', 331021002: '坎门街道', 331021201: '鸡山乡', 331021003: '大麦屿街道', 331021202: '海山乡', 330300000: '温州市', 331081110: '坞根镇', 331022003: '沙柳街道', 331022106: '横渡镇', 331002007: '前所街道', 331002001: '海门街道', 331002005: '三甲街道', 331081106: '滨海镇', 331081107: '温峤镇', 331021101: '清港镇', 331021106: '芦浦镇', 331081109: '石桥头镇', 331081103: '箬横镇', 331023203: '龙溪乡', 331024102: '埠头镇', 331024105: '官路镇', 331024001: '安洲街道', 331024207: '广度乡', 331023001: '赤城街道', 331023002: '始丰街道', 331023204: '雷峰乡', 331023207: '南屏乡', 331023003: '福溪街道', 331023106: '坦头镇', 331023209: '泳溪乡', 331023107: '三合镇', 331023108: '洪畴镇', 331022102: '珠岙镇', 331022001: '海游街道', 331022103: '亭旁镇', 331082103: '汇溪镇', 331082105: '河头镇', 331082108: '永丰镇', 331082004: '大田街道', 331082101: '东塍镇', 331082104: '小芝镇', 331082005: '邵家渡街道', 331082002: '大洋街道', 331082001: '古城街道', 331024003: '福应街道', 331024002: '南峰街道', 331024103: '白塔镇', 331024204: '皤滩乡', 331024104: '田市镇', 331024206: '步路乡', 331024107: '朱溪镇', 331003200: '屿头乡', 331082109: '尤溪镇', 331024209: '大战乡', 331082003: '江南街道', 331082100: '汛桥镇', 331082111: '沿江镇', 331003204: '上垟乡', 331081001: '太平街道', 331081003: '城西街道', 331081002: '城东街道', 331081005: '横峰街道', 331081004: '城北街道', 331081100: '泽国镇', 331004004: '螺洋街道', 331003002: '南城街道', 331003008: '高桥街道', 331003006: '澄江街道', 331003103: '头陀镇', 331003005: '新前街道', 331003004: '北城街道', 331003003: '西城街道', 331003001: '东城街道', 331003007: '江口街道', 331002003: '葭沚街道', 331002002: '白云街道', 331002006: '下陈街道', 331002004: '洪家街道', 331004005: '桐屿街道', 331004003: '路北街道', 331004002: '路桥街道', 331004001: '路南街道', 331004006: '峰江街道', 331004103: '新桥镇', 331004104: '横街镇', 331081104: '新河镇', 331021102: '楚门镇', 331021107: '龙溪镇', 331082110: '涌泉镇', 331002008: '章安街道', 331082112: '杜桥镇', 331003107: '院桥镇', 331081101: '大溪镇', 331003108: '沙埠镇', 331003203: '茅畲乡', 331003205: '平田乡', 331003202: '富山乡', 331003101: '宁溪镇', 331003201: '上郑乡', 331024203: '淡竹乡', 331024205: '上张乡', 331024200: '安岭乡', 331024201: '溪港乡', 331024202: '湫山乡', 331024101: '横溪镇', 331082106: '白水洋镇', 331024106: '下各镇', 331024210: '双庙乡', 331082107: '括苍镇', 331023104: '街头镇', 331023105: '平桥镇', 331023200: '三州乡', 331023101: '白鹤镇', 331023102: '石梁镇', 331022002: '海润街道', 331003102: '北洋镇', 330803200: '灰坪乡', 330803100: '上方镇', 330803103: '莲花镇', 330803101: '峡川镇', 330803114: '高家镇', 331125206: '赤石乡', 331125107: '紧水滩镇', 331125004: '凤凰山街道', 331125001: '浮云街道', 331125106: '石塘镇', 331125003: '白龙山街道', 331125202: '安溪畲族乡', 331125201: '雾溪畲族乡', 331124003: '望松街道', 331124101: '古市镇', 331124206: '赤寿乡', 331124001: '西屏街道', 331124213: '裕溪乡', 331124103: '象溪镇', 331124208: '樟溪乡', 331124202: '斋坛乡', 331124201: '叶村乡', 331124204: '竹源乡', 331124002: '水南街道', 331124102: '玉岩镇', 331124211: '枫坪乡', 331124214: '安民乡', 331124104: '大东坝镇', 331124105: '新兴镇', 331122001: '五云街道', 331122203: '七里乡', 331122207: '三溪乡', 331122107: '东方镇', 331122003: '仙都街道', 331122103: '舒洪镇', 331122208: '溶江乡', 331122211: '方溪乡', 331122210: '胡源乡', 331122212: '石笕乡', 331102202: '峰源乡', 331102003: '万象街道', 331102102: '大港头镇', 331102008: '南明山街道', 331102001: '紫金街道', 331102206: '黄村乡', 331102100: '碧湖镇', 331123102: '新路湾镇', 331123001: '妙高街道', 331123201: '濂竹乡', 331123200: '三仁畲族乡', 331123106: '石练镇', 331123210: '垵口乡', 331123107: '王村口镇', 331123206: '焦滩乡', 331123108: '黄沙腰镇', 331123207: '龙洋乡', 331123208: '柘岱口乡', 331123205: '蔡源乡', 331127210: '雁溪乡', 331127218: '家地乡', 331127201: '大均乡', 331127202: '澄照乡', 331127219: '九龙乡', 331127208: '大漈乡', 331127214: '标溪乡', 331127213: '梧桐乡', 331127103: '英川镇', 331127212: '鸬鹚乡', 331127216: '秋炉乡', 331126107: '百山祖镇', 331126201: '五大堡乡', 331126001: '松源街道', 331126101: '黄田镇', 331126200: '岭头乡', 331126209: '龙溪乡', 331126206: '举水乡', 331126003: '屏都街道', 331126202: '淤上乡', 331126205: '隆宫乡', 331126104: '荷地镇', 331126106: '贤良镇', 331126204: '张村乡', 331126207: '江根乡', 331126105: '左溪镇', 331126211: '官塘乡', 331181202: '宝溪乡', 331181101: '上垟镇', 331181203: '竹垟畲族乡', 331181106: '住龙镇', 331181002: '西街街道', 331181206: '城北乡', 331181001: '龙渊街道', 331181204: '道太乡', 331181104: '安仁镇', 331181107: '屏南镇', 331181004: '塔石街道', 331181003: '剑池街道', 331181102: '小梅镇', 331181103: '查田镇', 331127215: '毛垟乡', 331127104: '沙湾镇', 331127217: '大地乡', 331126203: '安南乡', 331126002: '濛洲街道', 331126102: '竹口镇', 331181105: '锦溪镇', 331181205: '岩樟乡', 331121206: '祯旺乡', 331121205: '章村乡', 331121106: '腊口镇', 331121207: '祯埠乡', 331121105: '海口镇', 331121208: '舒桥乡', 331121204: '海溪乡', 331121103: '高湖镇', 331121202: '季宅乡', 331121104: '船寮镇', 331121220: '石溪乡', 331121214: '贵岙乡', 331121001: '鹤城街道', 331125002: '元和街道', 331127209: '景南乡', 331127102: '东坑镇', 331127203: '梅岐乡', 331127101: '渤海镇', 331127205: '郑坑乡', 331121211: '万阜乡', 331121109: '仁庄镇', 331121213: '汤垟乡', 331121212: '方山乡', 331121003: '油竹街道', 331121101: '温溪镇', 331121216: '吴坑乡', 331121215: '小舟山乡', 331121201: '黄垟乡', 331121200: '万山乡', 331121102: '东源镇', 331122105: '大洋镇', 331123103: '北界镇', 331123202: '应村乡', 331123203: '高坪乡', 331123204: '湖山乡', 330282104: '掌起镇', 330282107: '观海卫镇', 330282108: '附海镇', 330282109: '桥头镇', 330282110: '匡堰镇', 330282114: '横河镇', 330282004: '浒山街道', 330282005: '白沙路街道', 330282111: '逍林镇', 330282006: '古塘街道', 330282002: '宗汉街道', 330282112: '新浦镇', 330282113: '胜山镇', 330282003: '坎墩街道', 330282116: '崇寿镇', 330282120: '长河镇', 330281002: '凤山街道', 330281109: '丈亭镇', 330281113: '陆埠镇', 330281101: '黄家埠镇', 330281004: '阳明街道', 330281003: '兰江街道', 330281108: '牟山镇', 330281106: '马渚镇', 330281116: '四明山镇', 330281115: '大岚镇', 330281114: '梁弄镇', 330282600: '慈溪市围垦区', 330281102: '小曹娥镇', 330282118: '庵东镇', 330281006: '朗霞街道', 330282121: '周巷镇', 330281005: '低塘街道', 330211002: '蛟川街道', 330281110: '三七市镇', 330281111: '河姆渡镇', 330281112: '大隐镇', 330203008: '望春街道', 330203003: '西门街道', 330203005: '鼓楼街道', 330205001: '中马街道', 330212009: '东胜街道', 330212008: '百丈街道', 330212011: '白鹤街道', 330212013: '东郊街道', 330203007: '段塘街道', 330203006: '白云街道', 330203001: '南门街道', 330203004: '月湖街道', 330203002: '江厦街道', 330212012: '东柳街道', 330206201: '梅山街道', 330206006: '柴桥街道', 330206001: '大榭街道', 330206005: '霞浦街道', 330206002: '新碶街道', 330206007: '戚家山街道', 330206003: '小港街道', 330211001: '招宝山街道', 330226102: '力洋镇', 330226104: '一市镇', 330226202: '越溪乡', 330226101: '长街镇', 330226201: '茶院乡', 330226110: '强蛟镇', 330226111: '西店镇', 330226112: '深甽镇', 330226200: '胡陈乡', 330225110: '新桥镇', 330225106: '泗洲头镇', 330225107: '定塘镇', 330225200: '东陈乡', 330225101: '石浦镇', 330225201: '晓塘乡', 330225108: '涂茨镇', 330225003: '爵溪街道', 330225104: '贤庠镇', 330225202: '黄避岙乡', 330225203: '茅洋乡', 330225109: '大徐镇', 330225103: '鹤浦镇', 330225204: '高塘岛乡', 330225105: '墙头镇', 330225001: '丹东街道', 330212103: '东钱湖镇', 330212007: '潘火街道', 330212006: '首南街道', 330212001: '下应街道', 330212005: '中河街道', 330212002: '钟公庙街道', 330203009: '石碶街道', 330212106: '邱隘镇', 330212110: '姜山镇', 330212109: '横溪镇', 330212108: '云龙镇', 330212102: '塘溪镇', 330203105: '鄞江镇', 330203101: '横街镇', 330203104: '洞桥镇', 330203200: '龙观乡', 330203106: '章水镇', 330203103: '古林镇', 330283104: '莼湖镇', 330283003: '江口街道', 330283100: '溪口镇', 330283005: '萧王庙街道', 330283106: '裘村镇', 330283108: '松岙镇', 330283004: '西坞街道', 330283002: '岳林街道', 330283001: '锦屏街道', 330212101: '咸祥镇', 330205007: '洪塘街道', 330283103: '尚田镇', 330226002: '桃源街道', 330226109: '大佳何镇', 330225002: '丹西街道', 330211005: '贵驷街道', 330205006: '庄桥街道', 330205004: '文教街道', 330205002: '白沙街道', 330205003: '孔浦街道', 330212015: '新明街道', 330212010: '明楼街道', 330212014: '福明街道', 330225102: '西周镇', 330283107: '大堰镇', 330226003: '梅林街道', 330226108: '黄坛镇', 330226106: '前童镇', 330226105: '岔路镇', 330226107: '桑洲镇', 330205103: '慈城镇', 330211101: '九龙湖镇', 330226004: '桥头胡街道', 330226001: '跃龙街道', 330604107: '永和镇', 330604106: '丰惠镇', 330604109: '驿亭镇', 330681104: '店口镇', 330604101: '长塘镇', 330604112: '盖北镇', 330604108: '梁湖街道', 330604001: '百官街道', 330604110: '小越街道', 330604111: '谢塘镇', 330604600: '上虞区围垦区', 330681001: '暨阳街道', 330681107: '江藻镇', 330681101: '大唐镇', 330681103: '次坞镇', 330681110: '赵家镇', 330681002: '浣东街道', 330681108: '山下湖镇', 330681109: '枫桥镇', 330681105: '阮市镇', 330604200: '岭南乡', 330683104: '三界镇', 330604105: '下管镇', 330604104: '章镇镇', 330604103: '汤浦镇', 330604202: '丁宅乡', 330604102: '上浦镇', 330604201: '陈溪乡', 330604100: '道墟街道', 330603111: '漓渚镇', 330602106: '斗门街道', 330603110: '杨汛桥镇', 330603101: '钱清镇', 330603114: '夏履镇', 330602108: '富盛镇', 330602006: '稽山街道', 330602104: '皋埠镇', 330602007: '迪荡街道', 330602100: '东湖街道', 330602107: '孙端镇', 330602105: '马山镇', 330603109: '稽东镇', 330603107: '王坛镇', 330603108: '兰亭街道', 330603105: '平水镇', 330602103: '鉴湖街道', 330602005: '城南街道', 330602001: '塔山街道', 330602002: '府山街道', 330603103: '福全街道', 330602004: '北海街道', 330602003: '蕺山街道', 330602102: '东浦街道', 330602101: '灵芝街道', 330603106: '安昌街道', 330603600: '柯桥区围垦区', 330603104: '马鞍镇', 330603100: '齐贤街道', 330681124: '东白湖镇', 330683202: '竹溪乡', 330681201: '东和乡', 330683106: '谷来镇', 330681114: '王家井镇', 330681122: '浬浦镇', 330681118: '街亭镇', 330681113: '草塔镇', 330683004: '浦口街道', 330683107: '仙岩镇', 330683110: '下王镇', 330683109: '北漳镇', 330681121: '岭北镇', 330681120: '陈宅镇', 330683205: '通源乡', 330683203: '雅璜乡', 330683105: '石璜镇', 330683204: '王院乡', 330683102: '崇仁镇', 330681115: '牌头镇', 330683101: '长乐镇', 330683108: '金庭镇', 330683003: '鹿山街道', 330683001: '剡湖街道', 330624205: '新林乡', 330681112: '五泄镇', 330681111: '马剑镇', 330681116: '同山镇', 330683103: '黄泽镇', 330603001: '柯桥街道', 330683002: '三江街道', 330683400: '嵊州经济开发区', 330602109: '陶堰镇', 330604003: '东关街道', 330604002: '曹娥街道', 330604114: '沥海镇', 330604113: '崧厦镇', 330681102: '应店街镇', 330681106: '直埠镇', 330681003: '陶朱街道', 330681117: '安华镇', 330681119: '璜山镇', 330624104: '回山镇', 330683201: '里南乡', 330683100: '甘霖镇', 330683200: '贵门乡', 330624109: '镜岭镇', 330624101: '澄潭镇', 330624201: '东茗乡', 330624102: '梅渚镇', 330624003: '七星街道', 330624001: '羽林街道', 330624002: '南明街道', 330624106: '大市聚镇', 330624110: '儒岙镇', 330624200: '城南乡', 330624203: '双彩乡', 330624107: '小将镇', 330624206: '巧英乡', 330603003: '华舍街道', 330603002: '柯岩街道', 330603004: '湖塘街道', 330326109: '南雁镇', 330326116: '南麂镇', 330326119: '海西镇', 330327119: '大渔镇', 330327107: '金乡镇', 330327103: '宜山镇', 330327110: '沿浦镇', 330327109: '霞关镇', 330327218: '岱岭畲族乡', 330327118: '马站镇', 330327117: '赤溪镇', 330327105: '炎亭镇', 330327101: '龙港镇', 330381007: '莘塍街道', 330381008: '汀田街道', 330381101: '塘下镇', 330381004: '东山街道', 330382104: '雁荡镇', 330382101: '大荆镇', 330302025: '南汇街道', 330303008: '沙城街道', 330303009: '天河街道', 330324106: '碧莲镇', 330324108: '岩头镇', 330324105: '大若岩镇', 330324109: '枫林镇', 330324111: '沙头镇', 330324002: '北城街道', 330324001: '东城街道', 330382111: '淡溪镇', 330324003: '南城街道', 330302028: '仰义街道', 330304009: '郭溪街道', 330302029: '丰门街道', 330324009: '瓯北街道', 330324007: '黄田街道', 330382002: '乐成街道', 330382007: '石帆街道', 330382001: '城东街道', 330382003: '城南街道', 330382004: '盐盆街道', 330382005: '翁垟街道', 330304008: '瞿溪街道', 330302027: '双屿街道', 330302014: '广化街道', 330302026: '松台街道', 330302006: '五马街道', 330304010: '潘桥街道', 330304005: '娄桥街道', 330304006: '新桥街道', 330304001: '景山街道', 330302031: '大南街道', 330302007: '蒲鞋市街道', 330302202: '南郊街道', 330304002: '梧田街道', 330303002: '蒲州街道', 330304007: '三垟街道', 330329100: '罗阳镇', 330328104: '黄坦镇', 330328217: '周山畲族乡', 330328106: '巨屿镇', 330326108: '顺溪镇', 330326214: '青街畲族乡', 330327216: '凤阳畲族乡', 330327100: '灵溪镇', 330327112: '藻溪镇', 330326105: '腾蛟镇', 330326100: '昆阳镇', 330381010: '仙降街道', 330381011: '南滨街道', 330381005: '上望街道', 330381002: '玉海街道', 330381001: '安阳街道', 330303005: '海城街道', 330303011: '星海街道', 330304012: '仙岩街道', 330304011: '丽岙街道', 330304003: '南白象街道', 330303004: '永兴街道', 330329105: '彭溪镇', 330329204: '竹里畲族乡', 330328102: '南田镇', 330328107: '玉壶镇', 330304108: '泽雅镇', 330324102: '桥头镇', 330322004: '霓屿街道', 330322101: '大门镇', 330322202: '鹿西乡', 330322003: '元觉街道', 330322001: '北岙街道', 330322002: '东屏街道', 330329101: '司前畲族镇', 330381201: '北麂乡', 330382118: '南岳镇', 330382119: '南塘镇', 330324006: '三江街道', 330324008: '乌牛街道', 330382006: '白石街道', 330382117: '蒲岐镇', 330382008: '天成街道', 330382114: '柳市镇', 330322005: '灵昆街道', 330302024: '滨江街道', 330302023: '七都街道', 330303006: '状元街道', 330304004: '茶山街道', 330303001: '永中街道', 330303007: '瑶溪街道', 330303003: '海滨街道', 330382115: '北白象镇', 330382116: '磐石镇', 330382108: '虹桥镇', 330382106: '清江镇', 330382210: '岭底乡', 330382105: '芙蓉镇', 330382120: '湖雾镇', 330382212: '智仁乡', 330382211: '龙西乡', 330382102: '仙溪镇', 330381003: '锦湖街道', 330381013: '潘岱街道', 330381012: '云周街道', 330381009: '飞云街道', 330381128: '桐浦镇', 330381120: '陶山镇', 330381126: '曹村镇', 330381116: '马屿镇', 330381200: '芳庄乡', 330381129: '林川镇', 330381122: '湖岭镇', 330381127: '平阳坑镇', 330381125: '高楼镇', 330302103: '山福镇', 330302102: '藤桥镇', 330328109: '周壤镇', 330328100: '大峃镇', 330328103: '西坑畲族镇', 330328111: '铜铃山镇', 330328110: '二源镇', 330328101: '百丈漈镇', 330328221: '桂山乡', 330328105: '珊溪镇', 330328222: '双桂乡', 330328223: '公阳乡', 330328224: '平和乡', 330328108: '峃口镇', 330324207: '溪下乡', 330324110: '岩坦镇', 330324208: '界坑乡', 330324107: '巽宅镇', 330324227: '云岭乡', 330324112: '鹤盛镇', 330324226: '茗岙乡', 330324113: '金溪镇', 330324104: '桥下镇', 330326107: '山门镇', 330326118: '怀溪镇', 330326110: '凤卧镇', 330326211: '闹村乡', 330326102: '水头镇', 330326103: '萧江镇', 330326104: '麻步镇', 330326101: '鳌江镇', 330326117: '万全镇', 330327120: '莒溪镇', 330327113: '桥墩镇', 330327106: '望里镇', 330327104: '钱库镇', 330327108: '南宋镇', 330327116: '矾山镇', 330327230: '苍南县所辖乡镇', 330922202: '枸杞乡', 330922203: '花鸟乡', 330922101: '嵊山镇', 330921106: '衢山镇', 330922102: '洋山镇', 330922200: '五龙乡', 330922100: '菜园镇', 330922201: '黄龙乡', 330903104: '桃花镇', 330903001: '沈家门街道', 330903003: '东港街道', 330903004: '朱家尖街道', 330903105: '东极镇', 330903106: '普陀山镇', 330903102: '虾峙镇', 330903100: '六横镇', 330921200: '秀山乡', 330921100: '高亭镇', 330921102: '岱东镇', 330921103: '岱西镇', 330921101: '东沙镇', 330921105: '长涂镇', 330902010: '小沙街道', 330903005: '展茅街道', 330902105: '干�V镇', 330902008: '马岙街道', 330902003: '环南街道', 330902007: '岑港街道', 330902002: '昌国街道', 330902004: '城东街道', 330902009: '双桥街道', 330902007: '千岛街道', 330902005: '盐仓街道', 330902104: '白泉镇', 330902006: '临城街道', 330902100: '金塘镇', 330523001: '递铺街道', 330523111: '天子湖镇', 330523105: '孝丰镇', 330523103: '鄣吴镇', 330523004: '孝源街道', 330523104: '杭垓镇', 330523107: '章村镇', 330523106: '报福镇', 330523206: '山川乡', 330523205: '上墅乡', 330523108: '天荒坪镇', 330523002: '昌硕街道', 330523201: '溪龙乡', 330523003: '灵峰街道', 330522103: '夹浦镇', 330522108: '小浦镇', 330522104: '林城镇', 330522004: '龙山街道', 330521101: '乾元镇', 330521110: '雷甸镇', 330521114: '新安镇', 330503101: '双林镇', 330503100: '南浔镇', 330522109: '煤山镇', 330521103: '洛舍镇', 330522003: '太湖街道', 330522001: '雉城街道', 330522106: '虹星桥镇', 330522202: '吕山乡', 330522110: '和平镇', 330502008: '仁皇山街道', 330502006: '凤凰街道', 330502005: '龙泉街道', 330502003: '爱山街道', 330502002: '朝阳街道', 330502100: '织里镇', 330503104: '旧馆镇', 330503105: '菱湖镇', 330502105: '东林镇', 330503107: '千金镇', 330521102: '新市镇', 330521105: '莫干山镇', 330521001: '武康街道', 330522002: '画溪街道', 330522111: '泗安镇', 330521113: '禹越镇', 330521002: '舞阳街道', 330503103: '善琏镇', 330503108: '石淙镇', 330503102: '练市镇', 330502104: '埭溪镇', 330502009: '滨湖街道', 330523110: '梅溪镇', 330502011: '杨家埠街道', 330502102: '妙西镇', 330502007: '康山街道', 330502012: '环渚街道', 330502200: '道场乡', 330502001: '月河街道', 330502004: '飞英街道', 330502101: '八里店镇', 330503106: '和孚镇', 330521104: '钟管镇', 330522102: '李家巷镇', 330522101: '洪桥镇', 330502010: '龙溪街道', 331125105: '崇头镇', 331124203: '三都乡', 331124212: '板桥畲族乡', 331102204: '丽新畲族乡', 331102201: '仙渡乡', 331102200: '太平乡', 331102103: '老竹畲族镇', 331123104: '金竹镇', 331123105: '大柘镇', 331127001: '红星街道', 331127002: '鹤溪街道', 331181207: '龙南乡', 331181200: '兰巨乡', 331181100: '八都镇', 331121218: '章旦乡', 331121203: '高市乡', 331121209: '巨浦乡', 331121217: '仁宫乡', 331122206: '前路乡', 331121107: '北山镇', 331121219: '阜山乡', 331102007: '联城街道', 331102004: '白云街道', 331102002: '岩泉街道', 331121002: '瓯南街道', 331121108: '山口镇', 331122106: '东渡镇', 331123209: '西畈乡', 331102104: '雅溪镇', 331122102: '新建镇', 331122101: '壶镇镇', 331124205: '四都乡', 331122108: '大源镇', 331122002: '新碧街道', 331123002: '云峰街道', 331122209: '双溪口乡', 330624108: '沙溪镇', 330282123: '龙山镇', 330211100: '澥浦镇', 330206107: '春晓街道', 330212105: '五乡镇', 330206004: '大碶街道', 330211003: '骆驼街道', 330211004: '庄市街道', 330206008: '郭巨街道', 330206105: '白峰街道', 330206105: '梅山街道', 330212100: '瞻岐镇', 330205005: '甬江街道', 330212004: '梅墟街道', 330212104: '东吴镇', 330281100: '临山镇', 330281001: '梨洲街道', 330281103: '泗门镇', 330281600: '余姚市围垦区', 330203100: '高桥镇', 330203102: '集士港镇', 330281201: '鹿亭乡', 330522200: '水口乡', 331022205: '蛇蟠乡', 330329205: '包垟乡', 330329102: '百丈镇', 330329121: '南浦溪镇', 330329103: '筱村镇', 330329208: '凤垟乡', 330329210: '东溪乡', 330329209: '柳峰乡', 330329106: '雅阳镇', 330329207: '雪溪乡', 330329119: '龟湖镇', 330329107: '仕阳镇', 330329206: '大安乡', 330329109: '三魁镇', 330329120: '西旸镇', 330329104: '泗溪镇', 330483100: '乌镇镇', 330483101: '濮院镇', 330783118: '南马镇', 330783003: '南市街道', 330521003: '阜溪街道', 330521004: '下渚湖街道', 330400000: '嘉兴市', 330500000: '湖州市', 330700000: '金华市', 330800000: '衢州市', 330900000: '舟山市', 331000000: '台州市', 330102000: '上城区', 330105000: '拱墅区', 330106000: '西湖区', 330108000: '滨江区', 330109000: '萧山区', 330110000: '余杭区', 330113000: '临平区', 330114000: '钱塘区', 330122000: '桐庐县', 330127000: '淳安县', 330182000: '建德市', 330111000: '富阳区', 330112000: '临安区', 330203000: '海曙区', 330205000: '江北区', 330206000: '北仑区', 330211000: '镇海区', 330212000: '鄞州区', 330225000: '象山县', 330226000: '宁海县', 330281000: '余姚市', 330282000: '慈溪市', 330283000: '奉化区', 330302000: '鹿城区', 330303000: '龙湾区', 330304000: '瓯海区', 330322000: '洞头区', 330324000: '永嘉县', 330326000: '平阳县', 330327000: '苍南县', 330328000: '文成县', 330329000: '泰顺县', 330381000: '瑞安市', 330382000: '乐清市', 330402000: '南湖区', 330411000: '秀洲区', 330421000: '嘉善县', 330424000: '海盐县', 330481000: '海宁市', 330482000: '平湖市', 330483000: '桐乡市', 330502000: '吴兴区', 330503000: '南浔区', 330521000: '德清县', 330522000: '长兴县', 330523000: '安吉县', 330602000: '越城区', 330603000: '柯桥区', 330604000: '上虞区', 330624000: '新昌县', 330681000: '诸暨市', 330683000: '嵊州市', 330702000: '婺城区', 330703000: '金东区', 330723000: '武义县', 330726000: '浦江县', 330727000: '磐安县', 330781000: '兰溪市', 330782000: '义乌市', 330783000: '东阳市', 330784000: '永康市', 330802000: '柯城区', 330803000: '衢江区', 330822000: '常山县', 330824000: '开化县', 330825000: '龙游县', 330881000: '江山市', 330902000: '定海区', 330903000: '普陀区', 330921000: '岱山县', 330922000: '嵊泗县', 331002000: '椒江区', 331003000: '黄岩区', 331004000: '路桥区', 331021000: '玉环市', 331022000: '三门县', 331023000: '天台县', 331024000: '仙居县', 331081000: '温岭市', 331082000: '临海市', 331102000: '莲都区', 331121000: '青田县', 331122000: '缙云县', 331123000: '遂昌县', 331124000: '松阳县', 331125000: '云和县', 331126000: '庆元县', 331127000: '景宁畲族自治县', 331181000: '龙泉市'
}, window.QXAWSSTATIONRAND_URL = rooturl + '/ZJDataCenterDRDS/SURF_Wea_Cbf_MUL_HOR/getSumSurfEleInRegionByTimeRange?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&elements=#elements&timeRange=[#begintime,#endtime]&eleValueRanges=#eleValueRanges&itemlist=#itemlist&areacodes=#regioncode&orderBy=#orderby:desc&limitCnt=#limit', window.QXAWSSTATIONMINRAND_URL = rooturl + '/ZJDataCenterDRDS/SURF_Wea_Cbf_MUL_MIN/getSumSurfEleInRegionByTimeRange?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&elements=#elements&timeRange=(#begintime,#endtime]&itemlist=#itemlist&eleValueRanges=#eleValueRanges&orderBy=#orderby:desc&areacodes=#regioncode&limitCnt=#limit', window.QXAWSWindSTATIONMINRAND_URL = rooturl + '/ZJDataCenterDRDS/SURF_Wea_Cbf_MUL_MIN/getHighSurfEleInRegionByTimeRange?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&elements=#elements&timeRange=(#begintime,#endtime]&eleValueRanges=#eleValueRanges&orderBy=#orderby:desc&areacodes=#regioncode&limitCnt=#limit', window.QXAWSMinLIST_URL = rooturl + '/ZJDataCenterDRDS/SURF_Wea_Cbf_MUL_MIN/getSurfTimeListByTimeRange?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&elements=observtimes&timeRange=[#begintime,#endtime]&orderBy=observtimes:desc&limitCnt=#limit', window.QXAWSRAINLIST_URL = rooturl + '/ZJDataCenterDRDS/SURF_Wea_Cbf_MUL_HOR/getSurfTimeListByTimeRange?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&elements=observtimes&orderBy=observtimes:desc&timeRange=[#begintime,#endtime]&limitCnt=#limit', window.QXAWSCITYAREARAIN_URL = rooturl + '/ZJDataCenterDRDS/SURF_Pre_Stats_City/getSurfEleByTime?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&elements=PRE_SUM,V_NAME&times=#time&pretype=#type&orderBy=PRE_SUM:desc&limitCnt=#limit', window.QXAWSCOUNTRYAREARAIN_URL = rooturl + '/ZJDataCenterDRDS/SURF_Pre_Stats_County/getSurfEleByTime?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&elements=PRE_SUM,V_NAME&times=#time&pretype=#type&orderBy=PRE_SUM:desc&limitCnt=#limit', window.QXRIVEAWSRAINLIST_URL = rooturl + '/ZJDataCenterDRDS/SURF_Wea_Mwr_Pre_Hour/getSurfTimeListByTimeRange?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&elements=observtimes&timeRange=[#begintime,#endtime]&limitCnt=#limit', window.QXRIVEAWSRAINSTATION_URL = rooturl + '/ZJDataCenterDRDS/SURF_Wea_Cbf_MUL_HOR/getSumSurfMwrEleInRegionByTimeRange?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&elements=#elements&timeRange=[#begintime,#endtime]&itemlist=R&areacodes=#regioncode&orderBy=#orderby:desc&limitCnt=#limit', window.QXRIVEAWSCITYAREARAIN_URL = rooturl + '/ZJDataCenterDRDS/SURF_Pre_Stats_City/getSurfEleByTime?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&elements=PRE_SUM,V_NAME&times=#time&pretype=#type&orderBy=PRE_SUM:desc&limitCnt=#limit', window.QXRIVEAWSCOUNTRYAREARAIN_URL = rooturl + '/ZJDataCenterDRDS/SURF_Pre_Stats_County/getSurfEleByTime?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&elements=PRE_SUM,V_NAME&times=#time&pretype=#type&orderBy=PRE_SUM:desc&limitCnt=#limit', window.QXRIVEAWSWINDRANK_URL = rooturl + '/ZJDataCenterDRDS/SURF_Wea_Cbf_MUL_HOR/getHighSurfEleInRegionByTimeRange?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&elements=Lat,Lon,win_s_inst_max,win_d_inst_max,Station_Id_C,Station_name,ct_name&timeRange=[#begintime,#endtime]&areacodes=#regioncode&orderBy=win_s_inst_max:desc&limitCnt=#limit', window.QXRIVEAWSCITYAREAWIND_URL = rooturl + '/ZJDataCenterDRDS/SURF_Wea_Cbf_MUL_HOR/getHighSurfEleInRegionByTimeRangeAndCity?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&elements=win_s_inst_max,Station_Id_C,Station_name,city_name&timeRange=[#begintime,#endtime]&areacodes=#regioncode&orderBy=win_s_inst_max:desc&limitCnt=#limit', window.QXRIVEAWSCOUNTRYAREAWIND_URL = rooturl + '/ZJDataCenterDRDS/SURF_Wea_Cbf_MUL_HOR/getHighSurfEleInRegionByTimeRangeAndCounty?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&elements=win_s_inst_max,Station_Id_C,Station_name,ct_name&timeRange=[#begintime,#endtime]&areacodes=#regioncode&orderBy=win_s_inst_max:desc&limitCnt=#limit', window.WADATA_URL = rooturl + '/ZJDataCenterDRDS/SURF_ZJ_MUL_YJInfo/getSurfEle?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&elements=unitname,unitlat,unitlong,yjvalidtime,yjptime,yjch,yjcontent,yjstatus,yjaddr,unitcode,yjartid,yjid,yjpic,yjsmallpic,yjarea,yjsendtime,yjgrade', window.MAPIMAGELIST_URL = rooturl + '/GetTiledImage9201/GetMapImageList.ashx?type=#type&begintime=#begintime&endtime=#endtime', window.MAPIMAGE_URL = rooturl + '/GetTiledImage9201/GetImage.ashx?type=#type&key=#key', window.DisasterDataLevel_URL = rooturl + '/ZJDataCenter/SEVP_FOR_FTM_Disaster_ZJ/getDisasterComprehensive?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&time=#time&regioncode=#regioncode&type=#type&span=#span', window.DisasterDataList_URL = rooturl + '/ZJDataCenter/SEVP_FOR_FTM_Disaster_ZJ/getDisasterList?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&src=//Disaster/ZJJCDistTimes&beginTime=#begintime&endTime=#endtime&type=#type', window.VECTORMAPDATALIST_URL = 'http://www.qxjcfw.cn/ZJDataCenter/#method/#interface?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&productcategory=#type&time=#time&timetype=#timetype&fcstlevel=#level&level=#level&validtime=#validtime&admincodes=#regioncode&elements=#element&limitcnt=#limit&dataformat=json', window.VECTORMAPDATA_URL = 'http://www.qxjcfw.cn/ZJDataCenter/#method/#interface?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&admincodes=#regioncode&fcstlevel=#level&validtime=#validtime&productcategory=#type&time=#time', window.GRIDMAPDATA_URL = 'http://www.qxjcfw.cn/ZJDataCenter/#method/#interface?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&nlat=#nlat&slat=#slat&wlon=#wlon&elon=#elon&productcategory=#type&time=#time&fcstlevel=#level&validtime=#validtime&dataformat=json', window.FORECASTVECTORMAPDATA_URL = 'http://www.qxjcfw.cn/ZJDataCenter/#method/#interface?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&admincodes=#regioncode&fcstlevel=#level&validtime=#validtime&productcategory=#type&time=#time', window.FORECASTGRIDMAPDATA_URL = 'http://www.qxjcfw.cn/ZJDataCenter/#method/#interface?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&nlat=#nlat&slat=#slat&wlon=#wlon&elon=#elon&productcategory=#type&time=#time&fcstlevel=#level&validtime=#validtime&dataformat=json', window.RealtimeDataByDistrict = 'http://pro-api-vpc.zj121.com/pro-service/wlzx/realtimedatabydistrict?cityName=#city&districtName=#country&appCode=b4fb4462bc034dbf9534e1729f64ef1c', window.RealtimeDataByLonLat = 'http://pro-api-vpc.zj121.com/pro-service/wlzx/realtimedatabylonlat?lon=#lng&lat=#lat&appCode=b4fb4462bc034dbf9534e1729f64ef1c', window.QMAP_TIANDITU_MAP = { titleUrl: 'http://t{s}.tianditu.gov.cn/DataServer?T=vec_w&X={x}&Y={y}&L={z}&tk=5a1d34815475f88e6d8802da6be832ae' }, window.QMAP_TIANDITUI_MAP = { titleUrl: 'http://t{s}.tianditu.gov.cn/DataServer?T=cva_w&X={x}&Y={y}&L={z}&tk=5a1d34815475f88e6d8802da6be832ae' }, window.QMAP_NORMAL_MAP = { titleUrl: 'http://t{s}.tianditu.gov.cn/DataServer?T=vec_w&X={x}&Y={y}&L={z}&tk=5a1d34815475f88e6d8802da6be832ae' }, window.QMAP_RELIEF_MAP = { titleUrl: 'http://t{s}.tianditu.gov.cn/DataServer?T=ter_w&X={x}&Y={y}&L={z}&tk=5a1d34815475f88e6d8802da6be832ae' }, window.QMAP_SATELLITE_MAP = { titleUrl: 'http://t{s}.tianditu.gov.cn/DataServer?T=img_w&X={x}&Y={y}&L={z}&tk=5a1d34815475f88e6d8802da6be832ae' }, window.QMAP_RELIEFI_MAP = { titleUrl: 'http://t{s}.tianditu.gov.cn/DataServer?T=cta_w&X={x}&Y={y}&L={z}&tk=5a1d34815475f88e6d8802da6be832ae' }, window.QMAP_SATELLITEI_MAP = { titleUrl: 'http://t{s}.tianditu.gov.cn/DataServer?T=cia_w&X={x}&Y={y}&L={z}&tk=5a1d34815475f88e6d8802da6be832ae' }, window.QMAP_NORMALI_MAP = { titleUrl: 'http://t{s}.tianditu.gov.cn/DataServer?T=cva_w&X={x}&Y={y}&L={z}&tk=5a1d34815475f88e6d8802da6be832ae' }, window.QMAP_DEEPBLUE_MAP = { titleUrl: 'http://map.geoq.cn/ArcGIS/rest/services/ChinaOnlineStreetPurplishBlue/MapServer/tile/{z}/{y}/{x}' }, window.TTP_URL = 'http://www.qxjcfw.cn/ExportData/ExportData5_4/GetTTS.ashx', window.QXMAP_weatherLevel = {
  1: '晴', 2: '多云', 3: '阴', 4: '小雨', 5: '中雨', 6: '大雨', 7: '暴雨', 9: '强暴雨', 10: '雨夹雪', 11: '小雪', 12: '中雪', 13: '大雪'
}; const datehelper = (function () {
  function a(a, b) { return a ? a.Format(b) : void 0; } function b(a, b) { const c = b.getTime() - a.getTime(); return c < 0 ? 0 : Math.floor(c / 1e3 / 60 / 60); } function c(a) { if (!a) var a = new Date(); const b = new Date(); return b.setUTCFullYear(a.getFullYear()), b.setUTCMonth(a.getMonth()), b.setUTCDate(a.getDate()), b.setUTCHours(a.getHours()), b.setUTCMinutes(a.getMinutes()), b.setUTCSeconds(a.getSeconds()), b; } function d(a, b) { if (!b) var b = new Date(); return b.setHours(b.getHours() - a), b; } function e(a) { if (!a) var a = new Date(); const b = new Date(); return b.setFullYear(a.getUTCFullYear()), b.setMonth(a.getUTCMonth()), b.setDate(a.getUTCDate()), b.setHours(a.getUTCHours()), b.setMinutes(a.getUTCMinutes()), b.setSeconds(a.getUTCSeconds()), b; } function f(a, b) {
    if (a) {
      const c = new Date(); const
        d = {
          'y+': function (a) { c.setFullYear(a); }, 'M+': function (a) { c.setMonth(a - 1, 1); }, 'd+': function (a) { c.setDate(a); }, 'h+': function (a) { c.setHours(a); }, 'm+': function (a) { c.setMinutes(a); }, 's+': function (a) { c.setSeconds(a); }, S(a) { c.setMilliseconds(a); }
        }; for (const e in d) if (new RegExp('(' + e + ')').test(b)) { const f = RegExp.$1; const g = f.length; const h = b.indexOf(f, 0); let i = a.substr(h, g); i = parseInt(i, 10), NaN != i ? d[e](i) : console.log('解析[' + f + ']错误!'); } return c;
    }
  } function g(a) { const b = new Date(a.getTime()); return b.setHours(0), b.setMinutes(0), b.setSeconds(0), b.setMilliseconds(0), b; } function h(a, b) { if (!b) var b = new Date(); b.setMinutes(b.getMinutes() - a); let c = ''; return c = b.getFullYear() + '-', c = c + (b.getMonth() + 1 < 10 ? '0' + (b.getMonth() + 1) : b.getMonth() + 1) + '-', c = c + r(b.getDate()) + ' ', c = c + r(b.getHours()) + ':', c = c + r(b.getMinutes()) + ':', c = c + r(b.getSeconds()) + ''; } function i(a, b) { if (!b) var b = new Date(); const c = new Date(b.getTime()); return c.setHours(c.getHours() + a), c; } function j(a, b) { if (!b) var b = new Date(); const c = new Date(b.getTime()); return c.setMinutes(c.getMinutes() + a), c; } function k(a, b) { if (!b) var b = new Date(); return b.setHours(b.getHours() - a), b; } function l(a, b) { if (!b) var b = new Date(); return b.setMinutes(b.getMinutes() - a), b; } function m(a, b) { const c = b.getTime() - new Date(a).getTime(); const d = c % 864e5; const e = Math.floor(d / 36e5); return e; } function n(a, b) { const c = b.getTime() - new Date(a).getTime(); const d = Math.floor(c / 6e4); return d; } function o() {
    const a = new Date(); var b = a.getDate() > 9 ? a.getDate() : '0' + a.getDate(); const c = a.getFullYear(); const d = a.getMonth() >= 9 ? a.getMonth() + 1 : '0' + (a.getMonth() + 1); var b = a.getDate() > 9 ? a.getDate() : '0' + a.getDate(); const e = a.getHours() > 9 ? a.getHours() : '0' + a.getHours(); const f = Number(a.getMinutes()) > 9 ? a.getMinutes() : '0' + a.getMinutes(); const
      g = c + '/' + d + '/' + b + ' ' + e + ':' + f; return g;
  } function p(a, b) { if (!b) var b = new Date(); b.setDate(b.getDate() + a); let c = ''; return c = b.getFullYear() + '-', c = c + (b.getMonth() + 1 < 10 ? '0' + (b.getMonth() + 1) : b.getMonth() + 1) + '-', c = c + r(b.getDate()) + ' ', c = c + r(b.getHours()) + ':', c = c + r(b.getMinutes()) + ':', c = c + r(b.getSeconds()) + ''; } function q(a) { return new Date(a.getTime()); }Date.prototype.Format = function (a) {
    const b = {
      'M+': this.getMonth() + 1, 'd+': this.getDate(), 'h+': this.getHours(), 'm+': this.getMinutes(), 's+': this.getSeconds(), 'q+': Math.floor((this.getMonth() + 3) / 3), S: this.getMilliseconds()
    }; /(y+)/.test(a) && (a = a.replace(RegExp.$1, (this.getFullYear() + '').substr(4 - RegExp.$1.length))); for (const c in b) new RegExp('(' + c + ')').test(a) && (a = a.replace(RegExp.$1, RegExp.$1.length == 1 ? b[c] : ('00' + b[c]).substr(('' + b[c]).length))); return a;
  }; var r = function (a) { return a < 10 && (a = '0' + a), a; }; return {
    getDateByDateAndDayString: p, getDateFormat: a, parseDate: f, beforeNowtimeByHours: k, beforeNowtimeByMinuString: h, beforeNowtimeByMinu: l, UTCtoBJT: c, BJTtoUTC: e, getWholeTime: o, getDateZearHour: g, getTimeHoursDiff: m, getTimeMinutesDiff: n, addHours: i, beforeNowtime: d, getInervalHour: b, clone: q, addMinutes: j
  };
}()); const QXTtp = {
  version: '1.0',
  Create() {
    this.browser = {
      versions: (function () {
        const a = navigator.userAgent; navigator.appVersion; return {
          trident: a.indexOf('Trident') > -1, presto: a.indexOf('Presto') > -1, webKit: a.indexOf('AppleWebKit') > -1, gecko: a.indexOf('Gecko') > -1 && a.indexOf('KHTML') == -1, mobile: !!a.match(/AppleWebKit.*Mobile.*/) || !!a.match(/AppleWebKit/), ios: !!a.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), android: a.indexOf('Android') > -1 || a.indexOf('Linux') > -1, iPhone: a.indexOf('iPhone') > -1 || a.indexOf('Mac') > -1, iPad: a.indexOf('iPad') > -1, webApp: a.indexOf('Safari') == -1, ie9lt: a.indexOf('Trident') > -1 && a.match(/MSIE/) && a.match(/MSIE ([\d.]+)/)[1] < 9, ie8lt: a.indexOf('Trident') > -1 && a.match(/MSIE/) && a.match(/MSIE ([\d.]+)/)[1] < 8
        };
      }()),
      language: (navigator.browserLanguage || navigator.language).toLowerCase()
    }; const a = this; return this.ttp = function (b, c, d) { const e = window.TTP_URL; const f = new XMLHttpRequest(); f.open('POST', e, !0), f.setRequestHeader('Content-type', 'application/x-www-form-urlencoded'), f.responseType = 'blob', f.send('text=' + b), f.onreadystatechange = function () { if (f.readyState == 4 && f.status == 200) { const b = this.response; a.ado = document.createElement('audio'), a.source = document.createElement('source'), a.ado.style.width = '100%', c && (a.ado.loop = 'loop'), a.source.onload = function (b) { window.URL.revokeObjectURL(a.ado.src); }, a.source.src = window.URL.createObjectURL(b), a.ado.canPlayType('audio/mpeg;') ? a.source.type = 'audio/mp3' : a.source.type = 'audio/mp3', a.source.controls = 'controls', a.ado.appendChild(a.source), a.ado.play(), typeof d === 'function' && d(a.ado); } }; }, this.play = function () { this.ado && this.ado.play(); }, this.stop = function () { this.ado && (this.ado.pause(), this.ado.currentTime = 0); }, this.pause = function () { this.ado && this.ado.pause(); }, this.playOrPause = function (a, b) { const c = document.getElementById(a); b == 0 ? (c.pause(), c.currentTime = 0) : b == 1 ? c.play() : c.paused ? c.play() : (c.pause(), c.currentTime = 0); }, this;
  }
}; const β = {
  version: '4.0',
  author: 'yangming-zjqx,2021 for jcfw',
  browser: {
    versions: (function () {
      const a = navigator.userAgent; navigator.appVersion; return {
        trident: a.indexOf('Trident') > -1, presto: a.indexOf('Presto') > -1, webKit: a.indexOf('AppleWebKit') > -1, gecko: a.indexOf('Gecko') > -1 && a.indexOf('KHTML') == -1, mobile: !!a.match(/AppleWebKit.*Mobile.*/) || !!a.match(/AppleWebKit/), ios: !!a.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), android: a.indexOf('Android') > -1 || a.indexOf('Linux') > -1, iPhone: a.indexOf('iPhone') > -1 || a.indexOf('Mac') > -1, iPad: a.indexOf('iPad') > -1, webApp: a.indexOf('Safari') == -1, ie9lt: a.indexOf('Trident') > -1 && a.match(/MSIE/) && a.match(/MSIE ([\d.]+)/)[1] < 9, ie8lt: a.indexOf('Trident') > -1 && a.match(/MSIE/) && a.match(/MSIE ([\d.]+)/)[1] < 8
      };
    }()),
    language: (navigator.browserLanguage || navigator.language).toLowerCase()
  },
  addCookie(a, b) { const c = new Date(); c.setDate(c.getDate() + 90), document.cookie = escape(a) + '=' + escape(b) + ';expires=' + c.toGMTString(); },
  getCookieValueByName(a) { if (document.cookie) { const b = document.cookie; const c = b.split(';'); for (const d in c) { const e = c[d].split('='); if (e[0] == a) return e[1]; } } return null; }
}; var βObject = βObject || {}; !(function (a) { let b; typeof define === 'function' && define.amd ? define(['β'], a) : typeof module !== 'undefined' ? (b = require('β'), module.exports = a(b)) : (typeof window.L === 'undefined', a(window.L)); }((a) => {
  'base strict';

  a.DrawVectors = a.Polygon.extend({ getPathString() { for (var a = 'M' + this._originalPoints[0].x + ' ' + this._originalPoints[0].y, b = 1; b < this._originalPoints.length; b++)a += 'L' + this._originalPoints[b].x + ' ' + this._originalPoints[b].y; return a += 'Z'; }, onAdd(a) { this._map = a, this._container || (this._initElements(), this._initEvents()), this.projectLatlngs(), this._updatePath(), this._container && this._map._pathRoot.insertBefore(this._container, this._map._pathRoot.firstChild), this.fire('add'), a.on({ viewreset: this.projectLatlngs, moveend: this._updatePath }, this); } }), a.drawVectors = function (b, c) { return new a.DrawVectors(b, c); }, a.DrawVectorLines = a.Polyline.extend({ getPathString() { for (var a = 'M' + this._originalPoints[0].x + ' ' + this._originalPoints[0].y, b = 1; b < this._originalPoints.length; b++)a += 'L' + this._originalPoints[b].x + ' ' + this._originalPoints[b].y; return a += 'Z'; }, onAdd(a) { this._map = a, this._container || (this._initElements(), this._initEvents()), this.projectLatlngs(), this._updatePath(), this._container && this._map._pathRoot.insertBefore(this._container, this._map._pathRoot.firstChild), this.fire('add'), a.on({ viewreset: this.projectLatlngs, moveend: this._updatePath }, this); } }), a.drawVectorLines = function (b, c) { return new a.DrawVectorLines(b, c); }, (function (a, b) { (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' ? module.exports = b(require('grid-js-β')) : typeof define === 'function' && define.amd ? define(['grid-js-β'], (c) => a.returnExportsGlobal = b(window)) : window.DrawJSβ = b(window); }(void 0, (b) => {
    var c = {
      map: null,
      callback: null,
      init(a, b) { !a != null && (c.map = a.map, c.callback = a.selectcallback, typeof b === 'function' && b(this)); },
      poly_points: [],
      startPoint: null,
      endPoint: null,
      rectangle: null,
      tips: null,
      layer: a.layerGroup(),
      color: '#0D82D7',
      addRectangle() { c.destory(); const b = []; b.push(c.startPoint), b.push(c.endPoint), c.rectangle = a.rectangle(b, { color: c.color, weight: 1 }), c.rectangle.addTo(c.layer); const d = c.rectangle.getBounds().getNorthWest(); const e = c.rectangle.getBounds().getNorthEast(); const f = c.rectangle.getBounds().getSouthEast(); const g = d.distanceTo(e) / 1e3; const h = e.distanceTo(f) / 1e3; Number(g) * Number(h); c.layer.addTo(c.map); },
      addTips(b) {
        console.log('面积:' + b), c.tips = a.circleMarker(c.endPoint, { color: c.color }), c.tips.setRadius(1), c.tips.bindLabel('面积：' + b + '(平方公里)', {
          noHide: !0, direction: 'right', clickable: !0, className: 'β-label-tffq'
        }), c.tips.addTo(c.layer);
      },
      start() { c.map.on('mousedown ', c.mousedown), c.map.dragging.disable(); },
      mousedown(a) { c.rectangle = null, c.startPoint = a.latlng, c.map.on('mousemove', c.mousemove); },
      mousemove(a) { c.endPoint = a.latlng, c.addRectangle(), c.map.off('mousedown ', c.mousedown).on('mouseup', c.mouseup); },
      mouseup(a) { c.map.off('mousemove', c.mousemove).off('mouseup', c.mouseup).off('mousedown', c.mousedown), c.destory(); const b = GridJSβ.selectPointByType(c.rectangle.getBounds()); typeof c.callback === 'function' && c.callback(b), c.start(); },
      end() { c.map.off('mousemove', c.mousemove).off('mouseup', c.mouseup).off('mousedown', c.mousedown), c.map.dragging.enable(), c.destory(); },
      destory() { c.rectangle && c.layer.removeLayer(c.rectangle); }
    }; return c;
  })), (function (a, b) { (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' ? module.exports = b(require('grid-js-β')) : typeof define === 'function' && define.amd ? define(['grid-js-β'], (c) => a.returnExportsGlobal = b(window)) : window.GridJSβ = b(window); }(void 0, (b) => {
    var d = {
      _map: null,
      _data: null,
      _options: null,
      isShowZero: !1,
      GridMarkerLayers: [],
      _valueclass: null,
      init(a, b) {
        $.ajax({
          type: 'GET', url: a.dataUrl, dataType: 'json', error(a) { typeof b === 'function' && b(null); }, success(e) { d._map = a.map, d._options = a, d._data = e, d.isShowZero = a.isshowzero, c && c != null && typeof c !== 'undefined' ? d._valueclass = c : d._valueclass = -9999.9, e != null && (e.returnCode == 0 && (d.removeGrids(), e.DS.length > 0 && d.addGrids()), typeof b === 'function' && b(d)); }
        });
      },
      gridLayer: {},
      LocationInterval2Pixel(a, b) { var b = this._map.getZoom(); let c = 256 * a / 360; return c *= Math.pow(2, b); },
      GridChangeHandler: {},
      pregridbound: {},
      removeGrids() { if (this._map && this.GridMarkerLayers) { this._map.off('moveend', this.GridChangeHandler); for (const a in this.GridMarkerLayers) this._map.removeLayer(this.GridMarkerLayers[a]); this.GridMarkerLayers = {}; } },
      addGrids() { if (this._data && this._map) { this.removeGrids(), this.GridMarkerLayers = []; const b = this._map.getZoom(); if (!(this._data.DS.lenght <= 0)) { for (var c, e, f, g, h = 1, i = this._data.lonStep, j = this._data.latStep, k = this._data.startLon, l = this._data.startLat, m = this._data.endLon, n = this._data.endLat, o = this._data.lonCount, p = (this._data.latCount, this.LocationInterval2Pixel(i, b)); p < 50;)p *= 3, h *= 2; h != 1 && b >= 8 && (h *= 2); const q = this._map.getBounds(); let r = q._southWest.lng; let s = q._northEast.lng; let t = q._southWest.lat; let u = q._northEast.lat; k > r && (r = k), u > n && (u = n), s > m && (s = m), l > t && (t = l), g = parseInt((r - k) / i), f = parseInt((t - l) / j), c = parseInt((s - r) / i) + 1, e = parseInt((u - t) / j) + 1; for (let v = f; f + e > v; v++) for (let w = g; g + c > w; w++) if (!(v * o + w >= this._data.DS.length)) { const x = this._data.DS[v * o + w]; if (!(x < -9990 || x == 9999 || this.isShowZero == 0 && x <= 0 || d._valueclass && x < d._valueclass || w % h != 0 || v % h != 0)) { const y = k + w * i; const z = l + v * j; const A = a.divIcon({ html: String(x.toFixed(0)), className: 'qxmap-labelgrid', iconSize: [0, 30] }); const B = a.marker([z, y], { icon: A }).addTo(this._map); this.GridMarkerLayers.push(B), B.id = x.toFixed(0); } } const C = this; this.GridChangeHandler = function () { if (C._data) { const a = C._map.getBounds(); (C.pregridbound || typeof C.pregridbound._northEast === 'undefined' || C.pregridbound._northEast.lat != a._northEast.lat || C.pregridbound._northEast.lng != a._northEast.lng) && (C.pregridbound = a, C._map && C._map.off('moveend', C.GridChangeHandler), C.addGrids()); } }, this._map.on('moveend', this.GridChangeHandler); } } },
      selectPointByType(a) { const b = []; if (this.gridLayer) for (const c in this.gridLayer._layers) { const d = this.gridLayer._layers[c]; a.contains(d._latlng) && b.push({ value: d.id, lng: d._latlng.lng, lat: d._latlng.lat }); } return b; },
      showValueClassByType(a) { if (a && (d._valueclass = a, this.gridLayer)) for (const b in this.gridLayer._layers)b.id < a ? this._map.hasLayer(b) && this._map.removeLayer(b) : this._map.hasLayer(b) || this._map.addLayer(b); }
    }; return d;
  })), (function (a, b) { (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' ? module.exports = b(require('grid-js-Fβ')) : typeof define === 'function' && define.amd ? define(['grid-js-Fβ'], (c) => a.returnExportsGlobal = b(window)) : window.FDrawJSβ = b(window); }(void 0, (b) => {
    var c = {
      map: null,
      callback: null,
      init(a, b) { !a != null && (c.map = a.map, c.callback = a.selectcallback, typeof b === 'function' && b(this)); },
      poly_points: [],
      startPoint: null,
      endPoint: null,
      rectangle: null,
      tips: null,
      layer: a.layerGroup(),
      color: '#0D82D7',
      addRectangle() { c.destory(); const b = []; b.push(c.startPoint), b.push(c.endPoint), c.rectangle = a.rectangle(b, { color: c.color, weight: 1 }), c.rectangle.addTo(c.layer); const d = c.rectangle.getBounds().getNorthWest(); const e = c.rectangle.getBounds().getNorthEast(); const f = c.rectangle.getBounds().getSouthEast(); const g = d.distanceTo(e) / 1e3; const h = e.distanceTo(f) / 1e3; Number(g) * Number(h); c.layer.addTo(c.map); },
      addTips(b) {
        console.log('面积:' + b), c.tips = a.circleMarker(c.endPoint, { color: c.color }), c.tips.setRadius(1), c.tips.bindLabel('面积：' + b + '(平方公里)', {
          noHide: !0, direction: 'right', clickable: !0, className: 'β-label-tffq'
        }), c.tips.addTo(c.layer);
      },
      start() { c.map.on('mousedown ', c.mousedown), c.map.dragging.disable(); },
      mousedown(a) { c.rectangle = null, c.startPoint = a.latlng, c.map.on('mousemove', c.mousemove); },
      mousemove(a) { c.endPoint = a.latlng, c.addRectangle(), c.map.off('mousedown ', c.mousedown).on('mouseup', c.mouseup); },
      mouseup(a) { c.map.off('mousemove', c.mousemove).off('mouseup', c.mouseup).off('mousedown', DrawJSβ.mousedown), c.destory(); const b = FGridJSβ.selectPointByType(c.rectangle.getBounds()); typeof c.callback === 'function' && c.callback(b), c.start(); },
      end() { c.map.off('mousemove', c.mousemove).off('mouseup', c.mouseup).off('mousedown', DrawJSβ.mousedown), c.map.dragging.enable(), c.destory(); },
      destory() { c.rectangle && c.layer.removeLayer(c.rectangle); }
    }; return c;
  })), (function (a, b) { (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' ? module.exports = b(require('fgrid-js-β')) : typeof define === 'function' && define.amd ? define(['fgrid-js-β'], (c) => a.returnExportsGlobal = b(window)) : window.FGridJSβ = b(window); }(void 0, (b) => {
    var d = {
      _map: null,
      _datav: null,
      _datau: null,
      _options: null,
      _colorfun: null,
      isShowZero: !1,
      _isshowwindclass: !1,
      _valueclass: null,
      init(a, b) {
        $.ajax({
          type: 'GET',
          url: a.dataUrlU,
          dataType: 'json',
          error(a) { alert('failure'); },
          success(e) {
            e != null && e.returnCode == 0 && (d._datau = e, $.ajax({
              type: 'GET', url: a.dataUrlV, dataType: 'json', error(a) { alert('failure'); }, success(f) { d._map = a.map, d._options = a, d._datav = f, d._isshowwindclass = a.isshowwindclass, d._colorfun = a.colorfun, d.isShowZero = a.isshowzero, c && c != null && typeof c !== 'undefined' ? d._valueclass = c : d._valueclass = -9999.9, f != null && (f.returnCode == 0 && (d.removeGrids(), f.DS.length > 0 && f.DS.length == e.DS.length && d.addGrids()), typeof b === 'function' && b(d)); }
            }));
          }
        });
      },
      gridLayer: {},
      LocationInterval2Pixel(a, b) { var b = this._map.getZoom(); let c = 256 * a / 360; return c *= Math.pow(2, b); },
      GridChangeHandler: {},
      pregridbound: {},
      removeGrids() { this._map && this.gridLayer && (this._map.off('moveend', this.GridChangeHandler), this._map.removeLayer(this.gridLayer), d.gridLayer = {}); },
      addGrids() {
        if (this._datau && this._datav && this._map) {
          this.removeGrids(), this.gridLayer = a.layerGroup(); const b = this._map.getZoom(); if (!(this._datau.DS.lenght <= 0 || this._datav.DS.lenght <= 0)) {
            for (var c, e, f, g, h = 1, i = this._datav.lonStep, j = this._datav.latStep, k = this._datav.startLon, l = this._datav.startLat, m = this._datav.endLon, n = this._datav.endLat, o = this._datav.lonCount, p = (this._datav.latCount, this.LocationInterval2Pixel(i, b)); p < 50;)p *= 3, h *= 2; h != 1 && b >= 8 && (h *= 2); const q = this._map.getBounds(); let r = q._southWest.lng; let s = q._northEast.lng; let t = q._southWest.lat; let u = q._northEast.lat; k > r && (r = k), u > n && (u = n), s > m && (s = m), l > t && (t = l), g = parseInt((r - k) / i), f = parseInt((t - l) / j), c = parseInt((s - r) / i) + 1, e = parseInt((u - t) / j) + 1; for (var v, w, x = '#333', y = f; f + e > y; y++) {
              for (let z = g; g + c > z; z++) {
                if (!(y * o + z >= this._datav.DS.length)) {
                  const A = this._datav.DS[y * o + z]; if (!(A < -9990 || A > 9990)) {
                    const B = this._datau.DS[y * o + z]; if (!(B < -9990 || B > 9990)) {
                      if (this._options.iswindtype == 'uv') { v = Math.sqrt(B * B + A * A); const C = 270 - 180 * Math.atan2(A, B) / Math.PI; w = C % 360; } else v = A, w = B; if (d._colorfun != null && (x = d._colorfun(v)), !(this.isShowZero == 0 && v <= 0 || d._valueclass && v < d._valueclass || z % h != 0 || y % h != 0)) {
                        const D = k + z * i; const E = l + y * j; const F = this.GetWindClassByWindVelocity(v); if (d._isshowwindclass && d._isshowwindclass == 1) {
                          if (F > 0) {
                            const G = a.circleMarker([E, D], {
                              color: '#FFF', weight: 1, opacity: 0, fill: !1
                            }).setRadius(1).bindLabel(String(F.toFixed(0)), { noHide: !0, className: 'β-labelgrid' }).addTo(this.gridLayer); G.id = F.toFixed(0);
                          }
                        } else if (F > 0) { const H = ['L', '1', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K']; const I = '<div style="position: absolute;left:-40px;top:-34px;width:68px;height:68px;-moz-transform: rotate(' + w + 'deg); -webkit-transform: rotate(' + w + 'deg); transform: rotate(' + w + 'deg);"><span class="βf" style="color: ' + x + '; ">' + H[F] + '</span></div>'; const J = a.stationDiv({ className: 'my-div-icon', html: I }); const K = a.marker([E, D], { icon: J }).bindLabel(v, { noHide: !1, direction: 'top', className: 'β-labelgrid' }); K.addTo(this.gridLayer), K.id = v.toFixed(1); }
                      }
                    }
                  }
                }
              }
            } this.gridLayer.addTo(this._map); const L = this; this.GridChangeHandler = function () { if (d._datau && d._datav) { const a = L._map.getBounds(); (L.pregridbound || typeof L.pregridbound._northEast === 'undefined' || L.pregridbound._northEast.lat != a._northEast.lat || L.pregridbound._northEast.lng != a._northEast.lng) && (L.pregridbound = a, d.addGrids()); } }, this._map.on('moveend', this.GridChangeHandler);
          }
        }
      },
      GetWindClassByWindVelocity(a) { return a > 999 ? 17 : a < 0.3 ? 0 : a >= 0.3 && a < 1.6 ? 1 : a >= 1.6 && a < 3.4 ? 2 : a >= 3.4 && a < 5.5 ? 3 : a >= 5.5 && a < 8 ? 4 : a >= 8 && a < 10.8 ? 5 : a >= 10.8 && a < 13.9 ? 6 : a >= 13.9 && a < 17.2 ? 7 : a >= 17.2 && a < 20.8 ? 8 : a >= 20.8 && a < 24.5 ? 9 : a >= 24.5 && a < 28.5 ? 10 : a >= 28.5 && a < 32.7 ? 11 : a >= 32.7 && a < 37 ? 12 : a >= 37 && a < 41.5 ? 13 : a >= 41.5 && a < 46.2 ? 14 : a >= 46.2 && a < 51 ? 15 : a >= 51 && a < 56.1 ? 16 : 17; },
      selectPointByType(a) { const b = []; if (this.gridLayer) for (const c in this.gridLayer._layers) { const d = this.gridLayer._layers[c]; a.contains(d._latlng) && b.push({ value: d.id, lng: d._latlng.lng, lat: d._latlng.lat }); } return b; },
      showValueClassByType(a) { if (a && (d._valueclass = a, this.gridLayer)) for (const b in this.gridLayer._layers)b.id < a ? this._map.hasLayer(b) && this._map.removeLayer(b) : this._map.hasLayer(b) || this._map.addLayer(b); }
    }; return d;
  })), (function (a, b) { (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' ? module.exports = b(require('vector-js-β')) : typeof define === 'function' && define.amd ? define(['vector-js-β'], (c) => a.returnExportsGlobal = b(window)) : window.VectorJSβ = b(window); }(void 0, (b) => {
    var c = {
      _map: null,
      _data: null,
      _options: null,
      _productcategory: null,
      _showtype: !1,
      _valueclass: null,
      _colorbar: null,
      veatorC: {},
      _datas: {},
      _opacity: 0.8,
      _polyback: { regions: [], inverted: !1 },
      _ispoly: !1,
      init(a, b) { c.getVectorData(a.dataUrl, (d) => { c._map = a.map, c._options = a, c._datas = d, c._showtype = a.showtype, c._productcategory = a.productcategory, d != null && (c.veatorC && c.veatorC[c._productcategory] && c.removeVectorProductByProdCode(c._productcategory), Object.keys(d).length > 0 && (c.removeVectorProductByType(), c.veatorC[c._productcategory] = { S: [], L: [] }, c.addVectorProduct(2)), typeof b === 'function' && b(c)); }); },
      getColor(a, b, c) { const d = new DataView(a, b, c); let e = 0; const f = d.getUint8(e); e += 1; const g = d.getUint8(e); e += 1; const h = d.getUint8(e); e += 1; const i = d.getUint8(e); return e += 1, 'rgba(' + g + ',' + h + ',' + i + ',' + f + ')'; },
      decodeUTF8(a) { for (var b = [], c = 0; c < a.length;) { let d = a[c++]; switch (d >> 4) { case 12: case 13: d = (31 & d) << 6 | 63 & a[c++]; break; case 14: d = (15 & d) << 12 | (63 & a[c++]) << 6 | 63 & a[c++]; }b.push(d); } return String.fromCharCode.apply(null, b); },
      getVectorData(a, b) { const d = new XMLHttpRequest(); d.open('GET', a, !0), d.responseType = 'arraybuffer', d.onload = function (a) { const e = d.response; if (e) { let f = 0; const g = new DataView(e); const h = c.decodeUTF8(new Uint8Array(e, f, 4)); if (f += 4, h !== 'zjqx') throw new Error("expected 'head' but found '" + h + "'"); const i = g.getInt16(f, !0); if (f += 2, i != 0) return; g.getInt16(f, !0); f += 2; g.getInt16(f, !0); f += 2; g.getInt16(f, !0); f += 2; g.getInt16(f, !0); f += 2; g.getInt16(f, !0); f += 2; g.getInt16(f, !0); f += 2; const j = g.getInt16(f, !0); f += 2; for (var k = {}, l = f, m = 0; j > m; m++) { const n = 0.01 * g.getInt32(f, !0); const o = c.getColor(e, l + 4 * m + 4 * j, 4); k[n] = o, f += 4; }f += 4 * j; const p = {}; const q = g.getInt16(f, !0); f += 2; const r = g.getInt16(f, !0); f += 2; for (var m = 0; r > m && c.decodeUTF8(new Uint8Array(e, f, 3)) !== 'end'; m++) { const s = g.getInt16(f, !0); f += 2; const t = 0.01 * g.getInt32(f, !0); const u = String(t.toFixed(6)); f += 4; for (var v = [], w = 0; s - 1 > w; w++) { const x = q == 2 ? 0.01 * g.getInt16(f, !0) : 0.001 * g.getInt32(f, !0); f += q; const y = q == 2 ? 0.01 * g.getInt16(f, !0) : 0.001 * g.getInt32(f, !0); f += q, v.push([y, x]); } if (k.hasOwnProperty(t)) if (p.hasOwnProperty(u))p[u].latAndLongs.push(v); else { const z = { value: t, color: k[t], latAndLongs: [] }; z.latAndLongs.push(v), p[u] = z; } }c._colorbar = k, typeof b === 'function' && b(p); } }, d.send(null); },
      getColorBar() { return this._colorbar; },
      addVectorNoClip() {
        if (this._datas) {
          let b; let c; let d; this._showtype; for (var e in this.veatorC) for (var f in this.veatorC[e]) { for (var g in this.veatorC[e][f]) this._map.hasLayer(this.veatorC[e][f][g]) && this._map.removeLayer(this.veatorC[e][f][g]); this.veatorC[e][f] = []; } for (var e in this._datas) {
            c = 1, d = 1; const h = this._datas[e]; if (!(this._valueclass && h.value < this._valueclass) && h.latAndLongs) {
              const i = h.latAndLongs; const j = a.polygon(i, {
                color: h.color, weight: 1, opacity: c, fillColor: h.color, fillOpacity: d, className: 'β-vector'
              }); j.id = h.value, b = 'S', this.veatorC[this._productcategory][b].push(j);
            }
          } for (var e in this.veatorC) for (var f in this.veatorC[e]) for (var g in this.veatorC[e][f]) this._valueclass && this.veatorC[e][f][g].id < this._valueclass || this.veatorC[e][f][g].addTo(this._map); const k = $('.leaflet-overlay-pane').children('svg'); k.css('opacity', this._opacity);
        }
      },
      addVectorProduct(a) { a && (this._showtype = a), this._datas && this.addVectorNoClip(); },
      removeVectorProductAll() { if (this.veatorC) for (const a in this.veatorC) { for (const b in this.veatorC[a]) for (const c in this.veatorC[a][b]) this._map.removeLayer(this.veatorC[a][b][c]); delete this.veatorC[a]; } },
      removeVectorProductByType() { if (this.veatorC[this._productcategory]) { for (const a in this.veatorC[this._productcategory]) for (const b in this.veatorC[this._productcategory][a]) this._map.hasLayer(this.veatorC[this._productcategory][a][b]) && this._map.removeLayer(this.veatorC[this._productcategory][a][b]); delete this.veatorC[this._productcategory]; } },
      removeVectorProductByProdCode(a) { if (this.veatorC[a]) for (const b in this.veatorC[a]) { for (const c in this.veatorC[a][b]) this._map.hasLayer(this.veatorC[a][b][c]) && this._map.removeLayer(this.veatorC[a][b][c]); this.veatorC[a][b] = []; } },
      removeVectorProductByDataAndShowType(a) { let b; if (this.veatorC[this._productcategory]) if (a && a == 1) { b = 'L'; for (var d in this.veatorC[this._productcategory][b]) this._map.removeLayer(this.veatorC[this._productcategory][b][d]), delete this.veatorC[this._productcategory][b][d]; this.veatorC[this._productcategory][b] = []; } else if (a && a == 2) { b = 'S'; for (var d in this.veatorC[this._productcategory][b]) this._map.removeLayer(this.veatorC[this._productcategory][b][d]), delete this.veatorC[this._productcategory][b][d]; this.veatorC[this._productcategory][b] = []; } else c.removeVectorProductByType(); },
      showValueClassByType(a) { if (a) { this._valueclass = a; for (var b in this.veatorC) for (var c in this.veatorC[b]) for (var d in this.veatorC[b][c]) this._map.hasLayer(this.veatorC[b][c][d]) && this._map.removeLayer(this.veatorC[b][c][d]); for (var b in this.veatorC) for (var c in this.veatorC[b]) for (var d in this.veatorC[b][c]) this._valueclass && this.veatorC[b][c][d].id < this._valueclass || this.veatorC[b][c][d].addTo(this._map); } },
      hideVectorProduct() { if (this.veatorC[this._productcategory]) for (const a in this.veatorC[this._productcategory]) for (const b in this.veatorC[this._productcategory][a]) { const c = this.veatorC[this._productcategory][a][b]; this._map.hasLayer(c) && this._map.removeLayer(c); } },
      showVectorProduct() { if (this.veatorC[this._productcategory]) for (const a in this.veatorC[this._productcategory]) for (const b in this.veatorC[this._productcategory][a]) { const c = this.veatorC[this._productcategory][a][b]; this._valueclass && c.id < this._valueclass || this._map.hasLayer(c) || this._map.addLayer(c); } },
      hideVectorProducts() { const a = $('.leaflet-overlay-pane').children('svg'); a.css('opacity', '0'); },
      visiableVectorProducts() { const a = $('.leaflet-overlay-pane').children('svg'); a.css('opacity', this._opacity); },
      setVectorProductsOpacity(a) { if (a) { this._opacity = a; const b = $('.leaflet-overlay-pane').children('svg'); b.css('opacity', a); } }
    }; return c;
  })), β.addGridMapProduct = function (a, b, c) {
    if (a && a.productcategory) {
      a.nlat || typeof a.nlat !== 'undefined' || (a.nlat = 40), a.slat || typeof a.slat !== 'undefined' || (a.slat = 20), a.wlon || typeof a.wlon !== 'undefined' || (a.wlon = 70), a.elon || typeof a.elon !== 'undefined' || (a.elon = 128), a.level || typeof a.level !== 'undefined' || (a.level = 0), a.validtime || typeof a.validtime !== 'undefined' || (a.validtime = 0), a.isshowzero || typeof a.isshowzero !== 'undefined' || (a.isshowzero = !0); let d; d = GRIDMAPDATA_URL.replace(/#type/g, a.productcategory), d = d.replace(/#method/g, a.method), d = d.replace(/#interface/g, a.interface), d = d.replace(/#key/g, a.key), d = d.replace(/#pwd/g, a.pwd), d = d.replace(/#nlat/g, a.nlat), d = d.replace(/#slat/g, a.slat), d = d.replace(/#wlon/g, a.wlon), d = d.replace(/#elon/g, a.elon), d = d.replace(/#level/g, a.level), d = d.replace(/#validtime/g, a.validtime), d = d.replace(/#time/g, a.time); const e = function (a) { console.log('error...'), console.log(a); }; DrawJSβ.init({ map: βObject, selectcallback: c }, (a) => { typeof b === 'function' && b(a); }), GridJSβ.init({
        map: βObject, dataUrl: d, isshowzero: a.isshowzero, errorCallback: e
      }, (a) => { typeof b === 'function' && b(a); });
    }
  }, β.removeGridMapProduct = function () { GridJSβ && GridJSβ.removeGrids(); }, β.removeGridMapProductByLayer = function (a) { a && a.removeGrids(); }, β.addFGridMapProduct = function (a, b, c) {
    if (a && a.productcategory_U && a.productcategory_V) {
      a.nlat || typeof a.nlat !== 'undefined' || (a.nlat = 40), a.slat || typeof a.slat !== 'undefined' || (a.slat = 20), a.wlon || typeof a.wlon !== 'undefined' || (a.wlon = 70), a.elon || typeof a.elon !== 'undefined' || (a.elon = 128), a.level || typeof a.level !== 'undefined' || (a.level = 0), a.validtime || typeof a.validtime !== 'undefined' || (a.validtime = 0), a.isshowzero || typeof a.isshowzero !== 'undefined' || (a.isshowzero = !1); let d; d = GRIDMAPDATA_URL.replace(/#type/g, a.productcategory_U), d = d.replace(/#method/g, a.method), d = d.replace(/#interface/g, a.interface), d = d.replace(/#key/g, a.key), d = d.replace(/#pwd/g, a.pwd), d = d.replace(/#nlat/g, a.nlat), d = d.replace(/#slat/g, a.slat), d = d.replace(/#wlon/g, a.wlon), d = d.replace(/#elon/g, a.elon), d = d.replace(/#level/g, a.level), d = d.replace(/#validtime/g, a.validtime), d = d.replace(/#time/g, a.time); let e; e = GRIDMAPDATA_URL.replace(/#type/g, a.productcategory_V), e = e.replace(/#method/g, a.method), e = e.replace(/#interface/g, a.interface), e = e.replace(/#key/g, a.key), e = e.replace(/#pwd/g, a.pwd), e = e.replace(/#nlat/g, a.nlat), e = e.replace(/#slat/g, a.slat), e = e.replace(/#wlon/g, a.wlon), e = e.replace(/#elon/g, a.elon), e = e.replace(/#level/g, a.level), e = e.replace(/#validtime/g, a.validtime), e = e.replace(/#time/g, a.time); const f = function (a) { console.log('error...'), console.log(a); }; FDrawJSβ.init({ map: βObject, selectcallback: c }, (a) => { typeof b === 'function' && b(a); }), FGridJSβ.init({
        map: βObject, dataUrlU: d, dataUrlV: e, iswindtype: a.iswindtype, isshowzero: a.isshowzero, colorfun: a.colorfun, isshowwindclass: a.isshowwindclass, errorCallback: f
      }, (a) => { typeof b === 'function' && b(a); });
    }
  }, β.removeFGridMapProduct = function () { FGridJSβ && FGridJSβ.removeGrids(); }, β.removeFGridMapProductByLayer = function (a) { a && a.removeGrids(); }, β.removeGridLayerForContorl = function () { VectorJSβ && (β.removeFGridMapProduct(), β.removeGridMapProduct()); }, β.addGridLayerForContorl = function (a) {
    if (VectorJSβ && βProductInfo) {
      if (βProductInfo.iswind) {
        var b = {
          productcategory_U: βProductInfo.productcategory_U, productcategory_V: βProductInfo.productcategory_V, iswindtype: βProductInfo.iswindtype, colorfun: βProductInfo.colorfun, time: βProductInfo.time, method: βProductInfo.gridmethod, interface: βProductInfo.gridinterface, key: βProductInfo.key, pwd: βProductInfo.pwd, nlat: βProductInfo.nlat, slat: βProductInfo.slat, wlon: βProductInfo.wlon, elon: βProductInfo.elon, level: βProductInfo.level, validtime: βProductInfo.validtime, isshowzero: βProductInfo.isshowzero, selectcallback: βProductInfo.selectcallback, isshowwindclass: typeof a === 'undefined' ? !0 : a
        }; β.addFGridMapProduct(b, null, b.selectcallback);
      } else {
        var b = {
          productcategory: βProductInfo.productcategory, time: βProductInfo.time, method: βProductInfo.gridmethod, interface: βProductInfo.gridinterface, key: βProductInfo.key, pwd: βProductInfo.pwd, nlat: βProductInfo.nlat, slat: βProductInfo.slat, wlon: βProductInfo.wlon, elon: βProductInfo.elon, level: βProductInfo.level, validtime: βProductInfo.validtime, isshowzero: βProductInfo.isshowzero, selectcallback: βProductInfo.selectcallback
        }; β.addGridMapProduct(b, null, b.selectcallback);
      }
    }
  }; let b = null; β.addΦVectorLayer = function (a, b, c) { βObject = a, β.addVectorMapProduct(a, b, (a) => { typeof c === 'function' && c(a); }); }, β.addVectorMapProduct = function (a, b, d) {
    if (b && (βProductInfo = b, c = null, b.isforecast || typeof b.isforecast !== 'undefined' || (b.isforecast = !0), b.validtime || typeof b.validtime !== 'undefined' || (b.validtime = 0), b.isshowzero || typeof b.isshowzero !== 'undefined' || (b.isshowzero = !0), b.isclip || typeof b.isclip !== 'undefined' || (b.isclip = !1), b.productcategory)) {
      let e; e = b.isforecast && b.isforecast == 1 ? FORECASTVECTORMAPDATA_URL.replace(/#validtime/g, b.validtime) : VECTORMAPDATA_URL.replace(/#validtime/g, b.validtime), e = e.replace(/#type/g, b.productcategory), e = e.replace(/#time/g, b.time), e = e.replace(/#regioncode/g, b.regioncode), e = e.replace(/#method/g, b.method), e = e.replace(/#interface/g, b.interface), e = e.replace(/#key/g, b.key), e = e.replace(/#pwd/g, b.pwd), e = e.replace(/#level/g, b.level), βProductInfo = b; const f = function (a) { console.log('error...'), console.log(a); }; VectorJSβ.init({
        map: a, dataUrl: e, isshowzero: b.isshowzero, productcategory: b.productcategory, time: b.time, isclip: !1, errorCallback: f
      }, (a) => {
        if (βProductInfo.isshowgrid && βProductInfo.isshowgrid == 1) {
          if (β.removeFGridMapProduct(), β.removeGridMapProduct(), βProductInfo.iswind) {
            var b = {
              productcategory_U: βProductInfo.productcategory_U, productcategory_V: βProductInfo.productcategory_V, iswindtype: βProductInfo.iswindtype, colorfun: βProductInfo.colorfun, time: βProductInfo.time, method: βProductInfo.gridmethod, interface: βProductInfo.gridinterface, key: βProductInfo.key, pwd: βProductInfo.pwd, nlat: βProductInfo.nlat, slat: βProductInfo.slat, wlon: βProductInfo.wlon, elon: βProductInfo.elon, level: βProductInfo.level, validtime: βProductInfo.validtime, isshowzero: βProductInfo.isshowzero, selectcallback: βProductInfo.selectcallback, isshowwindclass: !0
            }; β.addFGridMapProduct(b, null, b.selectcallback);
          } else {
            var b = {
              productcategory: βProductInfo.productcategory, time: βProductInfo.time, method: βProductInfo.gridmethod, interface: βProductInfo.gridinterface, key: βProductInfo.key, pwd: βProductInfo.pwd, nlat: βProductInfo.nlat, slat: βProductInfo.slat, wlon: βProductInfo.wlon, elon: βProductInfo.elon, level: βProductInfo.level, validtime: βProductInfo.validtime, isshowzero: βProductInfo.isshowzero, selectcallback: βProductInfo.selectcallback
            }; β.addGridMapProduct(b, null, b.selectcallback);
          }
        } typeof d === 'function' && d(a);
      });
    }
  }, β.setVectorProductsOpacity = function (a) { VectorJSβ && VectorJSβ.setVectorProductsOpacity(a); }, β.removeΦVectorLayer = function () { VectorJSβ && VectorJSβ.removeVectorProductByType(); }, β.removeΦGridLayer = function () { β.removeGridMapProduct(); }, β.removeVectorMapProductByLayer = function (a, d) { if (a) { a.removeVectorProductByType(); var d; d || typeof d !== 'undefined' || (d = !0), b && d && (βObject.removeControl(b), b = null, c = null); } }; var c = null; β.showValueClassByType = function (a) { c = a, VectorJSβ && VectorJSβ.showValueClassByType(a), GridJSβ && GridJSβ._data != null && (GridJSβ.removeGrids(), GridJSβ._data.length > 0 && GridJSβ.addGrids()); }, β.showValueClassByTypeAndLayer = function (a, b, d) { c = a, b && b.showValueClassByType(a), d && d._data != null && (d.removeGrids(), d._data.length > 0 && d.addGrids()); }, β.ImageMapLayer = function (b, c, d) {
    if (c) {
      const e = {
        nlat: d.nlat, slat: d.slat, wlng: d.wlng, elng: d.elng, opacity: d.opacity
      }; e.nlat || typeof e.nlat !== 'undefined' || (e.nlat = 50), e.slat || typeof e.slat !== 'undefined' || (e.slat = 0), e.wlng || typeof e.wlng !== 'undefined' || (e.wlng = 70), e.elng || typeof e.elng !== 'undefined' || (e.elng = 145), e.opacity || typeof e.opacity !== 'undefined' || (e.opacity = 0.65); const f = a.imageOverlay(c, [[e.slat, e.wlng], [e.nlat, e.elng]], { opacity: e.opacity }).addTo(b); return f;
    } return !1;
  }, β.load = function (a, b) { typeof b === 'function' && b(data); }, β.reload = function (a, b) {}, β.getΦAWSInfo = function (a, b) {
    jQuery.support.cors = !0, a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), a.limit || typeof a.limit !== 'undefined' || (a.limit = '30000'), a.eleValueRanges || typeof a.eleValueRanges !== 'undefined' || (a.eleValueRanges = '10'), a.productcategory == 'rain' ? β.getΦLasterStationMinRank({
      productcategory: 'R1', regioncode: a.regioncode, eleValueRanges: '20', top: '10000'
    }, (c) => {
      const d = c.length; let e = '0'; let f = '0'; let g = datehelper.getDateFormat(new Date(), 'yyyyMMddhhmmss'); let h = '0'; let i = '0'; let j = datehelper.getDateFormat(new Date(), 'yyyyMMddhhmmss'); β.getΦLasterStationMinRank({ productcategory: 'R1', regioncode: a.regioncode, top: '1' }, (c) => {
        c != null && c.length > 0 && (e = c[0].value, f = c[0].country + c[0].town + c[0].stationname, g = c[0].endtime), β.getΦLasterStationMinRank({ productcategory: 'R24', regioncode: a.regioncode, top: '1' }, (a) => {
          a != null && a.length > 0 && (h = a[0].value, i = a[0].country + a[0].town + a[0].stationname, j = a[0].endtime), typeof b === 'function' && b({
            stationcount: d, stationvalue: '20', rain1hmaxvalue: parseFloat(e).toFixed(1), rain1hmaxstation: f, rain1hmaxtime: g, rain24hmaxvalue: parseFloat(h).toFixed(1), rain24hmaxstation: i, rain24hmaxtime: j
          });
        });
      });
    }) : a.productcategory == 'riverrain' ? β.getΦLasterStationMinRank({
      productcategory: 'R1', regioncode: a.regioncode, eleValueRanges: '20', top: '10000'
    }, (c) => {
      const d = c.length; let e = '0'; let f = '0'; let g = datehelper.getDateFormat(new Date(), 'yyyyMMddhhmmss'); let h = '0'; let i = '0'; let j = datehelper.getDateFormat(new Date(), 'yyyyMMddhhmmss'); β.getΦLasterStationMinRank({ productcategory: 'R1', regioncode: a.regioncode, top: '1' }, (c) => {
        c != null && c.length > 0 && (e = c[0].value, f = c[0].country + c[0].town + c[0].stationname, g = c[0].endtime), β.getΦLasterStationMinRank({ productcategory: 'R24', regioncode: a.regioncode, top: '1' }, (a) => {
          a != null && a.length > 0 && (h = a[0].value, i = a[0].country + a[0].town + a[0].stationname, j = a[0].endtime), typeof b === 'function' && b({
            stationcount: d, stationvalue: '20', rain1hmaxvalue: parseFloat(e).toFixed(1), rain1hmaxstation: f, rain1hmaxtime: g, rain24hmaxvalue: parseFloat(h).toFixed(1), rain24hmaxstation: i, rain24hmaxtime: j
          });
        });
      });
    }) : β.getΦLasterWindStationMinRank({
      productcategory: 'fexmax', regioncode: a.regioncode, eleValueRanges: '17.2', top: '10000'
    }, (c) => {
      const d = c.length; let e = '0'; let f = '0'; let g = datehelper.getDateFormat(new Date(), 'yyyyMMddhhmmss'); let h = '0'; let i = '0'; let j = datehelper.getDateFormat(new Date(), 'yyyyMMddhhmmss'); β.getΦLasterWindStationMinRank({ productcategory: 'fexmax', regioncode: a.regioncode, top: '1' }, (c) => {
        c != null && c.length > 0 && (e = c[0].winds, f = c[0].country + c[0].town + c[0].stationname, g = c[0].endtime), β.getΦLasterWindStationMinRank({ productcategory: 'fexmax24', regioncode: a.regioncode, top: '1' }, (a) => {
          a != null && a.length > 0 && (h = a[0].winds, i = a[0].country + a[0].town + a[0].stationname, j = a[0].endtime), typeof b === 'function' && b({
            stationcount: d, stationvalue: '17.2', wind1hmaxvalue: parseFloat(e).toFixed(1), wind1hmaxstation: f, wind1hmaxtime: g, wind24hmaxvalue: parseFloat(h).toFixed(1), wind24hmaxstation: i, wind24hmaxtime: j
          });
        });
      });
    });
  }, β.getΦAWSDataList = function (a, b) { function c(a) { typeof b === 'function' && b(a); } if (a) { a.top || typeof a.top !== 'undefined' || (a.top = 10); let d; d = QXAWSRAINLIST_URL.replace(/#limit/g, a.limit), d = d.replace(/#begintime/g, a.begintime), d = d.replace(/#endtime/g, a.endtime); (new Date()).getTime(); jQuery.support.cors = !0, $.getJSON(d).done(c); } }, β.getΦAWSDataMinList = function (a, b) { function c(a) { typeof b === 'function' && b(a); } if (a) { a.top || typeof a.top !== 'undefined' || (a.top = 10); let d; d = QXAWSMinLIST_URL.replace(/#limit/g, a.limit), d = d.replace(/#begintime/g, a.begintime), d = d.replace(/#endtime/g, a.endtime); (new Date()).getTime(); jQuery.support.cors = !0, $.getJSON(d).done(c); } }, β.getΦLasterStationMinRank = function (a, b) {
    if (a) {
      a.top || typeof a.top !== 'undefined' || (a.top = 10); let c = ''; let d = ''; let e = -24; if (a.productcategory && typeof a.productcategory !== 'undefined') if (a.productcategory == 'R1')c = 'PRE', d = 'R', e = -1; else if (a.productcategory == 'R3')c = 'PRE', d = 'R', e = -3; else if (a.productcategory == 'R6')c = 'PRE', d = 'R', e = -6; else if (a.productcategory == 'R12')c = 'PRE', d = 'R', e = -12; else if (a.productcategory == 'R24')c = 'PRE', d = 'R', e = -24; else if (a.productcategory == 'R48')c = 'PRE', d = 'R', e = -48; else if (a.productcategory == 'R72')c = 'PRE', d = 'R', e = -72; else if (a.productcategory == 'fexmax')c = 'WIN_S_INST_Max', d = 'F', e = -1; else if (a.productcategory == 'fexmax6')c = 'WIN_S_INST_Max', d = 'F', e = -6; else { if (a.productcategory != 'fexmax12') return []; c = 'WIN_S_INST_Max', d = 'F', e = -12; } const f = new Date(); let g = datehelper.addHours(e, f); let h = datehelper.getDateFormat(g, 'yyyyMMddhhmmss'); let i = datehelper.getDateFormat(new Date(), 'yyyyMMddhhmmss'); const
        j = { begintime: h, endtime: i, limit: 1 }; β.getΦAWSDataMinList(j, (f) => {
        function j(d) {
          const e = []; if (d.returnCode == 0) {
            for (const f in d.DS) {
              e.push({
                stationid: d.DS[f].Station_Id_C, stationname: d.DS[f].Station_name, begintime: h, endtime: i, lon: d.DS[f].Lon, lat: d.DS[f].Lat, city: d.DS[f].City_NAME, country: d.DS[f].CT_name, town: d.DS[f].TOWN_NAME, element: a.productcategory, value: d.DS[f][c]
              });
            }
          } typeof b === 'function' && b(e);
        } if (f.returnCode == 0) { const k = f.DS[0].observtimes; const l = datehelper.parseDate(k.replace('.0', ''), 'yyyy-MM-dd hh:mm:ss'); const m = datehelper.clone(l); g = datehelper.addHours(e, l), h = datehelper.getDateFormat(g, 'yyyyMMddhhmmss'), i = datehelper.getDateFormat(m, 'yyyyMMddhhmmss'), a.eleValueRanges || typeof a.eleValueRanges !== 'undefined' || (a.eleValueRanges = '0'); let n = window.QXAWSSTATIONMINRAND_URL; n = n.replace(/#elements/g, 'Station_Id_C,Lon,Lat,Station_name,City_NAME,CT_name,TOWN_NAME,' + c), n = n.replace(/#begintime/g, h), n = n.replace(/#endtime/g, i), n = n.replace(/#eleValueRanges/g, c + ':(' + a.eleValueRanges + ',)'), n = n.replace(/#itemlist/g, d), n = n.replace(/#orderby/g, c), n = n.replace(/#limit/g, a.top), n = n.replace(/#regioncode/g, a.regioncode), jQuery.support.cors = !0, $.getJSON(n).done(j); }
      });
    }
  }, β.getΦStationMinRank = function (a, b) {
    function c(c) {
      const d = []; if (c.returnCode == 0) {
        for (const e in c.DS) {
          d.push({
            stationid: c.DS[e].Station_Id_C, stationname: c.DS[e].Station_name, lon: c.DS[e].Lon, lat: c.DS[e].Lat, city: c.DS[e].City_NAME, country: c.DS[e].CT_name, town: c.DS[e].TOWN_NAME, element: a.productcategory, value: parseFloat(c.DS[e][g]).toFixed(1)
          });
        }
      } typeof b === 'function' && b(d);
    } let d; let e = ''; let f = ''; var g = ''; let h = ''; if (a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), a.time && typeof a.time !== 'undefined') { if (f = a.time, d = datehelper.parseDate(a.time, 'yyyyMMddhhmmss'), a.productcategory && typeof a.productcategory !== 'undefined') if (a.productcategory == 'R1') { var i = datehelper.addHours(-1, d); e = datehelper.getDateFormat(i, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'R3') { var i = datehelper.addHours(-3, d); e = datehelper.getDateFormat(i, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'R6') { var i = datehelper.addHours(-6, d); e = datehelper.getDateFormat(i, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'R12') { var i = datehelper.addHours(-12, d); e = datehelper.getDateFormat(i, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'R24') { var i = datehelper.addHours(-24, d); e = datehelper.getDateFormat(i, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'R48') { var i = datehelper.addHours(-48, d); e = datehelper.getDateFormat(i, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'R72') { var i = datehelper.addHours(-72, d); e = datehelper.getDateFormat(i, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'fexmax') { var i = datehelper.addHours(-1, d); e = datehelper.getDateFormat(i, 'yyyyMMddhhmmss'), g = 'WIN_S_INST_Max', h = 'F'; } else if (a.productcategory == 'fexmax6') { var i = datehelper.addHours(-6, d); e = datehelper.getDateFormat(i, 'yyyyMMddhhmmss'), g = 'WIN_S_INST_Max', h = 'F'; } else { if (a.productcategory != 'fexmax12') return []; var i = datehelper.addHours(-12, d); e = datehelper.getDateFormat(i, 'yyyyMMddhhmmss'), g = 'WIN_S_INST_Max', h = 'F'; } } else f = a.endtime, e = a.begintime, g = 'PRE', h = 'R'; a.top || typeof a.top !== 'undefined' || (a.top = 10), a.eleValueRanges || typeof a.eleValueRanges !== 'undefined' || (a.eleValueRanges = '0'); let j = window.QXAWSSTATIONMINRAND_URL; j = j.replace(/#elements/g, 'Station_Id_C,Lon,Lat,Station_name,City_NAME,CT_name,TOWN_NAME,' + g), j = j.replace(/#begintime/g, e), j = j.replace(/#endtime/g, f), j = j.replace(/#eleValueRanges/g, g + ':(' + a.eleValueRanges + ',)'), j = j.replace(/#itemlist/g, h), j = j.replace(/#orderby/g, g), j = j.replace(/#limit/g, a.top), j = j.replace(/#regioncode/g, a.regioncode), jQuery.support.cors = !0, $.getJSON(j).done(c);
  }, β.getΦStationRank = function (a, b) {
    function c(c) {
      const d = []; if (c.returnCode == 0) {
        for (const e in c.DS) {
          d.push({
            stationid: c.DS[e].Station_Id_C, stationname: c.DS[e].Station_name, lon: c.DS[e].Lon, lat: c.DS[e].Lat, city: c.DS[e].City_NAME, country: c.DS[e].CT_name, town: c.DS[e].TOWN_NAME, element: a.productcategory, value: parseFloat(c.DS[e][g]).toFixed(1)
          });
        }
      } typeof b === 'function' && b(d);
    } let d; let e = ''; let f = ''; var g = ''; let h = ''; if (a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), !a.time && typeof a.time === 'undefined') { const i = new Date(); if (i.getMinutes() < 20) { const j = datehelper.addHours(-1, i); a.time = datehelper.getDateFormat(j, 'yyyyMMddhh0000'); } else a.time = datehelper.getDateFormat(i, 'yyyyMMddhh0000'); } if (a.time && typeof a.time !== 'undefined') { if (f = a.time, d = datehelper.parseDate(a.time, 'yyyyMMddhhmmss'), a.productcategory && typeof a.productcategory !== 'undefined') if (a.productcategory == 'R1') { var k = datehelper.addHours(-1, d); e = datehelper.getDateFormat(k, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'R3') { var k = datehelper.addHours(-3, d); e = datehelper.getDateFormat(k, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'R6') { var k = datehelper.addHours(-6, d); e = datehelper.getDateFormat(k, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'R12') { var k = datehelper.addHours(-12, d); e = datehelper.getDateFormat(k, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'R24') { var k = datehelper.addHours(-24, d); e = datehelper.getDateFormat(k, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'R48') { var k = datehelper.addHours(-48, d); e = datehelper.getDateFormat(k, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'R72') { var k = datehelper.addHours(-72, d); e = datehelper.getDateFormat(k, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'fexmax') { var k = datehelper.addHours(-1, d); e = datehelper.getDateFormat(k, 'yyyyMMddhhmmss'), g = 'WIN_S_INST_Max', h = 'F'; } else if (a.productcategory == 'fexmax6') { var k = datehelper.addHours(-6, d); e = datehelper.getDateFormat(k, 'yyyyMMddhhmmss'), g = 'WIN_S_INST_Max', h = 'F'; } else { if (a.productcategory != 'fexmax12') return []; var k = datehelper.addHours(-12, d); e = datehelper.getDateFormat(k, 'yyyyMMddhhmmss'), g = 'WIN_S_INST_Max', h = 'F'; } } else f = a.endtime, e = a.begintime, g = 'PRE', h = 'R'; a.top || typeof a.top !== 'undefined' || (a.top = 10), a.eleValueRanges || typeof a.eleValueRanges !== 'undefined' || (a.eleValueRanges = '0'); let l = window.QXAWSSTATIONRAND_URL; l = l.replace(/#elements/g, 'Station_Id_C,Lon,Lat,Station_name,City_NAME,CT_name,TOWN_NAME,' + g), l = l.replace(/#begintime/g, e), l = l.replace(/#endtime/g, f), l = l.replace(/#eleValueRanges/g, g + ':(' + a.eleValueRanges + ',)'), l = l.replace(/#itemlist/g, h), l = l.replace(/#orderby/g, g), l = l.replace(/#limit/g, a.top), l = l.replace(/#regioncode/g, a.regioncode), jQuery.support.cors = !0, $.getJSON(l).done(c);
  }, β.getΦStationCityAvgRain = function (a, b) { function c(a) { const c = []; if (a.returnCode == 0) for (const d in a.DS)c.push({ name: a.DS[d].V_NAME, avg: parseFloat(a.DS[d].PRE_SUM).toFixed(1) }); typeof b === 'function' && b(c); } if (a.type || typeof a.type !== 'undefined' || (a.type = '24'), a.limit || typeof a.limit !== 'undefined' || (a.limit = '100'), !a.time && typeof a.time === 'undefined') { const d = new Date(); if (d.getMinutes() < 15) { const e = datehelper.addHours(-1, d); a.time = datehelper.getDateFormat(e, 'yyyyMMddhh0000'); } else a.time = datehelper.getDateFormat(d, 'yyyyMMddhh0000'); } let f = window.QXAWSCITYAREARAIN_URL; f = f.replace(/#type/g, a.type), f = f.replace(/#time/g, a.time), f = f.replace(/#limit/g, a.limit), jQuery.support.cors = !0, $.getJSON(f).done(c); }, β.getΦStationCountyAvgRain = function (a, b) { function c(a) { const c = []; if (a.returnCode == 0) for (const d in a.DS)c.push({ name: a.DS[d].V_NAME, avg: parseFloat(a.DS[d].PRE_SUM).toFixed(1) }); typeof b === 'function' && b(c); } if (a.type || typeof a.type !== 'undefined' || (a.type = '24'), a.limit || typeof a.limit !== 'undefined' || (a.limit = '100'), !a.time && typeof a.time === 'undefined') { const d = new Date(); if (d.getMinutes() < 15) { const e = datehelper.addHours(-1, d); a.time = datehelper.getDateFormat(e, 'yyyyMMddhh0000'); } else a.time = datehelper.getDateFormat(d, 'yyyyMMddhh0000'); } let f = window.QXAWSCOUNTRYAREARAIN_URL; f = f.replace(/#type/g, a.type), f = f.replace(/#time/g, a.time), f = f.replace(/#limit/g, a.limit), jQuery.support.cors = !0, $.getJSON(f).done(c); }, β.getΦHydrologyStationRank = function (a, b) {
    function c(c) {
      const d = []; if (c.returnCode == 0) {
        for (const e in c.DS) {
          d.push({
            stationid: c.DS[e].Station_Id_C, stationname: c.DS[e].Station_name, city: c.DS[e].City_NAME, country: c.DS[e].CT_name, town: c.DS[e].TOWN_NAME, element: a.productcategory, value: parseFloat(c.DS[e][g]).toFixed(1)
          });
        }
      } typeof b === 'function' && b(d);
    } let d; let e = ''; const f = ''; var g = ''; let h = ''; if (a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), !a.time && typeof a.time === 'undefined') { const i = new Date(); if (i.getMinutes() < 20) { const j = datehelper.addHours(-1, i); a.time = datehelper.getDateFormat(j, 'yyyyMMddhh0000'); } else a.time = datehelper.getDateFormat(i, 'yyyyMMddhh0000'); } if (!a.productcategory || typeof a.productcategory === 'undefined') return []; if (a.productcategory == 'R1') { var k = datehelper.addHours(-1, d); e = datehelper.getDateFormat(k, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'R3') { var k = datehelper.addHours(-3, d); e = datehelper.getDateFormat(k, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'R6') { var k = datehelper.addHours(-6, d); e = datehelper.getDateFormat(k, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'R12') { var k = datehelper.addHours(-12, d); e = datehelper.getDateFormat(k, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'R24') { var k = datehelper.addHours(-24, d); e = datehelper.getDateFormat(k, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else if (a.productcategory == 'R48') { var k = datehelper.addHours(-48, d); e = datehelper.getDateFormat(k, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; } else { if (a.productcategory != 'R72') return []; var k = datehelper.addHours(-72, d); e = datehelper.getDateFormat(k, 'yyyyMMddhhmmss'), g = 'PRE', h = 'R'; }a.top || typeof a.top !== 'undefined' || (a.top = 10); let l = window.QXRIVEAWSRAINSTATION_URL; l = l.replace(/#elements/g, 'Station_Id_C,Station_name,City_NAME,CT_name,TOWN_NAME,' + g), l = l.replace(/#begintime/g, e), l = l.replace(/#endtime/g, f), l = l.replace(/#orderby/g, 'PRE'), l = l.replace(/#limit/g, a.top), l = l.replace(/#regioncode/g, a.regioncode), jQuery.support.cors = !0, $.getJSON(l).done(c);
  }, β.getΦHydrologyStationCityAvgRain = function (a, b) { function c(a) { const c = []; if (a.returnCode == 0) for (const d in a.DS)c.push({ name: a.DS[d].V_NAME, avg: parseFloat(a.DS[d].PRE_SUM).toFixed(1) }); typeof b === 'function' && b(c); } if (a.type || typeof a.type !== 'undefined' || (a.type = '24'), a.limit || typeof a.limit !== 'undefined' || (a.limit = '10'), !a.time && typeof a.time === 'undefined') { const d = new Date(); if (d.getMinutes() < 20) { const e = datehelper.addHours(-1, d); a.time = datehelper.getDateFormat(e, 'yyyyMMddhh0000'); } else a.time = datehelper.getDateFormat(d, 'yyyyMMddhh0000'); } let f = window.QXAWSCITYAREARAIN; f = f.replace(/#type/g, a.type), f = f.replace(/#time/g, a.time), f = f.replace(/#limit/g, a.limit), jQuery.support.cors = !0, $.getJSON(f).done(c); }, β.getΦHydrologyStationCountyAvgRain = function (a, b) { function c(a) { const c = []; if (a.returnCode == 0) for (const d in a.DS)c.push({ name: a.DS[d].V_NAME, avg: parseFloat(a.DS[d].PRE_SUM).toFixed(1) }); typeof b === 'function' && b(c); } if (a.type || typeof a.type !== 'undefined' || (a.type = '24'), a.limit || typeof a.limit !== 'undefined' || (a.limit = '10'), !a.time && typeof a.time === 'undefined') { const d = new Date(); if (d.getMinutes() < 20) { const e = datehelper.addHours(-1, d); a.time = datehelper.getDateFormat(e, 'yyyyMMddhh0000'); } else a.time = datehelper.getDateFormat(d, 'yyyyMMddhh0000'); } let f = window.QXAWSCOUNTRYAREARAIN; f = f.replace(/#type/g, a.type), f = f.replace(/#time/g, a.time), f = f.replace(/#limit/g, a.limit), jQuery.support.cors = !0, $.getJSON(f).done(c); }, β.getΦLasterWindStationMinRank = function (a, b) {
    if (a) {
      a.top || typeof a.top !== 'undefined' || (a.top = 10); let c = ''; let d = -24; if (!a.productcategory || typeof a.productcategory === 'undefined') return []; if (a.productcategory == 'fexmax')elementS = 'win_s_inst_max', elementD = 'win_d_inst_max', c = 'F', d = -1; else if (a.productcategory == 'fexmax6')elementS = 'win_s_inst_max', elementD = 'win_d_inst_max', c = 'F', d = -6; else if (a.productcategory == 'fexmax12')elementS = 'win_s_inst_max', elementD = 'win_d_inst_max', c = 'F', d = -12; else { if (a.productcategory != 'fexmax24') return []; elementS = 'win_s_inst_max', elementD = 'win_d_inst_max', c = 'F', d = -24; } const e = new Date(); let f = datehelper.addHours(d, e); let g = datehelper.getDateFormat(f, 'yyyyMMddhhmmss'); let h = datehelper.getDateFormat(new Date(), 'yyyyMMddhhmmss'); const
        i = { begintime: g, endtime: h, limit: 1 }; β.getΦAWSDataMinList(i, (e) => {
        function i(a) {
          const c = []; if (a.returnCode == 0) {
            for (const d in a.DS) {
              c.push({
                stationid: a.DS[d].Station_Id_C, stationname: a.DS[d].Station_name, begintime: g, endtime: h, lon: a.DS[d].Lon, lat: a.DS[d].Lat, city: a.DS[d].City_NAME, country: a.DS[d].CT_name, town: a.DS[d].TOWN_NAME, winds: parseFloat(a.DS[d][elementS]).toFixed(1), windd: parseFloat(a.DS[d][elementD]).toFixed(1)
              });
            }
          } typeof b === 'function' && b(c);
        } if (e.returnCode == 0) { const j = e.DS[0].observtimes; const k = datehelper.parseDate(j.replace('.0', ''), 'yyyy-MM-dd hh:mm:ss'); const l = datehelper.clone(k); f = datehelper.addHours(d, k), g = datehelper.getDateFormat(f, 'yyyyMMddhhmmss'), h = datehelper.getDateFormat(l, 'yyyyMMddhhmmss'), a.eleValueRanges || typeof a.eleValueRanges !== 'undefined' || (a.eleValueRanges = '0'); let m = window.QXAWSWindSTATIONMINRAND_URL; m = m.replace(/#elements/g, 'Station_Id_C,Lon,Lat,Station_name,City_NAME,CT_name,TOWN_NAME,' + elementS + ',' + elementD), m = m.replace(/#begintime/g, g), m = m.replace(/#endtime/g, h), m = m.replace(/#eleValueRanges/g, elementS + ':(' + a.eleValueRanges + ',)'), m = m.replace(/#itemlist/g, c), m = m.replace(/#orderby/g, elementS), m = m.replace(/#limit/g, a.top), m = m.replace(/#regioncode/g, a.regioncode), jQuery.support.cors = !0, $.getJSON(m).done(i); }
      });
    }
  }, β.getΦWindStationRank = function (a, b) {
    function c(a) {
      const c = []; if (a.returnCode == 0) {
        for (const d in a.DS) {
          c.push({
            stationid: a.DS[d].Station_Id_C, stationname: a.DS[d].Station_name, lon: a.DS[d].Lon, lat: a.DS[d].Lat, country: a.DS[d].CT_name, town: a.DS[d].TOWN_NAME, winds: parseFloat(a.DS[d][g]).toFixed(1), windd: parseFloat(a.DS[d][h]).toFixed(0)
          });
        }
      } typeof b === 'function' && b(c);
    } let d; let e = ''; const f = ''; var g = ''; var h = ''; let i = ''; if (a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), !a.time && typeof a.time === 'undefined') { const j = new Date(); if (j.getMinutes() < 20) { const k = datehelper.addHours(-1, j); a.time = datehelper.getDateFormat(k, 'yyyyMMddhh0000'); } else a.time = datehelper.getDateFormat(j, 'yyyyMMddhh0000'); } if (!a.productcategory || typeof a.productcategory === 'undefined') return []; if (a.productcategory == 'fexmax') { var l = datehelper.addHours(-1, d); e = datehelper.getDateFormat(l, 'yyyyMMddhhmmss'), g = 'win_s_inst_max', h = 'win_d_inst_max', i = 'F'; } else if (a.productcategory == 'fexmax6') { var l = datehelper.addHours(-6, d); e = datehelper.getDateFormat(l, 'yyyyMMddhhmmss'), g = 'win_s_inst_max', h = 'win_d_inst_max', i = 'F'; } else { if (a.productcategory != 'fexmax12') return []; var l = datehelper.addHours(-12, d); e = datehelper.getDateFormat(l, 'yyyyMMddhhmmss'), g = 'win_s_inst_max', h = 'win_d_inst_max', i = 'F'; }a.top || typeof a.top !== 'undefined' || (a.top = 10), a.eleValueRanges || typeof a.eleValueRanges !== 'undefined' || (a.eleValueRanges = '0'); let m = window.QXRIVEAWSWINDRANK_URL; m = m.replace(/#elements/g, 'Station_Id_C,Lon,Lat,Station_name,City_NAME,CT_name,TOWN_NAME,' + g + ',' + h), m = m.replace(/#begintime/g, e), m = m.replace(/#endtime/g, f), m = m.replace(/#eleValueRanges/g, g + ':(' + a.eleValueRanges + ',)'), m = m.replace(/#itemlist/g, i), m = m.replace(/#orderby/g, g), m = m.replace(/#limit/g, a.top), m = m.replace(/#regioncode/g, a.regioncode), jQuery.support.cors = !0, $.getJSON(m).done(c);
  }, β.getΦStationCityMaxWind = function (a, b) { function c(a) { const c = []; if (a.returnCode == 0) for (const d in a.DS)c.push({ name: a.DS[d].Station_name, country: a.DS[d].ct_name, win_s_inst_max: parseFloat(a.DS[d][win_s_inst_max]).toFixed(1) }); typeof b === 'function' && b(c); } if (a.type || typeof a.type !== 'undefined' || (a.type = '24'), a.limit || typeof a.limit !== 'undefined' || (a.limit = '10'), a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), !a.time && typeof a.time === 'undefined') { const d = new Date(); if (d.getMinutes() < 20) { const e = datehelper.addHours(-1, d); a.time = datehelper.getDateFormat(e, 'yyyyMMddhh0000'); } else a.time = datehelper.getDateFormat(d, 'yyyyMMddhh0000'); } const f = datehelper.addHours(-1, currenttime); begintime = datehelper.getDateFormat(f, 'yyyyMMddhhmmss'); let g = window.QXRIVEAWSCITYAREAWIND_URL; g = g.replace(/#begintime/g, begintime), g = g.replace(/#endtime/g, a.time), g = g.replace(/#regioncode/g, a.regioncode), g = g.replace(/#limit/g, a.limit), jQuery.support.cors = !0, $.getJSON(g).done(c); }, β.getΦStationCountyMaxWind = function (a, b) { function c(a) { const c = []; if (a.returnCode == 0) for (const d in a.DS)c.push({ name: a.DS[d].Station_name, country: a.DS[d].ct_name, win_s_inst_max: parseFloat(a.DS[d][win_s_inst_max]).toFixed(1) }); typeof b === 'function' && b(c); } if (a.type || typeof a.type !== 'undefined' || (a.type = '24'), a.limit || typeof a.limit !== 'undefined' || (a.limit = '10'), a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), !a.time && typeof a.time === 'undefined') { const d = new Date(); if (d.getMinutes() < 20) { const e = datehelper.addHours(-1, d); a.time = datehelper.getDateFormat(e, 'yyyyMMddhh0000'); } else a.time = datehelper.getDateFormat(d, 'yyyyMMddhh0000'); } const f = datehelper.addHours(-24, currenttime); begintime = datehelper.getDateFormat(f, 'yyyyMMddhhmmss'); let g = window.QXRIVEAWSCITYAREAWIND_URL; g = g.replace(/#begintime/g, begintime), g = g.replace(/#endtime/g, a.time), g = g.replace(/#regioncode/g, a.regioncode), g = g.replace(/#limit/g, a.limit), jQuery.support.cors = !0, $.getJSON(g).done(c); }, β.getΦMapTop8ByType = function (a, b) { a.limit || typeof a.limit !== 'undefined' || (a.limit = '10'), β.getΦStationRank(a, (a) => { typeof b === 'function' && b(a); }); }, β.getΦMapStsByRain = function (a, b) {
    a.limit || typeof a.limit !== 'undefined' || (a.limit = '30000'), a.eleValueRanges || typeof a.eleValueRanges !== 'undefined' || (a.eleValueRanges = '30'), β.getΦStationRank(a, (a) => {
      const c = a.length; let d = 0; let e = 0; const f = []; const g = []; for (const h in a)a[h].value > 35 && (d++, f.push(a[h])), a[h].value > 40 && (e++, g.push(a[h])); typeof b === 'function' && b({
        returnCode: 0, count30: c, count35: c, count40: c, station30: a, station35: f, station40: g
      });
    });
  }, β.getΦMapStsByWind = function (a, b) {
    a.limit || typeof a.limit !== 'undefined' || (a.limit = '30000'), a.eleValueRanges || typeof a.eleValueRanges !== 'undefined' || (a.eleValueRanges = '13.8'), β.getΦWindStationRank(a, (a) => {
      let c = a.length; let d = 0; const e = 0; const f = []; const g = []; for (const h in a)a[h].value >= 17.2 && (c++, station35.push(a[h])), a[h].value >= 20.8 && (d++, station40.push(a[h])); typeof b === 'function' && b({
        returnCode: 0, count7: c, count8: d, count9: e, station7: a, station8: f, station9: g
      });
    });
  }, β.getΦRadarList = function (a, b) { function c(a) { typeof b === 'function' && b(a); } if (a && a.productcategory) { let d; d = MAPIMAGELIST_URL.replace(/#type/g, a.productcategory), d = d.replace(/#begintime/g, a.begintime), d = d.replace(/#endtime/g, a.endtime); (new Date()).getTime(); jQuery.support.cors = !0, $.getJSON(d).done(c); } }, β.getΦRadarZJPng = function (a, b) { if (a) { let c; c = MAPIMAGE_URL.replace(/#type/g, 'bucket-radarpng'), c = c.replace(/#key/g, a), typeof b === 'function' && b(c); } }, β.getΦRainList = function (a, b) { function c(a) { typeof b === 'function' && b(a); } if (a.productcategory || typeof a.productcategory !== 'undefined' || (a.productcategory = 'RADA_L3_MST_QPF_60'), a && a.productcategory) { let d; d = MAPIMAGELIST_URL.replace(/#type/g, a.productcategory), d = d.replace(/#begintime/g, a.begintime), d = d.replace(/#endtime/g, a.endtime); (new Date()).getTime(); jQuery.support.cors = !0, $.getJSON(d).done(c); } }, β.getΦRainZJPng = function (a, b) { if (a) { let c; c = MAPIMAGE_URL.replace(/#type/g, 'bucket-radarqpf'), c = c.replace(/#key/g, a), typeof b === 'function' && b(c); } }, β.getΦDisasterData = function (a) {
    function b(b) { typeof a === 'function' && a(b); } const c = new Date(); const d = c.getFullYear(); const e = c.getMonth() + 1 < 10 ? '0' + (c.getMonth() + 1) : c.getMonth() + 1; const f = c.getDate() < 10 ? '0' + c.getDate() : c.getDate(); const g = c.getHours() < 10 ? '0' + c.getHours() : c.getHours(); let
      h = window.DisasterDataLevel_URL; h = h.replace(/#year/g, d), h = h.replace(/#month/g, e), h = h.replace(/#day/g, f), h = h.replace(/#yyyyMMddhh/g, d + e + f + g), jQuery.support.cors = !0, $.getJSON(h).done(b);
  }, β.getΦDisasterRegionData = function (a, b) {
    function c(a) { a && typeof b === 'function' && b(a); }a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000'), a.type || typeof a.type !== 'undefined' || (a.type = 'rainDist,tfDist,highTempDist'), a.span || typeof a.span !== 'undefined' || (a.span = '24'); const d = new Date(); let
      e = datehelper.getDateFormat(d, 'yyyy-MM-dd') + ' 20:00:00'; d.getHours() >= 8 && d.getHours() < 20 && (e = datehelper.getDateFormat(d, 'yyyy-MM-dd') + ' 08:00:00'); let f = window.DisasterDataLevel_URL; f = f.replace(/#time/g, e), f = f.replace(/#regioncode/g, a.regioncode), f = f.replace(/#type/g, a.type), f = f.replace(/#span/g, a.span), $.getJSON(f).done(c);
  }, β.getΦWaData = function (a) { function b(b) { typeof a === 'function' && a(b); } const c = window.WADATA_URL; jQuery.support.cors = !0, $.getJSON(c).done(b); }, β.getΦWaStsData = function (a) {
    function b(b) {
      function c(a) { if (!a) { return; } if (!(a.indexOf('解除') >= 0)) for (const b in d) { const c = d[b]; if (a.indexOf(c.name) >= 0) { a.indexOf('橙色') >= 0 ? (c.orange++, d.all.orange++) : a.indexOf('红色') >= 0 ? (c.red++, d.all.red++) : a.indexOf('蓝色') >= 0 ? (c.blue++, d.all.blue++) : a.indexOf('黄色') >= 0 && (c.yellow++, d.all.yellow++); break; } } } var d = {
        baoxue: {
          orange: 0, red: 0, blue: 0, yellow: 0, name: '暴雪'
        },
        baoyu: {
          orange: 0, red: 0, blue: 0, yellow: 0, name: '暴雨'
        },
        bingbao: {
          orange: 0, red: 0, blue: 0, yellow: 0, name: '冰雹'
        },
        dafeng: {
          orange: 0, red: 0, blue: 0, yellow: 0, name: '大风'
        },
        daolu: {
          orange: 0, red: 0, blue: 0, yellow: 0, name: '结冰'
        },
        dawu: {
          orange: 0, red: 0, blue: 0, yellow: 0, name: '大雾'
        },
        ganhan: {
          orange: 0, red: 0, blue: 0, yellow: 0, name: '干旱'
        },
        gaowen: {
          orange: 0, red: 0, blue: 0, yellow: 0, name: '高温'
        },
        hanchao: {
          orange: 0, red: 0, blue: 0, yellow: 0, name: '寒潮'
        },
        leidian: {
          orange: 0, red: 0, blue: 0, yellow: 0, name: '雷电'
        },
        mai: {
          orange: 0, red: 0, blue: 0, yellow: 0, name: '霾'
        },
        shuangdong: {
          orange: 0, red: 0, blue: 0, yellow: 0, name: '霜冻'
        },
        taifeng: {
          orange: 0, red: 0, blue: 0, yellow: 0, name: '台风'
        },
        diz: {
          orange: 0, red: 0, blue: 0, yellow: 0, name: '地质'
        },
        fire: {
          orange: 0, red: 0, blue: 0, yellow: 0, name: '火险'
        },
        all: {
          orange: 0, red: 0, blue: 0, yellow: 0, name: 'all'
        }
      }; if (b.DS && b.DS.length > 0) for (const e in b.DS) { const f = b.DS[e]; c(f.yjch); } typeof a === 'function' && a(d);
    } const c = window.WADATA_URL; jQuery.support.cors = !0, $.getJSON(c).done(b);
  }, β.getΦAwsPic = function (a) { a.productcategory || typeof a.productcategory !== 'undefined' || (a.productcategory = 'R1'); const b = new Date(); return a.productcategory == 'R1' ? 'http://121.41.10.210/zzdpic/rain1_sk.png?1=1&ref=' + b.getTime() : a.productcategory == 'R3' ? 'http://121.41.10.210/zzdpic/rain3_sk.png?1=1&ref=' + b.getTime() : a.productcategory == 'R6' ? 'http://121.41.10.210/zzdpic/rain6_sk.png?1=1&ref=' + b.getTime() : a.productcategory == 'R12' ? 'http://121.41.10.210/zzdpic/rain12_sk.png?1=1&ref=' + b.getTime() : a.productcategory == 'R24' ? 'http://121.41.10.210/zzdpic/rain24_sk.png?1=1&ref=' + b.getTime() : null; }, β.getΦDisterPic = function (a) { a.productcategory || typeof a.productcategory !== 'undefined' || (a.productcategory = 'R1'); const b = new Date(); return a.productcategory == 'R1' ? 'http://121.41.10.210/zzdpic/rain1_sk.png?1=1&ref=' + b.getTime() : null; }, β.getΦDisterPic = function (a) { a.productcategory || typeof a.productcategory !== 'undefined' || (a.productcategory = 'R1'); const b = new Date(); return a.productcategory == 'R1' ? 'http://121.41.10.210/zzdpic/rain1_sk.png?1=1&ref=' + b.getTime() : null; }, β.getΦSKRiverRain = function (a, b) {
    function c(a) { typeof b === 'function' && b(a); } if (a.type || typeof a.type !== 'undefined' || (a.type = 'R24'), a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = 'EightRiver'), !a.time && typeof a.time === 'undefined') {
      const d = new Date(); const
        e = d.getMinutes() < 15 ? datehelper.addHours(-1, d) : d; a.time = datehelper.getDateFormat(e, 'yyyyMMddhh0000');
    } const f = 'http://www.qxjcfw.cn/ExportData/exportdatavriverjcfw/getRiverStaJson.ashx?ID=' + a.regioncode + '&interface=SURF_ZJ_GRID_MUL_HOR&api=getGridEleInRectByTimeAndLevelAndValidtime&time=' + a.time + '&prodcode=' + a.productcategory; $.getJSON(f).done(c);
  }, β.getΦForecastRiver = function (a, b) { function c(a) { let c = []; if (a.returnCode == 0) { for (const d in a.DS)c.push({ name: a.DS[d].RegionCode, value: a.DS[d].Avg }); c = β.sortDownByKey(c, 'value'); } typeof b === 'function' && b(c); } if (a.productcategory || typeof a.productcategory !== 'undefined' || (a.productcategory = 'pr24'), a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = 'EightRiver'), !a.time && typeof a.time === 'undefined') { const d = new Date(); if (a.productcategory == 'pr12' || a.productcategory == 'pr72' || a.productcategory == 'pr48' || a.productcategory == 'pr24') { let e = !1; d.getHours() > 8 && d.getHours() < 17 && (e = !0); const f = d.getMinutes() < 10 ? datehelper.addHours(-1, d) : d; a.time = e ? datehelper.getDateFormat(f, 'yyyyMMdd080000') : datehelper.getDateFormat(f, 'yyyyMMdd200000'); } else a.time = datehelper.getDateFormat(d, 'yyyyMMddhh0000'); } let g = 'http://www.qxjcfw.cn/ExportData/exportdatavriverjcfw/getRiverStaJson.ashx?ID=' + a.regioncode + '&interface=NAFP_FOR_FTM_Smart_ZJ&api=getGridForecastEleGridInRectByTimeAndLevelAndValidtime&time=' + a.time + '&prodcode=' + a.productcategory; a.productcategory == 'pr01' ? g = 'http://www.qxjcfw.cn/ExportData/exportdatavriverjcfw/getRiverStaJson.ashx?ID=' + a.regioncode + '&interface=RADA_L3_MST_QPF&api=getRadarGridInRectByTimeAndLevelAndValidtime&prodcode=radarqpf360&level=0&hours=60' : a.productcategory == 'pr03' && (g = 'http://www.qxjcfw.cn/ExportData/exportdatavriverjcfw/getRiverStaJson.ashx?ID=' + a.regioncode + '&interface=RADA_L3_MST_QPF&api=getRadarGridInRectByTimeAndLevelAndValidtime&prodcode=radarqpf360&level=0&hours=180'), jQuery.support.cors = !0, $.getJSON(g).done(c); }, β.getΦAreaName = function (a) { let b = '-'; for (const c in qxmapallJson) { const d = qxmapallJson[c]; if (c.match(a)) { b = d; break; } } return b; }, β.getΦForecastRegion = function (a, b) { function c(c) { let d = {}; let e = []; let f = []; let g = []; if (c.returnCode == 0) { for (const h in c.DS) if (c.DS[h].RegionCode != 'null' && c.DS[h].RegionCode != null) { const i = β.getΦAreaName(c.DS[h].RegionCode); c.DS[h].RegionCode.substring(4, 9) == '00000' ? e.push({ name: i, value: c.DS[h].Avg }) : c.DS[h].RegionCode.substring(6, 9) == '000' ? f.push({ name: i, value: c.DS[h].Avg }) : c.DS[h].RegionCode.indexOf('330000000') != 0 && g.push({ name: i, value: c.DS[h].Avg }); }g = β.sortDownByKey(g, 'value'), f = β.sortDownByKey(f, 'value'), e = β.sortDownByKey(e, 'value'), d = { citys: e.slice(0, a.limit), countrys: f.slice(0, a.limit), towns: g.slice(0, a.limit) }; } typeof b === 'function' && b(d); } if (a.productcategory || typeof a.productcategory !== 'undefined' || (a.productcategory = 'pr24'), a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), a.limit || typeof a.limit !== 'undefined' || (a.limit = 15), !a.time && typeof a.time === 'undefined') { const d = new Date(); if (a.productcategory == 'pr12' || a.productcategory == 'pr72' || a.productcategory == 'pr48' || a.productcategory == 'pr24') { let e = !1; d.getHours() > 8 && d.getHours() < 17 && (e = !0); const f = d.getMinutes() < 10 ? datehelper.addHours(-1, d) : d; a.time = e ? datehelper.getDateFormat(f, 'yyyyMMdd080000') : datehelper.getDateFormat(f, 'yyyyMMdd200000'); } else a.time = datehelper.getDateFormat(d, 'yyyyMMddhh0000'); } let g = 'http://www.qxjcfw.cn/ExportData/ExportDatajcfw/getavgrainjsonforRegion.ashx?ID=' + a.regioncode + '&interface=NAFP_FOR_FTM_Smart_ZJ&api=getGridForecastEleGridInRectByTimeAndLevelAndValidtime&time=' + a.time + '&prodcode=' + a.productcategory + '&hours=0'; a.productcategory == 'pr01' ? g = 'http://www.qxjcfw.cn/ExportData/ExportDatajcfw/getavgrainjsonforRegion.ashx?ID=' + a.regioncode + '&interface=RADA_L3_MST_QPF&api=getRadarGridInRectByTimeAndLevelAndValidtime&prodcode=radarqpf360&level=0&hours=60' : a.productcategory == 'pr03' && (g = 'http://www.qxjcfw.cn/ExportData/ExportDatajcfw/getavgrainjsonforRegion.ashx?ID=' + a.regioncode + '&interface=RADA_L3_MST_QPF&api=getRadarGridInRectByTimeAndLevelAndValidtime&prodcode=radarqpf360&level=0&hours=180'), jQuery.support.cors = !0, $.getJSON(g).done(c); }, β.getΦForecastPic = function (a) { a.productcategory || typeof a.productcategory !== 'undefined' || (a.productcategory = 'R1'); const b = new Date(); return a.productcategory == 'R1' ? 'http://121.41.10.210/zzdpic/rainforecast_1.png?1=1&ref=' + b.getTime() : a.productcategory == 'R3' ? 'http://121.41.10.210/zzdpic/rainforecast_3.png?1=1&ref=' + b.getTime() : a.productcategory == 'R6' ? 'http://121.41.10.210/zzdpic/rainforecast_6.png?1=1&ref=' + b.getTime() : a.productcategory == 'R12' ? 'http://121.41.10.210/zzdpic/rainforecast_12.png?1=1&ref=' + b.getTime() : a.productcategory == 'R24' ? 'http://121.41.10.210/zzdpic/rainforecast_24.png?1=1&ref=' + b.getTime() : null; }, β.getΦ3DForecastContent = function (a) { function b(b) { b.returnCode == 0 && typeof a === 'function' && a(b.DS); } const c = 'http://www.qxjcfw.cn/ZJDataCenterDRDS/SEVP_Forescript_MUL_3Day/getSevpEleByLatestTime?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&elements=observtimes,fbname,text_3day&limitCnt=10000'; jQuery.support.cors = !0, $.getJSON(c).done(b); }, β.getΦ7DForecastContent = function (a) { function b(b) { b.returnCode == 0 && typeof a === 'function' && a(b.DS); } const c = 'http://www.qxjcfw.cn/ZJDataCenterDRDS/SEVP_Forescript_MUL_7Day/getSevpEleByLatestTime?idk=gFjzo8IARYnewgFVR1WPT3U42gFvs1FuJLcvPSBROxTfopPIZdiF&dataformat=json&elements=observtimes,fbname,text_7day&limitCnt=10000'; jQuery.support.cors = !0, $.getJSON(c).done(b); }, β.sortDownByKey = function (a, b) { return a.sort((a, c) => { const d = a[b]; const e = c[b]; return d > e ? -1 : e > d ? 1 : 0; }); }, β.GetΦAuth = function () { function a(a) { a.ReturnCode != 0 ? alert('您需授权才能访问，请联系浙江省气象局或发送邮件至yangmingworkmail@163.com.') : β.systemkey = a.SystemID; } const b = window.location.href; const c = 'http://121.40.139.33/idk/getIDK.ashx?idk=712ea9b0cf705b05&add=' + b; jQuery.support.cors = !0, $.getJSON(c).done(a); }, β.getΦVectorList = function (a, b) { function c(a) { typeof b === 'function' && b(a); } if (a) { let d = a.validtime; let e = a.level; let f = a.element; let g = a.limit; let h = a.regioncode; if (a.validtime || typeof a.validtime !== 'undefined' || (d = '0'), a.level || typeof a.level !== 'undefined' || (e = '0'), a.element || typeof a.element !== 'undefined' || (f = 'time,hours'), a.limit || typeof a.limit !== 'undefined' || (g = 24), a.regioncode || typeof a.regioncode !== 'undefined' || (h = '330000'), a.productcategory) { let i; i = VECTORMAPDATALIST_URL.replace(/#type/g, a.productcategory), i = i.replace(/#method/g, a.method), i = i.replace(/#interface/g, a.interface), i = i.replace(/#timetype/g, a.timetype), i = i.replace(/#time/g, a.time), i = i.replace(/#regioncode/g, h), i = i.replace(/#limit/g, g), i = i.replace(/#validtime/g, d), i = i.replace(/#level/g, e), i = i.replace(/#element/g, f); (new Date()).getTime(); jQuery.support.cors = !0, $.getJSON(i).done(c); } } }, β.getΦLocationInfo = function (a, b) { function c(a) { typeof b === 'function' && b(a); }a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), a.minvalue || typeof a.minvalue !== 'undefined' || (a.minvalue = '0.1'), a.validtime || typeof a.validtime !== 'undefined' || (a.validtime = '0'), a.level || typeof a.level !== 'undefined' || (a.level = '0'); let d = 'http://www.qxjcfw.cn/ExportData/ExportDataJCFW/getLocationValueByRegionAndElement.ashx?ID=#regioncode&interface=#method&api=#interface&prodcode=#productcategory&level=#level&hours=#validtime&minvalue=#minvalue'; d = d.replace(/#productcategory/g, a.productcategory), d = d.replace(/#method/g, a.method), d = d.replace(/#interface/g, a.interface), d = d.replace(/#time/g, a.time), d = d.replace(/#regioncode/g, a.regioncode), d = d.replace(/#validtime/g, a.validtime), d = d.replace(/#level/g, a.level), d = d.replace(/#minvalue/g, a.minvalue), a.time && typeof a.time !== 'undefined' && (d += '&time=' + a.time); (new Date()).getTime(); jQuery.support.cors = !0, $.getJSON(d).done(c); }, β.getΦGetMoveDirector = function (a) { let b = '无'; switch (a) { case 'N': b = '北'; break; case 'NNE': b = '东北东'; break; case 'NE': b = '东北'; break; case 'ENE': b = '东东北'; break; case 'E': b = '东'; break; case 'ESE': b = '东东南'; break; case 'SE': b = '东南'; break; case 'SSE': b = '南东南'; break; case 'S': b = '南'; break; case 'SSW': b = '南西南'; break; case 'SW': b = '西南'; break; case 'WSW': b = '西西南'; break; case 'W': b = '西'; break; case 'WNW': b = '西西北'; break; case 'NW': b = '西北'; break; case 'NNW': b = '北西北'; } return b; }, β.GetDistance = function (a, b, c, d) { const e = 6378.137; const f = β.rad(b); const g = β.rad(d); const h = f - g; const i = β.rad(a) - β.rad(c); let j = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(h / 2), 2) + Math.cos(f) * Math.cos(g) * Math.pow(Math.sin(i / 2), 2))); return j *= e, j = Math.round(1e4 * j) / 1e4; }, β.rad = function (a) { return a * Math.PI / 180; }, β.getΦTyphoonLocationInfo = function (a, b) { function c(a) { function c(a) { if (a.returnCode == 0) { const c = a.DS[0]; const d = datehelper.parseDate(c.ObservTimes.replace('.0', ''), 'yyyy-MM-dd hh:mm:ss'); const e = datehelper.clone(d); timets = datehelper.getDateFormat(e, 'yyyy年MM月dd日hh时mm分'); let f = '台风' + c.TYPH_Name_CN + '(编号：' + c.Num_Nati + ')'; f += timets + '中心位置：东经' + c.Lon + ' 北纬' + c.Lat + ',最大风速：' + c.WINF + 'm/s,', f += ',中心气压：' + c.PRS + 'hPa', f += ',移动速度：' + c.MoSpeed_Futrue + 'km/h', f += ',移动方向：' + β.getΦGetMoveDirector(c.MoDir_Future) + ','; const g = parseFloat(c.Lon); const h = parseFloat(c.Lat); for (const i in citys) if (citys[i][0] == '杭州' || citys[i][0] == '温州') { const j = citys[i][2]; const k = citys[i][1]; const l = Math.round(β.GetDistance(j, k, g, h)); f += '距离' + citys[i][0] + l + '公里'; } typeof b === 'function' && b({ content: f }); } else typeof b === 'function' && b({ content: '' }); } if (a.returnCode == 0) { for (const d in a.DS) if (a.DS[d].IsActive == 1) { let e = 'http://www.qxjcfw.cn/ZJDataCenterTYPH/SEVP_WEFC_TYP_WT/getTyphPathByTyphNo?usekey=A772B980B9AE4C692BED2079E82A3D7B&prodCode=SEVP_WEFC_TYP_WT&typhNo=#typhno&dataFormat=json'; e = e.replace(/#typhno/g, a.DS[d].Num_Nati), $.getJSON(e).done(c); } } else typeof b === 'function' && b({ content: '' }); } const d = new Date(); a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'); let e = 'http://www.qxjcfw.cn/ZJDataCenterTYPH/SEVP_WEFC_TYP_WT/getTyphInfoByYear?usekey=A772B980B9AE4C692BED2079E82A3D7B&prodCode=SEVP_WEFC_TYP_WT&year=#year&limitCnt=100&dataFormat=json'; e = e.replace(/#year/g, d.getFullYear()); (new Date()).getTime(); jQuery.support.cors = !0, $.getJSON(e).done(c); }; let d = null; β.addΦRadarLayer = function (a, b, c) {
    if (βObject = a, b && b.type) {
      let e; e = MAPIMAGE_URL.replace(/#type/g, b.type), e = e.replace(/#key/g, b.url), e = e.replace(/#filename/g, b.filename); const f = {
        nlat: b.nlat, slat: b.slat, wlng: b.wlng, elng: b.elng, opacity: b.opacity
      }; if (d == null) { const g = β.ImageMapLayer(a, e, f); d = g, typeof c === 'function' && c(g); } else e && (d.setUrl(e), d.setOpacity(b.opacity));
    }
  }, β.removeΦRadarProduct = function () { d && d != null && βObject.removeLayer(d); }, β.removeRadarProductByLayer = function (a) { a && a != null && βObject.removeLayer(a); }, β.getΦRealtimeDataByDistrict = function (a, b) { function c(a) { typeof b === 'function' && b(a); }a.city || typeof a.city !== 'undefined' || (a.city = '杭州'), a.country || typeof a.country !== 'undefined' || (a.country = '上城区'); let d; d = RealtimeDataByDistrict.replace(/#city/g, a.city), d = d.replace(/#country/g, a.country); (new Date()).getTime(); jQuery.support.cors = !0, $.getJSON(d).done(c); }, β.getΦRealtimeDataByLonLat = function (a, b) { function c(a) { typeof b === 'function' && b(a); }a.lng || typeof a.lng !== 'undefined' || (a.lng = '120.0'), a.lat || typeof a.lat !== 'undefined' || (a.lat = '30.0'); let d; d = RealtimeDataByLonLat.replace(/#lng/g, a.lng), d = d.replace(/#lat/g, a.lat); (new Date()).getTime(); jQuery.support.cors = !0, $.getJSON(d).done(c); }, β.getΦRegionList = function (a) { typeof a === 'function' && a(window.qxmapzjson); }, β.addΦTileMap = function (b, c) { if (b) if (c == 'QMAP_RELIEF_MAP') { a.tileLayer(QMAP_RELIEF_MAP.titleUrl, { subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'] }).addTo(b), a.tileLayer(QMAP_RELIEFI_MAP.titleUrl, { subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'] }).addTo(b); } else if (c == 'QMAP_SATELLITE_MAP') { a.tileLayer(QMAP_SATELLITE_MAP.titleUrl, { subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'] }).addTo(b), a.tileLayer(QMAP_SATELLITEI_MAP.titleUrl, { subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'] }).addTo(b); } else if (c == 'QMAP_TIANDITU_MAP') { a.tileLayer(QMAP_TIANDITU_MAP.titleUrl, { subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'] }).addTo(b), a.tileLayer(QMAP_TIANDITUI_MAP.titleUrl, { subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'] }).addTo(b); } else if (c == 'QMAP_DEEPBLUE_MAP') { a.tileLayer(QMAP_DEEPBLUE_MAP.titleUrl, { subdomains: ['0', '1', '2', '3', '4', '5', '6', '7'] }).addTo(b); } }; let e; let f = null; β.getΦStartTTP = function (a, b) { f == null && (f = QXTtp.Create()), f && f.ttp(a, !1, (a) => { a && (e = a, a.play(), typeof b === 'function' && b(e)); }); }, β.getΦStopTTP = function () { f && f.stop(); };
})), β.systemkey = '', β.GetΦAuth(); const QXMap = function (a) {
  const b = function (a, b) { β.getΦAWSDataList(a, (a) => { typeof b === 'function' && b(a); }); }; const c = function (a, b) { β.getΦVectorList(a, (a) => { typeof b === 'function' && b(a); }); }; const d = function (b, c) { a && β.addΦVectorLayer(a, b, (a) => { typeof c === 'function' && c(a); }); }; const e = function (b, c) {
    if (a) {
      const d = new Date(); const e = datehelper.getDateFormat(d, 'yyyyMMddhhmmss'); const
        f = {
          productcategory: b, time: e, timetype: 'M', method: 'NAFP_FOR_FTM_Smart_ZJ', interface: 'getContourEleValidtimeListByTime', level: 0, limit: 24e3
        }; β.getΦVectorList(f, (e) => {
        if (e != null && e.returnCode == 0) {
          let f = 9999; let g = e.DS[0].time; for (const h in e.DS) { const i = datehelper.parseDate(e.DS[h].time, 'yyyyMMddhhmmss'); f > datehelper.getTimeHoursDiff(i, d) && f >= 0 && (f = datehelper.getTimeHoursDiff(i, d), g = datehelper.getDateFormat(i, 'yyyyMMddhhmmss')); } const j = {
            productcategory: b, time: g, regioncode: '330000', method: 'NAFP_FOR_FTM_Smart_ZJ', interface: 'getContourEleByTimeAndRegionCode', level: 0, gridmethod: 'NAFP_FOR_FTM_Smart_ZJ', gridinterface: 'getGridForecastEleGridInRectByTimeAndLevelAndValidtime', nlat: 32, slat: 22, wlon: 116, elon: 124, validtime: 0, isshowgrid: !0, isshowzero: !1
          }; β.addΦVectorLayer(a, j, (a) => { const d = datehelper.parseDate(g, 'yyyyMMddhhmmss'); const e = datehelper.getDateFormat(d, 'dd日hh时mm分') + ' 降水预报'; let f = 1; b == 'pr03' ? f = 3 : b == 'pr06' ? f = 6 : b == 'pr12' ? f = 12 : b == 'pr24' ? f = 24 : b == 'pr48' && (f = 48); const h = datehelper.clone(d); const i = datehelper.addHours(-1 * f, h); const j = datehelper.getDateFormat(i, 'yyyy年MM月dd日hh时mm分-'); typeof c === 'function' && c({ time: g, title: j + e, layer: a }); });
        }
      });
    }
  }; const f = function (b, c) {
    if (a) {
      const d = new Date(); const e = datehelper.getDateFormat(d, 'yyyyMMddhhmmss'); const
        f = {
          productcategory: b, time: e, timetype: 'M', method: 'SURF_ZJ_CTR_MUL_HOR', interface: 'getSurfEleTimeListByTime', level: 0, limit: 24e3
        }; β.getΦVectorList(f, (d) => {
        if (d != null && d.returnCode == 0) {
          const e = d.DS[d.DS.length - 1].time; const f = {
            productcategory: b, time: e, regioncode: '330000', method: 'SURF_ZJ_CTR_MUL_HOR', interface: 'getSurfEleByTimeAndRegionCode', level: 0, gridmethod: 'SURF_ZJ_GRID_MUL_HOR', gridinterface: 'getGridEleInRectByTimeAndLevelAndValidtime', nlat: 32, slat: 22, wlon: 116, elon: 124, validtime: 0, isshowgrid: !0, isshowzero: !1
          }; β.addΦVectorLayer(a, f, (a) => { const d = datehelper.parseDate(e, 'yyyyMMddhhmmss'); let f = datehelper.getDateFormat(d, 'yyyy年MM月dd日hh时mm分') + '近1小时降水统计'; b == 'R3' ? f = datehelper.getDateFormat(d, 'yyyy年MM月dd日hh时mm分 近3小时降水统计') : b == 'R6' ? f = datehelper.getDateFormat(d, 'yyyy年MM月dd日hh时mm分 近6小时降水统计') : b == 'R12' ? f = datehelper.getDateFormat(d, 'yyyy年MM月dd日hh时mm分 近12小时降水统计') : b == 'R24' ? f = datehelper.getDateFormat(d, 'yyyy年MM月dd日hh时mm分 近24小时降水统计') : b == 'R48' ? f = datehelper.getDateFormat(d, 'yyyy年MM月dd日hh时mm分 近48小时降水统计') : b == 'weather' && (f = datehelper.getDateFormat(d, 'yyyy年MM月dd日hh时mm分 天气现象')), typeof c === 'function' && c({ time: e, title: f, layer: a }); });
        }
      });
    }
  }; const g = function () { β.removeΦGridLayer(); }; const h = function () { β.removeΦVectorLayer(); }; const i = function (a) {
    const b = new Date(); const c = datehelper.addHours(-48, b); const d = datehelper.getDateFormat(c, 'yyyyMMddhhmmss'); const e = datehelper.getDateFormat(new Date(), 'yyyyMMddhhmmss'); const
      f = { begintime: d, endtime: e, limit: 1 }; β.getΦAWSDataList(f, (b) => { typeof a === 'function' && a(b); });
  }; const j = function (a, b) { β.getΦAWSInfo(a, (a) => { typeof b === 'function' && b(a); }); }; const k = function (a, b) { β.getΦStationRank(a, (a) => { typeof b === 'function' && b(a); }); }; const l = function (a, b) { β.getΦStationCityAvgRain(a, (a) => { typeof b === 'function' && b(a); }); }; const m = function (a, b) { β.getΦStationCountyAvgRain(a, (a) => { typeof b === 'function' && b(a); }); }; const n = function (a, b) { β.getΦHydrologyStationRank(a, (a) => { typeof b === 'function' && b(a); }); }; const o = function (a, b) { β.getΦStationCityAvgRain(a, (a) => { typeof b === 'function' && b(a); }); }; const p = function (a, b) { β.getΦStationCountyAvgRain(a, (a) => { typeof b === 'function' && b(a); }); }; const q = function (a, b) { β.getΦStationCityAvgRain(a, (a) => { typeof b === 'function' && b(a); }); }; const r = function (a, b) { β.getΦStationCountyAvgRain(a, (a) => { typeof b === 'function' && b(a); }); }; const s = function (a, b) { β.getΦMapTop8ByType(a, (a) => { typeof b === 'function' && b(a); }); }; const t = function (a, b) { β.getΦMapStsByRain(a, (a) => { typeof b === 'function' && b(a); }); }; const u = function (a, b) { β.getΦMapStsByWind(a, (a) => { typeof b === 'function' && b(a); }); }; const v = function (a, b) { β.getΦRadarList(a, (a) => { typeof b === 'function' && b(a); }); }; const w = function (a, b) { β.getΦRadarZJPng(a, (a) => { typeof b === 'function' && b(a); }); }; const x = function (b, c) { β.addΦRadarLayer(a, b, (a) => { typeof c === 'function' && c(a); }); }; const y = function () { β.removeΦRadarProduct(); }; const z = function (a) {
    const b = new Date(); const c = datehelper.addHours(-48, b); const d = datehelper.getDateFormat(c, 'yyyyMMddhhmmss'); const e = datehelper.getDateFormat(new Date(), 'yyyyMMddhhmmss'); var f = { begintime: d, endtime: e, limit: 1 }; var
      f = {
        productcategory: 'RADA_L3_MST_HREF_PNG_ZJ', begintime: d, endtime: e, limit: 1
      }; β.getΦRadarList(f, (b) => { if (b.RetrunCode == 0) { const c = b.DS[b.DS.length - 1].FileTime; const d = datehelper.parseDate(c, 'yyyyMMddhhmmss'); const e = datehelper.UTCtoBJT(d); const f = datehelper.getDateFormat(e, 'yyyyMMddhhmmss'); β.getΦRadarZJPng(b.DS[b.DS.length - 1].Url, (b) => { typeof a === 'function' && a({ time: f, url: b }); }); } else typeof a === 'function' && a(null); });
  }; const A = function (b, c) {
    const d = new Date(); const e = datehelper.addHours(-48, d); const f = datehelper.getDateFormat(e, 'yyyyMMddhhmmss'); const g = datehelper.getDateFormat(new Date(), 'yyyyMMddhhmmss'); var h = { begintime: f, endtime: g, limit: 1 }; var
      h = {
        productcategory: b, begintime: f, endtime: g, limit: 1
      }; β.getΦRainList(h, (d) => {
      if (d.RetrunCode == 0) {
        const e = d.DS[d.DS.length - 1].FileTime; const f = {
          nlat: 32.42, slat: 25.43, wlng: 114.67, elng: 125.32, opacity: 0.8, type: d.DS[d.DS.length - 1].Type, url: d.DS[d.DS.length - 1].Url
        }; β.addΦRadarLayer(a, f, (a) => { const d = datehelper.parseDate(e, 'yyyyMMddhhmmss'); let f = datehelper.getDateFormat(d, 'yyyy年MM月dd日hh时mm分') + '未来1小时降水预报'; b == 'RADA_L3_MST_QPF_180' ? f = datehelper.getDateFormat(d, 'yyyy年MM月dd日hh时mm分 未来3小时降水预报') : b == 'RADA_L3_MST_QPF_120' && (f = datehelper.getDateFormat(d, 'yyyy年MM月dd日hh时mm分 未来2小时降水预报')), typeof c === 'function' && c({ time: e, title: f, layer: a }); });
      } else typeof c === 'function' && c(null);
    });
  }; const B = function (a) { β.getΦDisasterData((b) => { typeof a === 'function' && a(b); }); }; const C = function (a, b) { a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), a.type || typeof a.type !== 'undefined' || (a.type = 'rainDist'), β.getΦDisasterRegionData(a, (c) => { const d = []; let e = ''; if (a.regioncode && a.regioncode.substring(2, 9) == '0000000') { e = a.regioncode.substr(0, 2); for (var f in c) { c[f][a.type], c[f].region.substring(4, 6), c[f].region.substring(6, 9); c[f][a.type] < 5 && c[f].region.substring(2, 4) != '00' && c[f].region.substring(6, 9) == '' && d.push(c[f]); } } else if (a.regioncode.substring(4, 9) == '00000') { e = a.regioncode.substr(0, 4); for (var f in c)c[f][a.type] < 5 && c[f].region.indexOf(e) >= 0 && c[f].region.substring(2, 4) != '00' && c[f].region.substring(6, 9) == '000' && d.push(c[f]); } else if (a.regioncode.RegionCode.substring(6, 9) == '000') { e = a.regioncode.substr(0, 6); for (var f in c)c[f][a.type] < 5 && c[f].region.indexOf(e) >= 0 && c[f].region.substring(2, 4) != '00' && c[f].region.substring(6, 9) != '000' && d.push(c[f]); } typeof b === 'function' && b(d); }); }; const D = function (a) { β.getΦWaData((b) => { typeof a === 'function' && a(b); }); }; const E = function (a) { β.getΦWaStsData((b) => { typeof a === 'function' && a(b); }); }; const F = function (a, b, c) { const d = a.length; let e = ''; if (b > d) for (let f = 0; b - d > f; f++)e += c; return e = a + e; }; const G = function (a) { return a.length != 9 && (a = F(a, 9, '0')), qxmapallJson.hasOwnProperty(a) ? qxmapallJson[a] : null; }; var H = function (a, b) { return code.length != 9 && (code = F(code, 9, '0')), qxmapallJson.hasOwnProperty(code) ? qxmapallJson[code] : null; }; const I = function (a) { return β.getΦForecastPic(a); }; var H = function (a) { return β.getΦAwsPic(a); }; const J = function (a) { β.getΦ7DForecastContent((b) => { typeof a === 'function' && a(b); }); }; const K = function (a, b) { β.getΦForecastRegion(a, (a) => { typeof b === 'function' && b(a); }); }; const L = function (a, b) { β.getΦForecastRiver(a, (a) => { typeof b === 'function' && b(a); }); }; const M = function (a) { β.getΦ3DForecastContent((b) => { typeof a === 'function' && a(b); }); }; const N = function (a) { const b = []; for (var c in qxmapallJson)console.log('c1', c); if (c.indexOf(a.substr(0, 4)) == 0 && c.substr(6, 3) == '000') { console.log('c2', c); const d = new Object(); d[c] = qxmapallJson[c], b.push(d); } return b; }; const O = function (a) { const b = []; for (const c in qxmapallJson)c.indexOf(a) == 0 && b.push({ key: qxmapallJson[c] }); return b; }; const P = function (a) {
    β.getΦWaData((b) => {
      if (b.DS && b.DS.length > 0) {
        const c = b.DS; const d = {
          orange: 0, orangecontent: [], red: 0, redcontent: [], blue: 0, bluecontent: [], yellow: 0, yellowcontent: []
        }; for (const e in c) { const f = c[e]; f.yjch.indexOf('解除') >= 0 || f.yjstatus == '0' || (f.yjch.indexOf('橙色') >= 0 ? (d.orange++, d.orangecontent.push(f.yjcontent)) : f.yjch.indexOf('红色') >= 0 ? (d.red++, d.redcontent.push(f.yjcontent)) : f.yjch.indexOf('蓝色') >= 0 ? (d.blue++, d.bluecontent.push(f.yjcontent)) : f.yjch.indexOf('黄色') >= 0 && (d.yellow++, d.yellowcontent.push(f.yjcontent))); } typeof a === 'function' && a([{ title: '预警' + (d.red + d.orange + d.yellow + d.blue).toFixed(0) + '条', content: d.redcontent.join(';') + d.orangecontent.join(';') + d.yellowcontent.join(';') + d.bluecontent.join(';'), url: 'http://47.96.89.177/hbweb/indexwarn.html' }]);
      }
    });
  }; const Q = setInterval; const R = function (a, b, c) { const d = Array.prototype.slice.call(arguments, 2); const e = function () { a.apply(null, d); }; Q(e, b); }; const S = function (a) { R(P, 6e4, a), P(a); }; const T = function (a, b) { β.getΦSKRiverRain(a, (a) => { typeof b === 'function' && b(a); }); }; const U = function (a) { β.getΦForecastRiver({}, (b) => { typeof a === 'function' && a(b); }); }; const V = function (a, b) { β.getΦForecastRegion(a, (a) => { typeof b === 'function' && b(a); }); }; const W = function (a, b) { β.getΦRealtimeDataByDistrict(a, (a) => { typeof b === 'function' && b(a); }); }; const X = function (a, b) { β.getΦRealtimeDataByLonLat(a, (a) => { typeof b === 'function' && b(a); }); }; const Y = function (a) { β.getΦRegionList((b) => { typeof a === 'function' && a(b); }); }; const Z = function (b) { β.addΦTileMap(a, b); }; const $ = function (a, b) { let c = 'http://121.41.10.210/zzdpic/weather.png?ref=' + ia(); a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), a.regioncode != '330000000' && (c = 'http://www.qxjcfw.cn/ExportData/ExportDataZZD/DrawCloudVectorImageForecast.ashx?ID=' + a.regioncode + '&title=天气实况&interface=SURF_ZJ_GRID_MUL_HOR&api=getGridEleInRectByTimeAndLevelAndValidtime&prodcode=weather&level=0&hours=60&isshowgrid=0&isshowminvalue=0.1&isshowregionvalue=0&isbackcolor=1&rainBow=weatherType.txt'); const d = new Image(); d.src = c, d.crossOrigin = 'Anonymous'; let e = ''; d.onload = function () { const a = document.createElement('canvas'); const f = a.getContext('2d'); a.width = d.width, a.height = d.height, f.drawImage(d, 0, 0, d.width, d.height); for (let g = 0; g < 14; g++) { const h = f.getImageData(g, 0, 1, 1).data; const i = (h[0], h[1], h[2], h[3]); e += i; } typeof b === 'function' && b({ imageurl: c, time: e }); }; }; const _ = function (a, b) {
    a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), a.minvalue || typeof a.minvalue !== 'undefined' || (a.minvalue = '7'); var a = {
      productcategory: 'weather', method: 'SURF_ZJ_GRID_MUL_HOR', interface: 'getGridEleInRectByTimeAndLevelAndValidtime', time: a.time, regioncode: a.regioncode, validtime: '60', level: '0', minvalue: a.minvalue
    }; β.getΦLocationInfo(a, (c) => { if (c.returnCode == 0) { const d = c.DS; let e = ''; let f = ''; const g = datehelper.parseDate(c.time, 'yyyyMMddhhmmss'); const h = datehelper.getDateFormat(g, 'yyyy年MM月dd日hh时mm分'); let i = h + '天气现象 ' + β.getΦAreaName(a.regioncode); let j = 0; let k = 0; for (const l in d) { const m = d[l]; if (m.ID.substring(4, 9) != '00000') { const n = β.getΦAreaName(m.ID); m.ID.substring(6, 9) != '000' ? (f += n + ',', j++) : (e += n + ',', k++); } }a.regioncode == '330000000' && e != '' ? i += '暴雨以上落区共' + k + '个市县(' + j + '个乡镇):' + e.substring(0, e.length - 1) : f != '' && (i += '暴雨以上落区共' + j + '个乡镇:' + f.substring(0, f.length - 1)), typeof b === 'function' && b(i); } });
  }; const aa = function (a, b) { a.productcategory == 'weather' ? _(a, b) : a.productcategory == 'pr01' ? ea(a, b) : a.productcategory == 'radarherf' ? fa(a, b) : a.productcategory == 'r10min' ? da(a, b) : a.productcategory == 'windvawssea10m' ? ba(a, b) : a.productcategory == 'windex12' ? ca(a, b) : a.productcategory == 'typhoonpath' && β.getΦTyphoonLocationInfo(a, b); }; var ba = function (a, b) {
    a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), a.minvalue || typeof a.minvalue !== 'undefined' || (a.minvalue = 10); const c = a; const d = {
      productcategory: a.productcategory, method: 'SURF_ZJ_GRID_MUL_MIN', interface: 'getGridEleInRectByTimeAndLevelAndValidtime', time: c.time, regioncode: c.regioncode, validtime: 0, level: '0', minvalue: c.minvalue
    }; β.getΦLocationInfo(d, (c) => { if (c.returnCode == 0) { const d = c.DS; let e = ''; let f = ''; const g = datehelper.parseDate(c.time, 'yyyyMMddhhmmss'); const h = datehelper.getDateFormat(g, 'yyyy年MM月dd日hh时mm分'); let i = h + '10分钟大风 ' + β.getΦAreaName(a.regioncode); let j = 0; let k = 0; for (const l in d) { const m = d[l]; if (m.ID.substring(4, 9) != '00000') { const n = β.getΦAreaName(m.ID); m.ID.substring(6, 9) != '000' ? (f += n + ',', j++) : (e += n + ',', k++); } }a.regioncode == '330000000' && e != '' ? i += a.minvalue + 'm/s以上落区共' + k + '个市县(' + j + '个乡镇):' + e.substring(0, e.length - 1) : f != '' && (i += a.minvalue + 'm/s以上落区共' + j + '个乡镇:' + f.substring(0, f.length - 1)), typeof b === 'function' && b(i); } });
  }; var ca = function (a, b) {
    a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), a.minvalue || typeof a.minvalue !== 'undefined' || (a.minvalue = 10); const c = a; const d = {
      productcategory: a.productcategory, method: 'NAFP_FOR_FTM_Smart_ZJ', interface: 'getGridForecastEleGridInRectByTimeAndLevelAndValidtime', time: c.time, regioncode: c.regioncode, validtime: 12, level: '0', minvalue: c.minvalue
    }; β.getΦLocationInfo(d, (c) => { if (c.returnCode == 0) { const d = c.DS; let e = ''; let f = ''; const g = datehelper.parseDate(c.time, 'yyyyMMddhhmmss'); const h = datehelper.getDateFormat(g, 'yyyy年MM月dd日hh时mm分'); let i = h + '未来12小时极大风预报 ' + β.getΦAreaName(a.regioncode); let j = 0; let k = 0; for (const l in d) { const m = d[l]; if (m.ID.substring(4, 9) != '00000') { const n = β.getΦAreaName(m.ID); m.ID.substring(6, 9) != '000' ? (f += n + ',', j++) : (e += n + ',', k++); } }a.regioncode == '330000000' && e != '' ? i += a.minvalue + '级以上落区共' + k + '个市县(' + j + '个乡镇):' + e.substring(0, e.length - 1) : f != '' && (i += a.minvalue + '级以上落区共' + j + '个乡镇:' + f.substring(0, f.length - 1)), typeof b === 'function' && b(i); } });
  }; var da = function (a, b) {
    a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), a.minvalue || typeof a.minvalue !== 'undefined' || (a.minvalue = 10); const c = a; const d = {
      productcategory: a.productcategory, method: 'SURF_ZJ_GRID_MUL_MIN', interface: 'getGridEleInRectByTimeAndLevelAndValidtime', time: c.time, regioncode: c.regioncode, validtime: 0, level: '0', minvalue: c.minvalue
    }; β.getΦLocationInfo(d, (c) => { if (c.returnCode == 0) { const d = c.DS; let e = ''; let f = ''; const g = datehelper.parseDate(c.time, 'yyyyMMddhhmmss'); const h = datehelper.getDateFormat(g, 'yyyy年MM月dd日hh时mm分'); let i = h + '1小时降水 ' + β.getΦAreaName(a.regioncode); let j = 0; let k = 0; for (const l in d) { const m = d[l]; if (m.ID.substring(4, 9) != '00000') { const n = β.getΦAreaName(m.ID); m.ID.substring(6, 9) != '000' ? (f += n + ',', j++) : (e += n + ',', k++); } }a.regioncode == '330000000' && e != '' ? i += a.minvalue + 'mm以上落区共' + k + '个市县(' + j + '个乡镇):' + e.substring(0, e.length - 1) : f != '' && (i += a.minvalue + 'mm以上落区共' + j + '个乡镇:' + f.substring(0, f.length - 1)), typeof b === 'function' && b(i); } });
  }; var ea = function (a, b) {
    a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), a.minvalue || typeof a.minvalue !== 'undefined' || (a.minvalue = 10); const c = a; const d = {
      productcategory: 'radarqpf360', method: 'RADA_L3_MST_QPF', interface: 'getRadarGridInRectByTimeAndLevelAndValidtime', time: c.time, regioncode: c.regioncode, validtime: 60, level: '0', minvalue: c.minvalue
    }; β.getΦLocationInfo(d, (c) => { if (c.returnCode == 0) { const d = c.DS; let e = ''; let f = ''; const g = datehelper.parseDate(c.time, 'yyyyMMddhhmmss'); const h = datehelper.getDateFormat(g, 'yyyy年MM月dd日hh时mm分'); let i = h + '未来1小时降水预报 ' + β.getΦAreaName(a.regioncode); let j = 0; let k = 0; for (const l in d) { const m = d[l]; if (m.ID.substring(4, 9) != '00000') { const n = β.getΦAreaName(m.ID); m.ID.substring(6, 9) != '000' ? (f += n + ',', j++) : (e += n + ',', k++); } }a.regioncode == '330000000' && e != '' ? i += a.minvalue + 'mm以上落区共' + k + '个市县(' + j + '个乡镇):' + e.substring(0, e.length - 1) : f != '' && (i += a.minvalue + 'mm以上落区共' + j + '个乡镇:' + f.substring(0, f.length - 1)), typeof b === 'function' && b(i); } });
  }; var fa = function (a, b) {
    a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), a.minvalue || typeof a.minvalue !== 'undefined' || (a.minvalue = 50); const c = a; const d = {
      productcategory: 'herf', method: 'RADA_L3_MST_Mosaic', interface: 'getRadarGridInRectByTimeAndLevelAndValidtime', time: c.time, regioncode: c.regioncode, validtime: '0', level: '0', minvalue: c.minvalue
    }; β.getΦLocationInfo(d, (c) => { if (c.returnCode == 0) { const d = c.DS; let e = ''; let f = ''; const g = datehelper.parseDate(c.time, 'yyyyMMddhhmmss'); const h = datehelper.getDateFormat(g, 'yyyy年MM月dd日hh时mm分'); let i = h + '雷达反射率 ' + β.getΦAreaName(a.regioncode); let j = 0; let k = 0; for (const l in d) { const m = d[l]; if (m.ID.substring(4, 9) != '00000') { const n = β.getΦAreaName(m.ID); m.ID.substring(6, 9) != '000' ? (f += n + ',', j++) : (e += n + ',', k++); } }a.regioncode == '330000000' && e != '' ? i += a.minvalue + 'dbz以上落区共' + k + '个市县(' + j + '个乡镇):' + e.substring(0, e.length - 1) : f != '' && (i += a.minvalue + 'dbz以上落区共' + j + '个乡镇:' + f.substring(0, f.length - 1)), typeof b === 'function' && b(i); } });
  }; const ga = function (a) { return a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), a.regioncode == '330000000' ? 'http://121.41.10.210/zzdpic/weather.png?ref=' + ia() : 'http://www.qxjcfw.cn/ExportData/ExportDataZZD/DrawCloudVectorImageForecast.ashx?ID=' + a.regioncode + '&title=天气实况&interface=SURF_ZJ_GRID_MUL_HOR&api=getGridEleInRectByTimeAndLevelAndValidtime&prodcode=weather&level=0&hours=60&isshowgrid=0&isshowminvalue=0.1&isshowregionvalue=0&isbackcolor=1&rainBow=weatherType.txt'; }; const ha = function (a) { return a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), a.regioncode == '330000000' ? 'http://121.41.10.210/zzdpic/disaster.png?ref=' + ia() : 'http://www.qxjcfw.cn/ExportData/ExportDataZZD/DrawDisterImage.ashx?ID=' + a.regioncode; }; var ia = function () { const a = new Date(); return a.getTime() + Math.round(89 * Math.random() + 100).toString(); }; const ja = function (a) { return a.productcategory == 'R1EightRiver' ? 'http://121.41.10.210/zzdpic/rain1_sk_8river.png?1=1&ref=' + ia() : a.productcategory == 'R3EightRiver' ? 'http://121.41.10.210/zzdpic/rain3_sk_8river.png?1=1&ref=' + ia() : a.productcategory == 'R6EightRiver' ? 'http://121.41.10.210/zzdpic/rain6_sk_8river.png?1=1&ref=' + ia() : a.productcategory == 'R12EightRiver' ? 'http://121.41.10.210/zzdpic/rain12_sk_8river.png?1=1&ref=' + ia() : a.productcategory == 'R24EightRiver' ? 'http://121.41.10.210/zzdpic/rain24_sk_8river.png?1=1&ref=' + ia() : a.productcategory == 'R48EightRiver' ? 'http://121.41.10.210/zzdpic/rain48_sk_8river.png?1=1&ref=' + ia() : a.productcategory == 'R72EightRiver' ? 'http://121.41.10.210/zzdpic/rain72_sk_8river.png?1=1&ref=' + ia() : void 0; }; const ka = function (a) { return a.productcategory == 'pr01EightRiver' ? 'http://121.41.10.210/zzdpic/rainforecast_1_8river.png?1=1&ref=' + ia() : a.productcategory == 'pr03EightRiver' ? 'http://121.41.10.210/zzdpic/rainforecast_3_8river.png?1=1&ref=' + ia() : a.productcategory == 'pr06EightRiver' ? 'http://121.41.10.210/zzdpic/rainforecast_6_8river.png?1=1&ref=' + ia() : a.productcategory == 'pr12EightRiver' ? 'http://121.41.10.210/zzdpic/rainforecast_12_8river.png?1=1&ref=' + ia() : a.productcategory == 'pr24EightRiver' ? 'http://121.41.10.210/zzdpic/rainforecast_24_8river.png?1=1&ref=' + ia() : a.productcategory == 'pr48EightRiver' ? 'http://121.41.10.210/zzdpic/rainforecast_48_8river.png?1=1&ref=' + ia() : a.productcategory == 'pr72EightRiver' ? 'http://121.41.10.210/zzdpic/rainforecast_72_8river.png?1=1&ref=' + ia() : void 0; }; const la = function (a) { if (a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), a.regioncode != '330000000') { let b = '雨量分布图'; let c = 'rain12h.clv'; let d = 'SURF_ZJ_GRID_MUL_HOR'; if (a.productcategory == 'R1' ? (b = '近1小时雨量分布图', c = 'rain1h.clv') : a.productcategory == 'r10min' ? (b = '近1小时雨量分布图', c = 'rain1h.clv', d = 'SURF_ZJ_GRID_MUL_MIN') : a.productcategory == 'windvawssea10m' ? (b = '10分钟风实况分布图', c = 'WindV.clv', d = 'SURF_ZJ_GRID_MUL_MIN') : a.productcategory == 'R3' ? (b = '近3小时雨量分布图', c = 'rain6h.clv') : a.productcategory == 'R6' ? (b = '近6小时雨量分布图', c = 'rain6h.clv') : a.productcategory == 'R12' ? (b = '近12小时雨量分布图', c = 'rain6h.clv') : a.productcategory == 'R24' ? (b = '近24小时雨量分布图', c = 'rain24h.clv') : a.productcategory == 'R48' ? (b = '近48小时雨量分布图', c = 'rain24h.clv') : a.productcategory == 'R72' && (b = '近72小时雨量分布图', c = 'rain24h.clv'), !a.time && typeof a.time === 'undefined') { const e = new Date(); if (e.getMinutes() < 20) { const f = datehelper.addHours(-1, e); a.time = datehelper.getDateFormat(f, 'yyyyMMddhh0000'); } else a.time = datehelper.getDateFormat(e, 'yyyyMMddhh0000'); } return 'http://www.qxjcfw.cn/ExportData/ExportDataZZD/DrawCloudVectorImageForecast.ashx?ID=' + a.regioncode + '&title=' + b + '&interface=' + d + '&api=getGridEleInRectByTimeAndLevelAndValidtime&time=' + a.time + '&prodcode=' + a.productcategory + '&level=0&hours=0&isshowgrid=1&isshowminvalue=0.1&isshowregionvalue=0&rainBow=' + c; } return a.productcategory == 'R1' ? 'http://121.41.10.210/zzdpic/rain1_sk.png?1=1&ref=' + ia() : a.productcategory == 'R3' ? 'http://121.41.10.210/zzdpic/rain3_sk.png?1=1&ref=' + ia() : a.productcategory == 'R6' ? 'http://121.41.10.210/zzdpic/rain6_sk.png?1=1&ref=' + ia() : a.productcategory == 'R12' ? 'http://121.41.10.210/zzdpic/rain12_sk.png?1=1&ref=' + ia() : a.productcategory == 'R24' ? 'http://121.41.10.210/zzdpic/rain24_sk.png?1=1&ref=' + ia() : a.productcategory == 'R48' ? 'http://121.41.10.210/zzdpic/rain48_sk.png?1=1&ref=' + ia() : a.productcategory == 'R72' ? 'http://121.41.10.210/zzdpic/rain72_sk.png?1=1&ref=' + ia() : a.productcategory == 'r10min' ? 'http://121.41.10.210/zzdpic/rain10min_sk.png?1=1&ref=' + ia() : a.productcategory == 'windvawssea10m' ? 'http://121.41.10.210/zzdpic/wind10min_sk.png?1=1&ref=' + ia() : void 0; }; const ma = function (a) {
    if (a.regioncode || typeof a.regioncode !== 'undefined' || (a.regioncode = '330000000'), a.regioncode == '330000000') { if (a.productcategory == 'pr01') return 'http://121.41.10.210/zzdpic/rainforecast_1.png?1=1&ref=' + ia(); if (a.productcategory == 'pr03') return 'http://121.41.10.210/zzdpic/rainforecast_3.png?1=1&ref=' + ia(); if (a.productcategory == 'pr06') return 'http://121.41.10.210/zzdpic/rainforecast_6.png?1=1&ref=' + ia(); if (a.productcategory == 'pr12') return 'http://121.41.10.210/zzdpic/rainforecast_12.png?1=1&ref=' + ia(); if (a.productcategory == 'pr24') return 'http://121.41.10.210/zzdpic/rainforecast_24.png?1=1&ref=' + ia(); if (a.productcategory == 'pr48') return 'http://121.41.10.210/zzdpic/rainforecast_48.png?1=1&ref=' + ia(); if (a.productcategory == 'pr72') return 'http://121.41.10.210/zzdpic/rainforecast_72.png?1=1&ref=' + ia(); if (a.productcategory == 'windex') return 'http://121.41.10.210/zzdpic/windexforecast.png?1=1&ref=' + ia(); if (a.productcategory == 'windex12') return 'http://121.41.10.210/zzdpic/windex12forecast.png?1=1&ref=' + ia(); } else {
      let b = '雨量分布图'; if (a.productcategory == 'pr01') return 'http://www.qxjcfw.cn/ExportData/ExportDataZZD/DrawCloudVectorImageForecast.ashx?ID=' + a.regioncode + '&title=未来1小时降水预报&interface=RADA_L3_MST_QPF&api=getRadarGridInRectByTimeAndLevelAndValidtime&prodcode=radarqpf360&level=0&hours=60&isshowgrid=1&isshowminvalue=0.1&isshowregionvalue=0&rainBowContent=0.1_rgba(169,255,253,255);2.0_rgba(45,212,253,255);5.0_rgba(45,167,255,255);10.0_rgba(45,126,255,255);15.0_rgba(81,168,45,255);20.0_rgba(74,255,45,255);25.0_rgba(255,253,45,255);35.0_rgba(255,209,47,255);50.0_rgba(255,168,45,255);60.0_rgba(255,45,45,255);70.0_rgba(205,47,48,255);85.0_rgba(170,45,45,255);100.0_rgba(172,45,172,255);120.0_rgba(218,45,222,255);150.0_rgba(240,45,255,255);'; if (a.productcategory == 'pr03') return 'http://www.qxjcfw.cn/ExportData/ExportDataZZD/DrawCloudVectorImageForecast.ashx?ID=' + a.regioncode + '&title=未来3小时降水预报&interface=RADA_L3_MST_QPF&api=getRadarGridInRectByTimeAndLevelAndValidtime&prodcode=radarqpf360&level=0&hours=180&isshowgrid=1&isshowminvalue=0.1&isshowregionvalue=0&rainBowContent=0.1_rgba(169,255,253,255);2.0_rgba(45,212,253,255);5.0_rgba(45,167,255,255);10.0_rgba(45,126,255,255);15.0_rgba(81,168,45,255);20.0_rgba(74,255,45,255);25.0_rgba(255,253,45,255);35.0_rgba(255,209,47,255);50.0_rgba(255,168,45,255);60.0_rgba(255,45,45,255);70.0_rgba(205,47,48,255);85.0_rgba(170,45,45,255);100.0_rgba(172,45,172,255);120.0_rgba(218,45,222,255);150.0_rgba(240,45,255,255);'; if (a.productcategory == 'pr06') {
        var c = new Date(); let
          d = '02'; c.getHours() >= 2 && c.getHours() < 8 ? d = '02' : c.getHours() >= 8 && c.getHours() < 16 ? d = '08' : c.getHours() >= 16 && c.getHours() < 8 && (d = '16'), c.getHours() >= 20 && (d = '20'); let e = datehelper.getDateFormat(new Date(), 'yyyyMMdd') + d + '0000'; c.getHours() >= 0 && c.getHours() < 2 && (d = '20', h = datehelper.addHours(-24, new Date()), e = datehelper.getDateFormat(h, 'yyyyMMdd') + d + '0000'); const f = (datehelper.parseDate(e, 'yyyyMMddHHmmss'), datehelper.addHours(6, new Date())); var g = datehelper.getDateFormat(f, 'yyyyMMddHHmmss'); return 'http://www.qxjcfw.cn/ExportData/ExportDataZZD/DrawCloudVectorImageForecast.ashx?ID=' + a.regioncode + '&title=6小时降水预报&interface=NAFP_FOR_FTM_Smart_ZJ&api=getGridForecastEleGridInRectByTimeAndLevelAndValidtime&time=' + g + '&prodcode=pr06&level=0&hours=0&isshowgrid=1&isshowminvalue=0.1&isshowregionvalue=0&rainBowContent=0.1_rgba(169,255,253,255);2.0_rgba(45,212,253,255);5.0_rgba(45,167,255,255);10.0_rgba(45,126,255,255);15.0_rgba(81,168,45,255);20.0_rgba(74,255,45,255);25.0_rgba(255,253,45,255);35.0_rgba(255,209,47,255);50.0_rgba(255,168,45,255);60.0_rgba(255,45,45,255);70.0_rgba(205,47,48,255);85.0_rgba(170,45,45,255);100.0_rgba(172,45,172,255);120.0_rgba(218,45,222,255);150.0_rgba(240,45,255,255);';
      } if (a.productcategory == 'pr12') { var c = new Date(); if (c.getHours() >= 8 && c.getHours() < 20) { var g = datehelpergetDateFormat(c, 'yyyyMMdd') + '200000'; return 'http://www.qxjcfw.cn/ExportData/ExportDataZZD/DrawCloudVectorImageForecast.ashx?ID=' + a.regioncode + '&title=12小时降水预报&interface=NAFP_FOR_FTM_Smart_ZJ&api=getGridForecastEleGridInRectByTimeAndLevelAndValidtime&time=' + g + '&prodcode=pr12&level=0&hours=0&isshowgrid=1&isshowminvalue=0.1&isshowregionvalue=0&rainBowContent=0.1_rgba(169,255,253,255);2.0_rgba(45,212,253,255);5.0_rgba(45,167,255,255);10.0_rgba(45,126,255,255);15.0_rgba(81,168,45,255);20.0_rgba(74,255,45,255);25.0_rgba(255,253,45,255);35.0_rgba(255,209,47,255);50.0_rgba(255,168,45,255);60.0_rgba(255,45,45,255);70.0_rgba(205,47,48,255);85.0_rgba(170,45,45,255);100.0_rgba(172,45,172,255);120.0_rgba(218,45,222,255);150.0_rgba(240,45,255,255);'; } var g = datehelper.getDateFormat(c, 'yyyyMMdd') + '080000'; return 'http://www.qxjcfw.cn/ExportData/ExportDataZZD/DrawCloudVectorImageForecast.ashx?ID=' + a.regioncode + '&title=12小时降水预报&interface=NAFP_FOR_FTM_Smart_ZJ&api=getGridForecastEleGridInRectByTimeAndLevelAndValidtime&time=' + g + '&prodcode=pr12&level=0&hours=0&isshowgrid=1&isshowminvalue=0.1&isshowregionvalue=0&rainBowContent=0.1_rgba(169,255,253,255);2.0_rgba(45,212,253,255);5.0_rgba(45,167,255,255);10.0_rgba(45,126,255,255);15.0_rgba(81,168,45,255);20.0_rgba(74,255,45,255);25.0_rgba(255,253,45,255);35.0_rgba(255,209,47,255);50.0_rgba(255,168,45,255);60.0_rgba(255,45,45,255);70.0_rgba(205,47,48,255);85.0_rgba(170,45,45,255);100.0_rgba(172,45,172,255);120.0_rgba(218,45,222,255);150.0_rgba(240,45,255,255);'; } if (a.productcategory == 'pr24') { var c = new Date(); if (c.getHours() >= 8 && c.getHours() < 20) { var h = datehelper.addHours(24, new Date()); var g = datehelper.getDateFormat(h, 'yyyyMMdd') + '080000'; return 'http://www.qxjcfw.cn/ExportData/ExportDataZZD/DrawCloudVectorImageForecast.ashx?ID=' + a.regioncode + '&title=24小时降水预报&interface=NAFP_FOR_FTM_Smart_ZJ&api=getGridForecastEleGridInRectByTimeAndLevelAndValidtime&time=' + g + '&prodcode=pr24&level=0&hours=0&isshowgrid=1&isshowminvalue=0.1&isshowregionvalue=0&rainBowContent=0.1_rgba(169,255,253,255);2.0_rgba(45,212,253,255);5.0_rgba(45,167,255,255);10.0_rgba(45,126,255,255);15.0_rgba(81,168,45,255);20.0_rgba(74,255,45,255);25.0_rgba(255,253,45,255);35.0_rgba(255,209,47,255);50.0_rgba(255,168,45,255);60.0_rgba(255,45,45,255);70.0_rgba(205,47,48,255);85.0_rgba(170,45,45,255);100.0_rgba(172,45,172,255);120.0_rgba(218,45,222,255);150.0_rgba(240,45,255,255);'; } var h = datehelper.addHours(24, new Date()); var g = datehelper.getDateFormat(h, 'yyyyMMdd') + '200000'; return 'http://www.qxjcfw.cn/ExportData/ExportDataZZD/DrawCloudVectorImageForecast.ashx?ID=' + a.regioncode + '&title=24小时降水预报&interface=NAFP_FOR_FTM_Smart_ZJ&api=getGridForecastEleGridInRectByTimeAndLevelAndValidtime&time=' + g + '&prodcode=pr24&level=0&hours=0&isshowgrid=1&isshowminvalue=0.1&isshowregionvalue=0&rainBowContent=0.1_rgba(169,255,253,255);2.0_rgba(45,212,253,255);5.0_rgba(45,167,255,255);10.0_rgba(45,126,255,255);15.0_rgba(81,168,45,255);20.0_rgba(74,255,45,255);25.0_rgba(255,253,45,255);35.0_rgba(255,209,47,255);50.0_rgba(255,168,45,255);60.0_rgba(255,45,45,255);70.0_rgba(205,47,48,255);85.0_rgba(170,45,45,255);100.0_rgba(172,45,172,255);120.0_rgba(218,45,222,255);150.0_rgba(240,45,255,255);'; } if (a.productcategory == 'pr48')b = '48小时雨量预报分布图'; else if (a.productcategory == 'pr72')b = '72小时雨量预报分布图'; else { if (a.productcategory == 'windex') return 'http://www.qxjcfw.cn/ExportData/ExportDataZZD/DrawCloudVectorImageForecast.ashx?ID=' + a.regioncode + '&title=12小时极大风预报&interface=NAFP_FOR_FTM_Smart_ZJ&api=getGridForecastEleGridInRectByTimeAndLevelAndValidtime&time=' + g + '&prodcode=windex&level=0&hours=0&isshowgrid=1&isshowminvalue=0.1&isshowregionvalue=0&rainBow=WindLevel.clv'; if (a.productcategory == 'windex12') { var c = new Date(); if (c.getHours() >= 8 && c.getHours() < 20) { var g = datehelpergetDateFormat(c, 'yyyyMMdd') + '200000'; return 'http://www.qxjcfw.cn/ExportData/ExportDataZZD/DrawCloudVectorImageForecast.ashx?ID=' + a.regioncode + '&title=12小时极大风预报&interface=NAFP_FOR_FTM_Smart_ZJ&api=getGridForecastEleGridInRectByTimeAndLevelAndValidtime&time=' + g + '&prodcode=windex12&level=0&hours=12&isshowgrid=1&isshowminvalue=0.1&isshowregionvalue=0&rainBow=WindLevel.clv'; } var g = datehelper.getDateFormat(c, 'yyyyMMdd') + '080000'; return 'http://www.qxjcfw.cn/ExportData/ExportDataZZD/DrawCloudVectorImageForecast.ashx?ID=' + a.regioncode + '&title=12小时极大风预报&interface=NAFP_FOR_FTM_Smart_ZJ&api=getGridForecastEleGridInRectByTimeAndLevelAndValidtime&time=' + g + '&prodcode=windex12&level=0&hours=12&isshowgrid=1&isshowminvalue=0.1&isshowregionvalue=0&rainBow=WindLevel.clv'; } }
    }
  }; const na = function (a, b) { β.getΦStartTTP(a, b); }; const oa = function () { β.getΦStopTTP(); }; return {
    getRealTimeWarn: D, getRadarList: v, getMapStsByWind: u, getMapStsByRain: t, getMapTop8ByType: s, getStationCountyMaxWind: r, getStationCityMaxWind: q, getHydrologyStationCountyAvgRain: p, getHydrologyStationCityAvgRain: o, getHydrologyStationRank: n, getStationCityAvgRain: l, getStationCountyAvgRain: m, getStationRank: k, getAWSInfo: j, getLasterAWSDataList: i, getAWSDataList: b, getRadarZJPng: w, getLasterRadarZJPng: z, getDisasterRegionData: C, getDisasterData: B, getRealTimeWarnSts: E, getRegionName: G, getAwsPic: H, getForecastPic: I, get3DForecastContent: M, get7DForecastContent: J, getSubRegionByRegionCode: O, getCountryByRegionCode: N, getForecastRiverRank: L, getForecastRegionRank: K, getAlarmInfo: S, getForecastRegion: V, getForecastRiver: U, getSKRiverRain: T, addLasterForecastVector: e, removeVectorLayer: h, removeGridLayer: g, getVectorList: c, addVectorLayer: d, addLasterAWSVector: f, addLasterRadarPng: A, removeRadarLayer: y, getRealtimeDataByDistrict: W, getRealtimeDataByLonLat: X, getRegionList: Y, addTileMap: Z, addRadarLayer: x, getForecastPicByRegion: ma, getAWSPicByRegion: la, getDisasterPic: ha, getWeatherPic: ga, startQXTTP: na, stopQXTTP: oa, getForecastRiverPic: ka, getAWSRiverPic: ja, getWeatherPicV2: $, getLocationInfo: aa
  };
}; when = (function (a, b) {
  return a(() => {
    function a(a, b, d, e) { return c(a).then(b, d, e); } function c(a) { return a instanceof d ? a : e(a); } function d(a, b) { this._message = a, this.inspect = b; } function e(a) { return h((b) => { b(a); }); } function f(b) { return a(b, l); } function g() {
      function a(a, f, g) { b.resolve = b.resolver.resolve = function (b) { return d ? e(b) : (d = !0, a(b), c); }, b.reject = b.resolver.reject = function (a) { return d ? e(l(a)) : (d = !0, f(a), c); }, b.notify = b.resolver.notify = function (a) { return g(a), a; }; } let b; let c; let d; return b = {
        promise: U, resolve: U, reject: U, notify: U, resolver: { resolve: U, reject: U, notify: U }
      }, b.promise = c = h(a), b;
    } function h(a) { return i(a, S.PromiseStatus && S.PromiseStatus()); } function i(a, b) { function c(a, b, c, d) { function e(e) { e._message(a, b, c, d); }m ? m.push(e) : F(() => { e(k); }); } function e() { return k ? k.inspect() : E(); } function f(a) { if (m) { const c = m; m = U, F(() => { k = o(i, a), b && s(k, b), j(c, k); }); } } function g(a) { f(l(a)); } function h(a) { if (m) { const b = m; F(() => { j(b, n(a)); }); } } let i; let k; var m = []; i = new d(c, e), i._status = b; try { a(f, g, h); } catch (p) { g(p); } return i; } function j(a, b) { for (let c = 0; c < a.length; c++)a[c](b); } function k(a) { return m(new q(a), () => C(a)); } function l(a) { return m(new r(a), () => D(a)); } function m(a, b) { return new d(((b, c, d) => { try { d(a[b].apply(a, c)); } catch (e) { d(l(e)); } }), b); } function n(a) { return new d(((b, c, d, e) => { const f = c[2]; try { e(typeof f === 'function' ? f(a) : a); } catch (g) { e(g); } })); } function o(a, b) { if (b === a) return l(new TypeError()); if (b instanceof d) return b; try { const c = b === Object(b) && b.then; return typeof c === 'function' ? p(c, b) : k(b); } catch (e) { return l(e); } } function p(a, b) { return h((c, d) => { L(a, b, c, d); }); } function q(a) { this.value = a; } function r(a) { this.reason = a; } function s(a, b) { function c() { b.fulfilled(); } function d(a) { b.rejected(a); }a.then(c, d); } function t(a) { return a && typeof a.then === 'function'; } function u(b, c, d, e, f) { return a(b, (b) => { function g(d, e, f) { function g(a) { n(a); } function h(a) { m(a); } let i; let j; let k; let l; let m; let n; let o; let p; if (o = b.length >>> 0, i = Math.max(0, Math.min(c, o)), k = [], j = o - i + 1, l = [], i) for (n = function (a) { l.push(a), --j || (m = n = H, e(l)); }, m = function (a) { k.push(a), --i || (m = n = H, d(k)); }, p = 0; o > p; ++p)p in b && a(b[p], h, g, f); else d(k); } return h(g).then(d, e, f); }); } function v(a, b, c, d) { function e(a) { return b ? b(a[0]) : a[0]; } return u(a, 1, e, c, d); } function w(a, b, c, d) { return A(a, H).then(b, c, d); } function x() { return A(arguments, H); } function y(a) { return A(a, C, D); } function z(a, b) { return A(a, b); } function A(b, c, d) { return a(b, (b) => { function e(e, f, g) { function h(b, h) { a(b, c, d).then((a) => { i[h] = a, --k || e(i); }, f, g); } let i; let j; let k; let l; if (k = j = b.length >>> 0, i = [], !k) return void e(i); for (l = 0; j > l; l++)l in b ? h(b[l], l) : --k; } return i(e); }); } function B(b, c) { const d = L(K, arguments, 1); return a(b, (b) => { let e; return e = b.length, d[0] = function (b, d, f) { return a(b, (b) => a(d, (a) => c(b, a, f, e))); }, J.apply(b, d); }); } function C(a) { return { state: 'fulfilled', value: a }; } function D(a) { return { state: 'rejected', reason: a }; } function E() { return { state: 'pending' }; } function F(a) { N.push(a) === 1 && M(G); } function G() { j(N), N = []; } function H(a) { return a; } function I(a) { throw typeof S.reportUnhandled === 'function' ? S.reportUnhandled() : F(() => { throw a; }), a; }a.promise = h, a.resolve = e, a.reject = f, a.defer = g, a.join = x, a.all = w, a.map = z, a.reduce = B, a.settle = y, a.any = v, a.some = u, a.isPromise = t, a.isPromiseLike = t, d.prototype = {
      then(a, b, c) { let d; let e; return d = arguments, e = this._message, i((a, b, c) => { e('when', d, a, c); }, this._status && this._status.observed()); }, otherwise(a) { return this.then(U, a); }, ensure(a) { function b() { return e(a()); } return typeof a === 'function' ? this.then(b, b).yield(this) : this; }, done(a, b) { this.then(a, b).otherwise(I); }, yield(a) { return this.then(() => a); }, tap(a) { return this.then(a).yield(this); }, spread(a) { return this.then((b) => w(b, (b) => a.apply(U, b))); }, always(a, b) { return this.then(a, a, b); }
    }, q.prototype.when = function (a) { return typeof a === 'function' ? a(this.value) : this.value; }, r.prototype.when = function (a, b) { if (typeof b === 'function') return b(this.reason); throw this.reason; }; let J; let K; let L; let M; let N; let O; let P; let Q; let R; let S; let T; let U; return N = [], O = b.setTimeout, S = typeof console !== 'undefined' ? console : a, M = typeof process === 'object' && process.nextTick ? process.nextTick : (T = b.MutationObserver || b.WebKitMutationObserver) ? (function (a, b, c) { const d = a.createElement('div'); return new b(c).observe(d, { attributes: !0 }), function () { d.setAttribute('x', 'x'); }; }(document, T, G)) : function (a) { O(a, 0); }, P = Function.prototype, Q = P.call, L = P.bind ? Q.bind(Q) : function (a, b) { return a.apply(b, K.call(arguments, 2)); }, R = [], K = R.slice, J = R.reduce || function (a) { let b; let c; let d; let e; let f; if (f = 0, b = Object(this), e = b.length >>> 0, c = arguments, c.length <= 1) for (;;) { if (f in b) { d = b[f++]; break; } if (++f >= e) throw new TypeError(); } else d = c[1]; for (;e > f; ++f)f in b && (d = a(d, b[f], f, b)); return d; }, a;
  });
}((a) => a(), this));
